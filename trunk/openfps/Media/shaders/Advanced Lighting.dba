`====================================================
` Advanced Lighting Functions
`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

`--------------
` Find a Free Camera
`--------------
function Find_Free_Camera()
   c=0
   repeat:inc c:until camera exist(c)=0
endfunction c

`--------------
` Find a Free Image
`--------------
function Find_Free_Image()
   i=1000
   repeat:inc i:until Image exist(i)=0
endfunction i

`--------------
` Find a Free Object
`--------------
function Find_Free_Object()
   o=1000
   repeat:inc o:until object exist(o)=0
endfunction o

`--------------
` Find a Free Effect
`--------------
function Find_Free_Effect()
   e=500
   repeat:inc e:until effect exist(e)=0
endfunction e

`--------------
` Find a Free Sound
`--------------
function Find_Free_Sound()
   s=1000
   repeat:inc s:until sound exist(s)=0
endfunction s

`--------------
` Find Used image
`--------------
Function Find_Used_Image(Texture$)
   if file exist(Texture$)=1
      Image=0
      if FindUsedImageCount=0
         global FindUsedImageCount
         global dim FindUsedImageNumber()
         global dim FindUsedImageName$()
      endif
      for i=0 to FindUsedImageCount-1
         if FindUsedImageName$(i)=Texture$ then Image=FindUsedImageNumber(i):exit
      next i
      if Image=0
         array insert at bottom FindUsedImageNumber()
         array insert at bottom FindUsedImageName$()
         FindUsedImageName$(FindUsedImageCount)=Texture$
         FindUsedImageNumber(FindUsedImageCount)=Find_Free_Image()
         load image FindUsedImageName$(FindUsedImageCount),FindUsedImageNumber(FindUsedImageCount)
         Image=FindUsedImageNumber(FindUsedImageCount)
         inc FindUsedImageCount
      endif
   endif
endfunction Image


`--------------
` Get Key/Val
`--------------
function String_KeyValue(S$)
   r=0
   for s=0 to len(S$)
      if mid$(S$,s)="=" then r=1
   next s
endfunction r
function Get_String_Key(S$)
   mid=0
   repeat
      mid=mid+1
   until mid$(S$,mid)="=" or mid$(S$,mid)=";" or mid$(S$,mid)=""
   St$=left$(S$,mid-1)
   if mid$(St$,len(St$))=";" then St$=left$(St$,len(St$)-1)
endfunction St$
function Get_String_Value(S$)
   mid=0
   repeat
      mid=mid+1
   until mid$(S$,mid)="=" or mid$(S$,mid)=";" or mid$(S$,mid)=""
   St$=Right$(S$,(len(S$)-1)-(mid-1))
   if mid$(St$,len(St$))=";" then St$=left$(St$,len(St$)-1)
endfunction St$
function Get_String_InValue(S$,i)
   v=0
   for t=0 to i
      a$=""
      repeat
         a$=a$+mid$(S$,v):v=v+1
      until mid$(S$,v)="," or mid$(S$,v)=";" or mid$(S$,v)=""
      v=v+1
   next t
   r#=val(a$)
endfunction r#

`--------------
` Get view project frustum
` sampled from "lost in thought" frustum culling code
`--------------
function FrustumCull_GetViewProject(camera)
   set current camera camera
   view matrix4 3
   projection matrix4 4
   multiply matrix4 5,3,4
   for i=0 to 15
      ViewProject#(i)=Get Matrix4 Element(5,i)
   next i
   ViewProjectFrustum#(0,0)=ViewProject#(3)-ViewProject#( 0)
   ViewProjectFrustum#(0,1)=ViewProject#(7)-ViewProject#( 4)
   ViewProjectFrustum#(0,2)=ViewProject#(11)-ViewProject#( 8)
   ViewProjectFrustum#(0,3)=ViewProject#(15)-ViewProject#(12)
   set vector3 2,ViewProjectFrustum#(0,0),ViewProjectFrustum#(0,1),ViewProjectFrustum#(0,2)
   Length#=1/length vector3(2)
   ViewProjectFrustum#(0,0)=ViewProjectFrustum#(0,0)*Length#
   ViewProjectFrustum#(0,1)=ViewProjectFrustum#(0,1)*Length#
   ViewProjectFrustum#(0,2)=ViewProjectFrustum#(0,2)*Length#
   ViewProjectFrustum#(0,3)=ViewProjectFrustum#(0,3)*Length#
   ViewProjectFrustum#(1,0)=ViewProject#(3)+ViewProject#(0)
   ViewProjectFrustum#(1,1)=ViewProject#(7)+ViewProject#(4)
   ViewProjectFrustum#(1,2)=ViewProject#(11)+ViewProject#(8)
   ViewProjectFrustum#(1,3)=ViewProject#(15)+ViewProject#(12)
   ViewProjectFrustum#(1,0)=ViewProjectFrustum#(1,0)*Length#
   ViewProjectFrustum#(1,1)=ViewProjectFrustum#(1,1)*Length#
   ViewProjectFrustum#(1,2)=ViewProjectFrustum#(1,2)*Length#
   ViewProjectFrustum#(1,3)=ViewProjectFrustum#(1,3)*Length#
   ViewProjectFrustum#(2,0)=ViewProject#(3)+ViewProject#(1)
   ViewProjectFrustum#(2,1)=ViewProject#(7)+ViewProject#(5)
   ViewProjectFrustum#(2,2)=ViewProject#(11)+ViewProject#(9)
   ViewProjectFrustum#(2,3)=ViewProject#(15)+ViewProject#(13)
   set vector3 2,ViewProjectFrustum#(2,0),ViewProjectFrustum#(2,1),ViewProjectFrustum#(2,2)
   Length#=1/length vector3(2)
   ViewProjectFrustum#(2,0)=ViewProjectFrustum#(2,0)*Length#
   ViewProjectFrustum#(2,1)=ViewProjectFrustum#(2,1)*Length#
   ViewProjectFrustum#(2,2)=ViewProjectFrustum#(2,2)*Length#
   ViewProjectFrustum#(2,3)=ViewProjectFrustum#(2,3)*Length#
   ViewProjectFrustum#(3,0)=ViewProject#(3)-ViewProject#(1)
   ViewProjectFrustum#(3,1)=ViewProject#(7)-ViewProject#(5)
   ViewProjectFrustum#(3,2)=ViewProject#(11)-ViewProject#(9)
   ViewProjectFrustum#(3,3)=ViewProject#(15)-ViewProject#(13)
   ViewProjectFrustum#(3,0)=ViewProjectFrustum#(3,0)*Length#
   ViewProjectFrustum#(3,1)=ViewProjectFrustum#(3,1)*Length#
   ViewProjectFrustum#(3,2)=ViewProjectFrustum#(3,2)*Length#
   ViewProjectFrustum#(3,3)=ViewProjectFrustum#(3,3)*Length#
   ViewProjectFrustum#(4,0)=ViewProject#(3)-ViewProject#(2)
   ViewProjectFrustum#(4,1)=ViewProject#(7)-ViewProject#(6)
   ViewProjectFrustum#(4,2)=ViewProject#(11)-ViewProject#(10)
   ViewProjectFrustum#(4,3)=ViewProject#(15)-ViewProject#(14)
   set vector3 2,ViewProjectFrustum#(4,0),ViewProjectFrustum#(4,1),ViewProjectFrustum#(4,2)
   Length#=1/length vector3(2)
   ViewProjectFrustum#(4,0)=ViewProjectFrustum#(4,0)*Length#
   ViewProjectFrustum#(4,1)=ViewProjectFrustum#(4,1)*Length#
   ViewProjectFrustum#(4,2)=ViewProjectFrustum#(4,2)*Length#
   ViewProjectFrustum#(4,3)=ViewProjectFrustum#(4,3)*Length#
   ViewProjectFrustum#(5,0)=ViewProject#(3)+ViewProject#( 2)
   ViewProjectFrustum#(5,1)=ViewProject#(7)+ViewProject#( 6)
   ViewProjectFrustum#(5,2)=ViewProject#(11)+ViewProject#(10)
   ViewProjectFrustum#(5,3)=ViewProject#(15)+ViewProject#(14)
   set vector3 2,ViewProjectFrustum#(5,0),ViewProjectFrustum#(5,1),ViewProjectFrustum#(5,2)
   Length#=1/length vector3(2)
   ViewProjectFrustum#(5,0)=ViewProjectFrustum#(5,0)*Length#
   ViewProjectFrustum#(5,1)=ViewProjectFrustum#(5,1)*Length#
   ViewProjectFrustum#(5,2)=ViewProjectFrustum#(5,2)*Length#
   ViewProjectFrustum#(5,3)=ViewProjectFrustum#(5,3)*Length#
endfunction

`--------------
` Sphere Frustum Cull
`--------------
function FrustumCull_Sphere(PosX#,PosY#,PosZ#,Radius#)
   for e=0 to 5
      if (ViewProjectFrustum#(e,0)*PosX#)+(ViewProjectFrustum#(e,1)*PosY#)+(ViewProjectFrustum#(e,2)*PosZ#)+ViewProjectFrustum#(e,3)<=0-Radius# then exitfunction 0
   next e
endfunction 1

`--------------
` Box Frustum Cull
`--------------
function FrustumCull_Box(PosX#,PosY#,PosZ#,SizeX#,SizeY#,SizeZ#)
   for e=0 to 5
      MinX#=ViewProjectFrustum#(e,0)*(PosX#-SizeX#)
      MaxX#=ViewProjectFrustum#(e,0)*(PosX#+SizeX#)
      minY#=ViewProjectFrustum#(e,1)*(PosY#-SizeY#)
      MaxY#=ViewProjectFrustum#(e,1)*(PosY#+SizeY#)
      MinZ#=ViewProjectFrustum#(e,2)*(PosZ#-SizeZ#)
      MaxZ#=ViewProjectFrustum#(e,2)*(PosZ#+SizeZ#)
      Cull=0
         if MinX#+MinY#+MinZ#+ViewProjectFrustum#(e,3)>0 then Cull=1
      if Cull=0
         if MaxX#+MinY#+MinZ#+ViewProjectFrustum#(e,3)>0 then Cull=1
      endif
      if Cull=0
         if MinX#+MaxY#+MinZ#+ViewProjectFrustum#(e,3)>0 then Cull=1
      endif
      if Cull=0
         if MaxX#+MaxY#+MinZ#+ViewProjectFrustum#(e,3)>0 then Cull=1
      endif
      if Cull=0
         if MinX#+MinY#+MaxZ#+ViewProjectFrustum#(e,3)>0 then Cull=1
      endif
      if Cull=0
         if MaxX#+MinY#+MaxZ#+ViewProjectFrustum#(e,3)>0 then Cull=1
      endif
      if Cull=0
         if MinX#+MaxY#+MaxZ#+ViewProjectFrustum#(e,3)>0 then Cull=1
      endif
      if Cull=0
         if MaxX#+MaxY#+MaxZ#+ViewProjectFrustum#(e,3)>0 then Cull=1
      endif
      if Cull=0
         exitfunction 0
      endif
   next e
endfunction 1

`--------------
` Collision box
`--------------
function BoxCollision(X#,Y#,Z#,pX#,pY#,pZ#,Sx#,Sy#,Sz#)
   col=0
   if X#<(pX#+(Sx#/2)) and X#>(pX#-(Sx#/2))
      if Y#<(pY#+(Sy#/2)) and Y#>(pY#-(Sy#/2))
         if Z#<(pZ#+(Sz#/2)) and Z#>(pZ#-(Sz#/2))
            col=1
         endif
      endif
   endif
Endfunction col

`====================================================
` Advanced Lighting Functions
`====================================================

`Light data for point and spot lights
type LightData
   LightInUse
   LightObject
   LightEffect
   LightTexture
   LightVisible
   LightSpecular
   LightShadow
   LightShadowOffset#
   LightShadowBias#
   LightDepthMap
   LightPosX#
   LightPosY#
   LightPosZ#
   LightAngX#
   LightAngY#
   LightAngZ#
   LightRoll#
   LightFOV#
   LightColR#
   LightColG#
   LightColB#
   LightRange#
endtype

`Point depth map data
type PointDepthMapData
   PLightNumber
   PLightUpdate
   PLightPosX#
   PLightPosY#
   PLightPosZ#
   PLightRange#
endtype

`Spot depth map data
type SpotDepthMapData
   SLightNumber
   SLightUpdate
   SLightPosX#
   SLightPosY#
   SLightPosZ#
   SLightAngX#
   SLightAngY#
   SLightAngZ#
   SLightFOV
   SLightRange#
endtype

`Object data
type ObjectData
   ObjNumber
   ObjSizeX#
   ObjSizeY#
   ObjSizeZ#
   ObjOldPosX#
   ObjOldPosY#
   ObjOldPosZ#
   ObjOldAngX
   ObjOldAngY
   ObjOldAngZ
   ObjOldScaleX#
   ObjOldScaleY#
   ObjOldScaleZ#
   ObjMask
   ObjFrame
   ObjAdvancedLighting
   ObjShadows
   ObjRefract
   ObjReflect
   ObjScattering
   ObjReMasked
endtype

`Object data
type EffectData
   EffNumber
   EffObject
endtype

`Area Fog Data
type FogAreaData
   FogInUse
   FogObject
   FogEffect
   FogVisible
   FogBackObject
   FogBackEffect
   FogFrontObject
   FogColR#
   FogColG#
   FogColB#
   FogIntencity#
   FogRange#
   FogPower#
   FogZThickness#
   FogPosX#
   FogPosY#
   FogPosZ#
   FogScaleX#
   FogScaleY#
   FogDepth#
   FogDirX#
   FogDirY#
   FogDirZ#
   FogZThickness#
endtype

`--------------
` SetUp Advanced Lighting
`--------------
function AdvancedLighting_SetUp(Sw,Sh,DirShadowSize,ShadowSize,ShadowCount)
if AdvancedLightingEnabled=0

   `Vectors.
      Null=make vector4(1)
      Null=make vector3(2)
      Null=make matrix4(3)
      Null=make matrix4(4)
      Null=make matrix4(5)
      Null=make matrix4(6)
      Null=make matrix4(7)
      Null=make vector3(8)
      Null=make vector3(9)
      Null=make vector3(10)

   `Variables.
      global AdvancedLightingEnabled=1
      global OutputCamera=0
      global FrameCamera=0
      global ImgScreenSizeX=Sw
      global ImgScreenSizeY=Sh
      global DepthMapCount=ShadowCount
      global DirectionalUpdateFast=0
      global DirectionalUpdate=0
      global DirectionalMultiplier#=1000.0
      global WorldSize#=1.0
      global MaxPointShadowUpdate=2
      global PointShadowUpdate=1
      global MaxSpotShadowUpdate=2
      global SpotShadowUpdate=1
      global ShadowOffsets#=1.5
      global ShadowDistort#=0.75
      global ShadowBias#=0.02
      global WireFrameMode=0
      global FogAreaCount=0
      backdrop on OutputCamera

   `Arrays.
      global dim AdvancedLightingCamera(ShadowCount+7)
      global dim AdvancedLightingImage(ShadowCount+7)
      global dim CameraData#(4)
      global dim CameraPos#(3)
      global dim CameraAng#(3)
      global dim ViewProjectFrustum#(5,3)
      global dim ViewProject#(15)
      global dim Effect(1) as EffectData
      global dim Object(1) as ObjectData
      global dim DynamicObjNum(1)
      global dim ObjectSize#(3)
      global dim PointLight(1) as LightData
      global dim PointLightVis(1)
      global dim SpotLight(1) as LightData
      global dim SpotLightVis(1)
      global dim DirectionalLight(2) as LightData
      global dim PointDepthMap(DepthMapCount) as PointDepthMapData
      global dim SpotDepthMap(DepthMapCount) as SpotDepthMapData
      global dim Ambient#(4)
      global dim Fog#(5)
      global dim FogArea(1) as FogAreaData

   `Surface Techniques
      global dim EffectTechniques$(10)
      EffectTechniques$(0)="Diffuse"
      EffectTechniques$(1)="Lighting"
      EffectTechniques$(2)="WorldPosition"
      EffectTechniques$(3)="WorldNormals"
      EffectTechniques$(4)="WorldVelocity"
      EffectTechniques$(5)="PointDepthMap"
      EffectTechniques$(6)="SpotDepthMap"
      EffectTechniques$(7)="DirRDepthMap"
      EffectTechniques$(8)="DirGDepthMap"
      EffectTechniques$(9)="DirBDepthMap"

   `Light Techniques
      global dim LightTechniques$(9)
      LightTechniques$(0)="Light"
      LightTechniques$(1)="LightShadowMap_1"
      LightTechniques$(2)="LightShadowMap_2"
      LightTechniques$(3)="LightShadowMap_3"
      LightTechniques$(4)="LightShadowMap_4"
      LightTechniques$(5)="LightSpecular"
      LightTechniques$(6)="LightSpecularShadowMap_1"
      LightTechniques$(7)="LightSpecularShadowMap_2"
      LightTechniques$(8)="LightSpecularShadowMap_3"
      LightTechniques$(9)="LightSpecularShadowMap_4"

   `Jitter Map
      JitterAmount=64
      AdvancedLightingImage(0)=Find_Free_Image()
      make memblock 1,12+(32*32*4)
      write memblock dword 1,0,32
      write memblock dword 1,4,32
      write memblock dword 1,8,32
      for x=0 to 31
         for z=0 to 31
            Pos=12+(z*(32*4))+(x*4)
            write memblock byte 1,Pos+2,rnd(JitterAmount)
            write memblock byte 1,Pos+1,rnd(JitterAmount)
            write memblock byte 1,Pos+0,rnd(JitterAmount)
            write memblock byte 1,Pos+3,rnd(JitterAmount)
         next z
      next x
      make image from memblock AdvancedLightingImage(0),1
      delete memblock 1

   `World Position Render
      AdvancedLightingCamera(1)=Find_Free_Camera()
      AdvancedLightingImage(1)=Find_Free_Image()
      make camera AdvancedLightingCamera(1)
      set camera to image AdvancedLightingCamera(1),AdvancedLightingImage(1),ImgScreenSizeX,ImgScreenSizeY,3,113
      backdrop on AdvancedLightingCamera(1)
      color backdrop AdvancedLightingCamera(1),0

   `World Normals Render
      AdvancedLightingCamera(2)=Find_Free_Camera()
      AdvancedLightingImage(2)=Find_Free_Image()
      make camera AdvancedLightingCamera(2)
      set camera to image AdvancedLightingCamera(2),AdvancedLightingImage(2),ImgScreenSizeX,ImgScreenSizeY
      backdrop on AdvancedLightingCamera(2)
      color backdrop AdvancedLightingCamera(2),0

   `Velocity and Specular Render
      AdvancedLightingCamera(3)=Find_Free_Camera()
      AdvancedLightingImage(3)=Find_Free_Image()
      make camera AdvancedLightingCamera(3)
      set camera to image AdvancedLightingCamera(3),AdvancedLightingImage(3),ImgScreenSizeX/2,ImgScreenSizeY/2,3,113
      backdrop on AdvancedLightingCamera(3)
      color backdrop AdvancedLightingCamera(3),0

   `World Lighting Render
      AdvancedLightingCamera(4)=Find_Free_Camera()
      AdvancedLightingImage(4)=Find_Free_Image()
      make camera AdvancedLightingCamera(4)
      set camera to image AdvancedLightingCamera(4),AdvancedLightingImage(4),ImgScreenSizeX,ImgScreenSizeY
      color backdrop AdvancedLightingCamera(4),0

   `Temp Camera (for cube maps)
      AdvancedLightingCamera(5)=Find_Free_Camera()
      AdvancedLightingImage(5)=Find_Free_Image()
      make camera AdvancedLightingCamera(5)
      set camera to image AdvancedLightingCamera(5),AdvancedLightingImage(5),ShadowSize,ShadowSize
      color backdrop AdvancedLightingCamera(5),rgb(255,255,255)
      set camera aspect AdvancedLightingCamera(5),1

   `Directional light Shadow Map
      AdvancedLightingCamera(6)=Find_Free_Camera()
      AdvancedLightingImage(6)=Find_Free_Image()
      make camera AdvancedLightingCamera(6)
      set camera to image AdvancedLightingCamera(6),AdvancedLightingImage(6),DirShadowSize,DirShadowSize
      backdrop off AdvancedLightingCamera(6)
      set camera aspect AdvancedLightingCamera(6),1
      set camera fov AdvancedLightingCamera(6),5

   `Cubic Shadow Maps (Point Lights)
      for d=1 to DepthMapCount
         Make Dynamic Cube Map d,ShadowSize
      next d

   `2D Shadow Maps (Spot Lights)
      for s=1 to DepthMapCount
         AdvancedLightingCamera(s+6)=Find_Free_Camera()
         AdvancedLightingImage(s+6)=Find_Free_Image()
         make camera AdvancedLightingCamera(s+6)
         set camera to image AdvancedLightingCamera(s+6),AdvancedLightingImage(s+6),ShadowSize,ShadowSize
         backdrop on AdvancedLightingCamera(s+6)
         color backdrop AdvancedLightingCamera(s+6),rgb(255,255,255)
         set camera aspect AdvancedLightingCamera(s+6),1
      next s

   `Set to defaults
      Global_Set_Camera(1,2000,63,(screen width()/screen height())*1.18)
      Global_Set_Ambient(64,64,64,1.0)
      Global_Set_Fog(128,128,128,2000,1.0)

endif
endfunction

`--------------
` Update Advanced Lighting
`--------------
function AdvancedLighting_Update()
if AdvancedLightingEnabled=1

   `Camera Position.
      CameraPos#(1)=camera position x(OutputCamera)
      CameraPos#(2)=camera position y(OutputCamera)
      CameraPos#(3)=camera position z(OutputCamera)
      CameraAng#(1)=camera angle x(OutputCamera)
      CameraAng#(2)=camera angle y(OutputCamera)
      CameraAng#(3)=camera angle z(OutputCamera)

   `Frustum Cull
      FrustumCull_GetViewProject(OutputCamera)

   `Terrain Update
      LODTerrain_Update()

   `Sky Box Update
      SkyBox_Update()

   `Sky Update
      Sky_Update()

   `Clouds Update
      Clouds_UpDate()

      if WireFrameMode=0
      `World position Render.
         position camera AdvancedLightingCamera(1),CameraPos#(1),CameraPos#(2),CameraPos#(3)
         rotate camera AdvancedLightingCamera(1),CameraAng#(1),CameraAng#(2),CameraAng#(3)
         set current camera AdvancedLightingCamera(1)
         view matrix4 3:projection matrix4 4:multiply matrix4 5,3,4
         for e=1 to array count(Effect())-1
            set effect constant matrix Effect(e).EffNumber,"ProjMatrix",5
            set effect technique Effect(e).EffNumber,EffectTechniques$(2)
         next e
         set current camera AdvancedLightingCamera(1)
         sync mask 2^AdvancedLightingCamera(1)
         fastsync

      `World normal Render.
         position camera AdvancedLightingCamera(2),CameraPos#(1),CameraPos#(2),CameraPos#(3)
         rotate camera AdvancedLightingCamera(2),CameraAng#(1),CameraAng#(2),CameraAng#(3)
         for e=1 to array count(Effect())-1
            set effect technique Effect(e).EffNumber,EffectTechniques$(3)
         next e
         sync mask 2^AdvancedLightingCamera(2)
         fastsync

      `World Velocity.
         position camera AdvancedLightingCamera(3),CameraPos#(1),CameraPos#(2),CameraPos#(3)
         rotate camera AdvancedLightingCamera(3),CameraAng#(1),CameraAng#(2),CameraAng#(3)
         for e=1 to array count(Effect())-1
            set effect technique Effect(e).EffNumber,EffectTechniques$(4)
         next e
         sync mask 2^AdvancedLightingCamera(3)
         fastsync
         view matrix4 3:projection matrix4 4:multiply matrix4 7,3,4
         for e=1 to array count(Effect())-1
            set effect constant matrix Effect(e).EffNumber,"PreviousVP",7
            if Effect(e).EffObject>0 then Effect_SetPreviousWorld(Effect(e).EffNumber,Effect(e).EffObject)
         next e

      `Use shadow mapping on the closest point lights.
         FarDist#=0:DepthMap=0
         for d=1 to DepthMapCount
            LX#=PointLight(PointDepthMap(d).PLightNumber).LightPosX#
            LY#=PointLight(PointDepthMap(d).PLightNumber).LightPosY#
            LZ#=PointLight(PointDepthMap(d).PLightNumber).LightPosZ#
            set vector3 2,CameraPos#(1)-LX#,CameraPos#(2)-LY#,CameraPos#(3)-LZ#
            if length vector3(2)>FarDist# then FarDist#=length vector3(2):DepthMap=d
            if PointDepthMap(d).PLightNumber=0 then FarDist#=99999999999:DepthMap=d
         next d
         for l=1 to array count(PointLightVis())-1
            if FrustumCull_Sphere(PointLight(PointLightVis(l)).LightPosX#,PointLight(PointLightVis(l)).LightPosY#,PointLight(PointLightVis(l)).LightPosZ#,PointLight(PointLightVis(l)).LightRange#)=1
               show object PointLight(PointLightVis(l)).LightObject
            else
               hide object PointLight(PointLightVis(l)).LightObject
            endif
            if PointLight(PointLightVis(l)).LightShadow>0 and PointLight(PointLightVis(l)).LightVisible=1
               LX#=PointLight(PointLightVis(l)).LightPosX#
               LY#=PointLight(PointLightVis(l)).LightPosY#
               LZ#=PointLight(PointLightVis(l)).LightPosZ#
               set vector3 2,CameraPos#(1)-LX#,CameraPos#(2)-LY#,CameraPos#(3)-LZ#
               if length vector3(2)<FarDist# and PointLight(PointLightVis(l)).LightDepthMap=0
                  if PointDepthMap(DepthMap).PLightNumber>0
                     if PointLight(PointDepthMap(DepthMap).PLightNumber).LightSpecular<>0
                        set effect technique PointLight(PointDepthMap(DepthMap).PLightNumber).LightEffect,LightTechniques$(5)
                     else
                        set effect technique PointLight(PointDepthMap(DepthMap).PLightNumber).LightEffect,LightTechniques$(0)
                     endif
                     PointLight(PointDepthMap(DepthMap).PLightNumber).LightDepthMap=0
                  endif
                  if PointLight(PointLightVis(l)).LightSpecular<>0
                     set effect technique PointLight(PointLightVis(l)).LightEffect,LightTechniques$(PointLight(PointLightVis(l)).LightShadow+5)
                  else
                     set effect technique PointLight(PointLightVis(l)).LightEffect,LightTechniques$(PointLight(PointLightVis(l)).LightShadow)
                  endif
                  PointLight(PointLightVis(l)).LightDepthMap=DepthMap
                  PointDepthMap(DepthMap).PLightNumber=PointLightVis(l)
                  Apply Cube Map To Object PointLight(PointLightVis(l)).LightObject,3,DepthMap,1
                  exit
               endif
            endif
         next l

      `Use shadow mapping on the closest spot lights.
         FarDist#=0:DepthMap=0
         for d=1 to DepthMapCount
            LX#=SpotLight(SpotDepthMap(d).SLightNumber).LightPosX#
            LY#=SpotLight(SpotDepthMap(d).SLightNumber).LightPosY#
            LZ#=SpotLight(SpotDepthMap(d).SLightNumber).LightPosZ#
            set vector3 2,CameraPos#(1)-LX#,CameraPos#(1)-LY#,CameraPos#(1)-LZ#
            if length vector3(2)>FarDist# then FarDist#=length vector3(2):DepthMap=d
            if SpotDepthMap(d).SLightNumber=0 then FarDist#=99999999999:DepthMap=d
         next d
         for l=1 to array count(SpotLightVis())-1
            if FrustumCull_Sphere(SpotLight(SpotLightVis(l)).LightPosX#,SpotLight(SpotLightVis(l)).LightPosY#,SpotLight(SpotLightVis(l)).LightPosZ#,SpotLight(SpotLightVis(l)).LightRange#)=1
               show object SpotLight(SpotLightVis(l)).LightObject
            else
               hide object SpotLight(SpotLightVis(l)).LightObject
            endif
           if SpotLight(SpotLightVis(l)).LightShadow>0 and SpotLight(SpotLightVis(l)).LightVisible=1
              LX#=SpotLight(SpotLightVis(l)).LightPosX#
              LY#=SpotLight(SpotLightVis(l)).LightPosY#
              LZ#=SpotLight(SpotLightVis(l)).LightPosZ#
              set vector3 2,CameraPos#(1)-LX#,CameraPos#(1)-LY#,CameraPos#(1)-LZ#
              if length vector3(2)<FarDist# and SpotLight(SpotLightVis(l)).LightDepthMap=0
                 if SpotDepthMap(DepthMap).SLightNumber>0
                    set effect technique SpotLight(SpotDepthMap(DepthMap).SLightNumber).LightEffect,LightTechniques$(0)
                    if SpotLight(SpotDepthMap(DepthMap).SLightNumber).LightSpecular<>0
                       set effect technique SpotLight(SpotDepthMap(DepthMap).SLightNumber).LightEffect,LightTechniques$(5)
                    else
                       set effect technique SpotLight(SpotDepthMap(DepthMap).SLightNumber).LightEffect,LightTechniques$(0)
                    endif
                    SpotLight(SpotDepthMap(DepthMap).SLightNumber).LightDepthMap=0
                 endif
                 if SpotLight(SpotLightVis(l)).LightSpecular<>0
                    set effect technique SpotLight(SpotLightVis(l)).LightEffect,LightTechniques$(SpotLight(SpotLightVis(l)).LightShadow+5)
                 else
                    set effect technique SpotLight(SpotLightVis(l)).LightEffect,LightTechniques$(SpotLight(SpotLightVis(l)).LightShadow)
                 endif
                 SpotLight(SpotLightVis(l)).LightDepthMap=DepthMap
                 SpotDepthMap(DepthMap).SLightNumber=SpotLightVis(l)
                 texture object SpotLight(SpotLightVis(l)).LightObject,3,AdvancedLightingImage(DepthMap+6)
                 exit
              endif
           endif
         next l

      `Update shadows from Dynamic objects moving etc.
         for o = 1 to array count(DynamicObjNum())-1
            if Object(DynamicObjNum(o)).ObjShadows=1
            change=0
               if Object(DynamicObjNum(o)).ObjOldPosX#<>int(object position x(Object(DynamicObjNum(o)).ObjNumber)/WorldSize#)*WorldSize# then change=1
               if Object(DynamicObjNum(o)).ObjOldPosY#<>int(object position Y(Object(DynamicObjNum(o)).ObjNumber)/WorldSize#)*WorldSize# then change=1
               if Object(DynamicObjNum(o)).ObjOldPosZ#<>int(object position Z(Object(DynamicObjNum(o)).ObjNumber)/WorldSize#)*WorldSize# then change=1
               if Object(DynamicObjNum(o)).ObjOldAngX<>int(object Angle x(Object(DynamicObjNum(o)).ObjNumber)) then change=2
               if Object(DynamicObjNum(o)).ObjOldAngY<>int(object Angle Y(Object(DynamicObjNum(o)).ObjNumber)) then change=2
               if Object(DynamicObjNum(o)).ObjOldAngZ<>int(object Angle Z(Object(DynamicObjNum(o)).ObjNumber)) then change=2
               if Object(DynamicObjNum(o)).ObjOldScaleX#<>int(object Size x(Object(DynamicObjNum(o)).ObjNumber,1)/WorldSize#)*WorldSize# then change=2
               if Object(DynamicObjNum(o)).ObjOldScaleY#<>int(object Size Y(Object(DynamicObjNum(o)).ObjNumber,1)/WorldSize#)*WorldSize# then change=2
               if Object(DynamicObjNum(o)).ObjOldScaleZ#<>int(object Size Z(Object(DynamicObjNum(o)).ObjNumber,1)/WorldSize#)*WorldSize# then change=2
            if change>0
               if change=2
                  Object_Size(Object(DynamicObjNum(o)).ObjNumber)
                  Object(DynamicObjNum(o)).ObjSizeX#=ObjectSize#(1)
                  Object(DynamicObjNum(o)).ObjSizeY#=ObjectSize#(2)
                  Object(DynamicObjNum(o)).ObjSizeZ#=ObjectSize#(3)
               endif
               Nx#=Object position x(Object(DynamicObjNum(o)).ObjNumber):Ox#=Object(DynamicObjNum(o)).ObjOldPosX#
               Ny#=Object position y(Object(DynamicObjNum(o)).ObjNumber):Oy#=Object(DynamicObjNum(o)).ObjOldPosY#
               Nz#=Object position z(Object(DynamicObjNum(o)).ObjNumber):Oz#=Object(DynamicObjNum(o)).ObjOldPosZ#
               for d = 1 to DepthMapCount
                  if PointDepthMap(d).PLightNumber>0
                     Lx#=PointLight(PointDepthMap(d).PLightNumber).LightPosX#
                     Ly#=PointLight(PointDepthMap(d).PLightNumber).LightPosY#
                     Lz#=PointLight(PointDepthMap(d).PLightNumber).LightPosZ#
                     Sx#=Object(DynamicObjNum(o)).ObjSizeX#+(PointLight(PointDepthMap(d).PLightNumber).LightRange#*2)
                     Sy#=Object(DynamicObjNum(o)).ObjSizeY#+(PointLight(PointDepthMap(d).PLightNumber).LightRange#*2)
                     Sz#=Object(DynamicObjNum(o)).ObjSizeZ#+(PointLight(PointDepthMap(d).PLightNumber).LightRange#*2)
                     col=0
                     if BoxCollision(Nx#,Ny#,Nz#,Lx#,Ly#,Lz#,Sx#,Sy#,Sz#)=1 then col=1
                     if BoxCollision(Ox#,Oy#,Oz#,Lx#,Ly#,Lz#,Sx#,Sy#,Sz#)=1 then col=1
                     if col=1 then PointDepthMap(d).PLightUpdate=1
                  endif
                  if SpotDepthMap(d).SLightNumber>0
                     move object SpotLight(SpotDepthMap(d).SLightNumber).LightObject,SpotLight(SpotDepthMap(d).SLightNumber).LightRange#/2
                     Lx#=object position x(SpotLight(SpotDepthMap(d).SLightNumber).LightObject)
                     Ly#=object position y(SpotLight(SpotDepthMap(d).SLightNumber).LightObject)
                     Lz#=object position z(SpotLight(SpotDepthMap(d).SLightNumber).LightObject)
                     move object  SpotLight(SpotDepthMap(d).SLightNumber).LightObject,-SpotLight(SpotDepthMap(d).SLightNumber).LightRange#/2
                     Sx#=Object(DynamicObjNum(o)).ObjSizeX#+(SpotLight(SpotDepthMap(d).SLightNumber).LightRange#*1.25)
                     Sy#=Object(DynamicObjNum(o)).ObjSizeY#+(SpotLight(SpotDepthMap(d).SLightNumber).LightRange#*1.25)
                     Sz#=Object(DynamicObjNum(o)).ObjSizeZ#+(SpotLight(SpotDepthMap(d).SLightNumber).LightRange#*1.25)
                     col=0
                     if BoxCollision(Nx#,Ny#,Nz#,Lx#,Ly#,Lz#,Sx#,Sy#,Sz#)=1 then col=1
                     if BoxCollision(Ox#,Oy#,Oz#,Lx#,Ly#,Lz#,Sx#,Sy#,Sz#)=1 then col=1
                     if col=1 then SpotDepthMap(d).SLightUpdate=1
                  endif
               next d
            Object(DynamicObjNum(o)).ObjOldPosX#=int(object position x(Object(DynamicObjNum(o)).ObjNumber)/WorldSize#)*WorldSize#
            Object(DynamicObjNum(o)).ObjOldPosY#=int(object position Y(Object(DynamicObjNum(o)).ObjNumber)/WorldSize#)*WorldSize#
            Object(DynamicObjNum(o)).ObjOldPosZ#=int(object position Z(Object(DynamicObjNum(o)).ObjNumber)/WorldSize#)*WorldSize#
            Object(DynamicObjNum(o)).ObjOldAngX=int(object Angle x(Object(DynamicObjNum(o)).ObjNumber))
            Object(DynamicObjNum(o)).ObjOldAngY=int(object Angle Y(Object(DynamicObjNum(o)).ObjNumber))
            Object(DynamicObjNum(o)).ObjOldAngZ=int(object Angle Z(Object(DynamicObjNum(o)).ObjNumber))
            Object(DynamicObjNum(o)).ObjOldScaleX#=int(object Size x(Object(DynamicObjNum(o)).ObjNumber,1)/WorldSize#)*WorldSize#
            Object(DynamicObjNum(o)).ObjOldScaleY#=int(object Size Y(Object(DynamicObjNum(o)).ObjNumber,1)/WorldSize#)*WorldSize#
            Object(DynamicObjNum(o)).ObjOldScaleZ#=int(object Size Z(Object(DynamicObjNum(o)).ObjNumber,1)/WorldSize#)*WorldSize#
            endif
            endif
         next o

      `Render Cubic Shadow Maps.
         DepthNum=0:DepthMapUpdated=0
         repeat
            if PointShadowUpdate>DepthMapCount then PointShadowUpdate=1
            if PointDepthMap(PointShadowUpdate).PLightNumber>0
                change=0
                if PointDepthMap(PointShadowUpdate).PLightPosX#<>int(PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosX#/WorldSize#)*WorldSize# then change=1
                if PointDepthMap(PointShadowUpdate).PLightPosY#<>int(PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosY#/WorldSize#)*WorldSize# then change=1
                if PointDepthMap(PointShadowUpdate).PLightPosZ#<>int(PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosZ#/WorldSize#)*WorldSize# then change=1
                if PointDepthMap(PointShadowUpdate).PLightRange#<>int(PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightRange#/WorldSize#)*WorldSize# then change=1
                if change=1
                   PointDepthMap(PointShadowUpdate).PLightUpdate=1
                   PointDepthMap(PointShadowUpdate).PLightPosX#=int(PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosX#/WorldSize#)*WorldSize#
                   PointDepthMap(PointShadowUpdate).PLightPosY#=int(PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosY#/WorldSize#)*WorldSize#
                   PointDepthMap(PointShadowUpdate).PLightPosZ#=int(PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosZ#/WorldSize#)*WorldSize#
                   PointDepthMap(PointShadowUpdate).PLightRange#=int(PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightRange#/WorldSize#)*WorldSize#
                endif
                if PointDepthMap(PointShadowUpdate).PLightUpdate=1
                   Lx#=PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosX#
                   Ly#=PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosY#
                   Lz#=PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosZ#
                   if FrustumCull_Sphere(Lx#,Ly#,Lz#,PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightRange#)=1
                     for e=1 to array count(Effect())-1
                        set effect technique Effect(e).EffNumber,EffectTechniques$(5)
                        set vector4 1,PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosX#,PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosY#,PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosZ#,0
                        set effect constant vector Effect(e).EffNumber,"LightPosition",1
                        set effect constant float Effect(e).EffNumber,"LightRange",PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightRange#
                        set effect constant float Effect(e).EffNumber,"ShadowBias",PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightShadowBias#
                     next e
                     set camera range AdvancedLightingCamera(5),1,PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightRange#
                     for o = 1 to array count(DynamicObjNum())-1
                        if Object(DynamicObjNum(o)).ObjShadows=1
                           Nx#=Object position x(Object(DynamicObjNum(o)).ObjNumber)
                           Ny#=Object position y(Object(DynamicObjNum(o)).ObjNumber)
                           Nz#=Object position z(Object(DynamicObjNum(o)).ObjNumber)
                           Sx#=Object(DynamicObjNum(o)).ObjSizeX#+(PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightRange#*2)
                           Sy#=Object(DynamicObjNum(o)).ObjSizeY#+(PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightRange#*2)
                           Sz#=Object(DynamicObjNum(o)).ObjSizeZ#+(PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightRange#*2)
                           if BoxCollision(Nx#,Ny#,Nz#,Lx#,Ly#,Lz#,Sx#,Sy#,Sz#)=0
                              set object mask Object(DynamicObjNum(o)).ObjNumber,Object(DynamicObjNum(o)).ObjMask-(2^AdvancedLightingCamera(5))
                              Object(DynamicObjNum(o)).ObjReMasked=1
                           endif
                        endif
                     next o
                     Render Dynamic Cube Map PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightDepthMap,AdvancedLightingCamera(5),PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosX#,PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosY#,PointLight(PointDepthMap(PointShadowUpdate).PLightNumber).LightPosZ#
                     for o = 1 to array count(DynamicObjNum())-1
                        if Object(DynamicObjNum(o)).ObjReMasked=1
                           set object mask Object(DynamicObjNum(o)).ObjNumber,Object(o).ObjMask
                           Object(DynamicObjNum(o)).ObjReMasked=0
                        endif
                     next o
                     PointDepthMap(PointShadowUpdate).PLightUpdate=0
                     inc DepthMapUpdated
                   endif
                endif
            endif
            inc PointShadowUpdate
            inc DepthNum
         until DepthNum=DepthMapCount or DepthMapUpdated=MaxPointShadowUpdate

      `Render Projective Shadow Maps.
         DepthNum=0:DepthMapUpdated=0
         repeat
            if SpotShadowUpdate>DepthMapCount then SpotShadowUpdate=1
            if SpotDepthMap(SpotShadowUpdate).SLightNumber>0
               change=0
               if SpotDepthMap(SpotShadowUpdate).SLightPosX#<>int(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightPosX#/WorldSize#)*WorldSize# then change=1
               if SpotDepthMap(SpotShadowUpdate).SLightPosY#<>int(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightPosY#/WorldSize#)*WorldSize# then change=1
               if SpotDepthMap(SpotShadowUpdate).SLightPosZ#<>int(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightPosZ#/WorldSize#)*WorldSize# then change=1
               if SpotDepthMap(SpotShadowUpdate).SLightAngX#<>SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightAngX# then change=1
               if SpotDepthMap(SpotShadowUpdate).SLightAngY#<>SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightAngY# then change=1
               if SpotDepthMap(SpotShadowUpdate).SLightAngZ#<>SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightAngZ# then change=1
               if SpotDepthMap(SpotShadowUpdate).SLightFOV<>int(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightFOV#) then change=1
               if SpotDepthMap(SpotShadowUpdate).SLightRange#<>int(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightRange#/WorldSize#)*WorldSize# then change=1
               if change=1
                  SpotDepthMap(SpotShadowUpdate).SLightUpdate=1
                  SpotDepthMap(SpotShadowUpdate).SLightPosX#=int(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightPosX#/WorldSize#)*WorldSize#
                  SpotDepthMap(SpotShadowUpdate).SLightPosY#=int(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightPosY#/WorldSize#)*WorldSize#
                  SpotDepthMap(SpotShadowUpdate).SLightPosZ#=int(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightPosZ#/WorldSize#)*WorldSize#
                  SpotDepthMap(SpotShadowUpdate).SLightAngX#=SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightAngX#
                  SpotDepthMap(SpotShadowUpdate).SLightAngY#=SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightAngY#
                  SpotDepthMap(SpotShadowUpdate).SLightAngZ#=SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightAngZ#
                  SpotDepthMap(SpotShadowUpdate).SLightFOV=int(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightFOV#)
                  SpotDepthMap(SpotShadowUpdate).SLightRange#=int(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightRange#/WorldSize#)*WorldSize#
               endif
               if SpotDepthMap(SpotShadowUpdate).SLightUpdate=1
                  move object SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightObject,SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightRange#/2
                  Lx#=object position x(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightObject)
                  Ly#=object position y(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightObject)
                  Lz#=object position z(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightObject)
                  move object  SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightObject,-SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightRange#/2
                  if FrustumCull_Sphere(Lx#,Ly#,Lz#,SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightRange#)=1
                     for e=1 to array count(Effect())-1
                        set effect technique Effect(e).EffNumber,EffectTechniques$(6)
                        set vector4 1,SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightPosX#,SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightPosY#,SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightPosZ#,0
                        set effect constant vector Effect(e).EffNumber,"LightPosition",1
                        set effect constant float Effect(e).EffNumber,"LightRange",SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightRange#
                        set effect constant float Effect(e).EffNumber,"ShadowBias",SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightShadowBias#
                     next e
                     set camera range AdvancedLightingCamera(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightDepthMap+6),1,SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightRange#
                     set camera fov AdvancedLightingCamera(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightDepthMap+6),SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightFOV#
                     position camera AdvancedLightingCamera(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightDepthMap+6),SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightPosX#,SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightPosY#,SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightPosZ#
                     rotate camera AdvancedLightingCamera(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightDepthMap+6),SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightAngX#,SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightAngY#,SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightAngZ#
                     for o = 1 to array count(DynamicObjNum())-1
                        if Object(DynamicObjNum(o)).ObjShadows=1
                           Nx#=Object position x(Object(DynamicObjNum(o)).ObjNumber)
                           Ny#=Object position y(Object(DynamicObjNum(o)).ObjNumber)
                           Nz#=Object position z(Object(DynamicObjNum(o)).ObjNumber)
                           Sx#=Object(DynamicObjNum(o)).ObjSizeX#+(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightRange#*1.25)
                           Sy#=Object(DynamicObjNum(o)).ObjSizeY#+(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightRange#*1.25)
                           Sz#=Object(DynamicObjNum(o)).ObjSizeZ#+(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightRange#*1.25)
                           if BoxCollision(Nx#,Ny#,Nz#,Lx#,Ly#,Lz#,Sx#,Sy#,Sz#)=0
                              set object mask Object(DynamicObjNum(o)).ObjNumber,Object(DynamicObjNum(o)).ObjMask-(2^AdvancedLightingCamera(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightDepthMap+6))
                              Object(DynamicObjNum(o)).ObjReMasked=1
                           endif
                        endif
                     next o
                     sync mask 2^AdvancedLightingCamera(SpotLight(SpotDepthMap(SpotShadowUpdate).SLightNumber).LightDepthMap+6)
                     fastsync
                     for o = 1 to array count(DynamicObjNum())-1
                        if Object(DynamicObjNum(o)).ObjReMasked=1
                           set object mask Object(DynamicObjNum(o)).ObjNumber,Object(o).ObjMask
                           Object(DynamicObjNum(o)).ObjReMasked=0
                        endif
                     next o
                     SpotDepthMap(SpotShadowUpdate).SLightUpdate=0
                  endif
               endif
            endif
            inc SpotShadowUpdate
            inc DepthNum
         until DepthNum>DepthMapCount-1 or DepthMapUpdated>MaxSpotShadowUpdate-1

      `Update Directional Light+Render Shadow Map.
         if DirectionalLight(1).LightObject>0 and DirectionalLight(1).LightVisible=1
            set current camera AdvancedLightingCamera(6)
            position object DirectionalLight(1).LightObject,CameraPos#(1),CameraPos#(2),CameraPos#(3)
            set vector4 1,CameraPos#(1)-(DirectionalLight(1).LightAngX#*CameraData#(2)),CameraPos#(2)-(DirectionalLight(1).LightAngY#*CameraData#(2)),CameraPos#(3)-(DirectionalLight(1).LightAngZ#*CameraData#(2)),0
            set effect constant vector DirectionalLight(1).LightEffect,"LightPosition",1
            if CloudsEnabled=1
               set vector4 1,DirectionalLight(1).LightAngX#,DirectionalLight(1).LightAngY#,DirectionalLight(1).LightAngZ#,0
               set effect constant vector CloudsEffect,"LightDir",1
            endif
            set vector4 1,DirectionalLight(1).LightAngX#,DirectionalLight(1).LightAngY#,DirectionalLight(1).LightAngZ#,0
            set effect constant vector DirectionalLight(1).LightEffect,"LightDir",1
            if DirectionalLight(1).LightShadow>0
               for e=1 to array count(Effect())-1
                  set effect constant vector Effect(e).EffNumber,"LightPosition",1
               next e
               position camera AdvancedLightingCamera(6),0,0,0
               point camera AdvancedLightingCamera(6),DirectionalLight(1).LightAngX#,DirectionalLight(1).LightAngY#,DirectionalLight(1).LightAngZ#
               if DirectionalUpdateFast=1
               inc DirectionalUpdate
               if DirectionalUpdate=5 then DirectionalUpdate=1
                  if DirectionalUpdate=1 or DirectionalUpdate=3
                     DirectionalLight_UpDate(DirectionalLight(1).LightEffect,DirectionalLight(1).LightRange#,"ProjMatrix1","CamPos1","Split1","Radius1","ProjPosition1",EffectTechniques$(7))
                     sync mask 2^AdvancedLightingCamera(6)
                     fastsync
                  endif
                  if DirectionalUpdate=2
                     DirectionalLight_UpDate(DirectionalLight(1).LightEffect,DirectionalLight(1).LightRange#*3,"ProjMatrix2","CamPos2","Split2","Radius2","ProjPosition2",EffectTechniques$(8))
                     sync mask 2^AdvancedLightingCamera(6)
                     fastsync
                  endif
                  if DirectionalUpdate=4
                     DirectionalLight_UpDate(DirectionalLight(1).LightEffect,DirectionalLight(1).LightRange#*8,"ProjMatrix3","CamPos3","Split3","Radius3","ProjPosition3",EffectTechniques$(9))
                     sync mask 2^AdvancedLightingCamera(6)
                     fastsync
                  endif
               else
                  DirectionalLight_UpDate(DirectionalLight(1).LightEffect,DirectionalLight(1).LightRange#,"ProjMatrix1","CamPos1","Split1","Radius1","ProjPosition1",EffectTechniques$(7))
                  sync mask 2^AdvancedLightingCamera(6)
                  fastsync
                  DirectionalLight_UpDate(DirectionalLight(1).LightEffect,DirectionalLight(1).LightRange#*3,"ProjMatrix2","CamPos2","Split2","Radius2","ProjPosition2",EffectTechniques$(8))
                  sync mask 2^AdvancedLightingCamera(6)
                  fastsync
                  DirectionalLight_UpDate(DirectionalLight(1).LightEffect,DirectionalLight(1).LightRange#*8,"ProjMatrix3","CamPos3","Split3","Radius3","ProjPosition3",EffectTechniques$(9))
                  sync mask 2^AdvancedLightingCamera(6)
                  fastsync
              endif
            endif
         endif

      `SSAO Update (This gets renderd to light image)
         if SSAOEnabled=1
            position object SSAOObject(1),CameraPos#(1),CameraPos#(2),CameraPos#(3)
            rotate object SSAOObject(1),CameraAng#(1),CameraAng#(2),CameraAng#(3)
            position object SSAOObject(2),CameraPos#(1),CameraPos#(2),CameraPos#(3)
            rotate object SSAOObject(2),CameraAng#(1),CameraAng#(2),CameraAng#(3)
            position camera SSAOCamera(1),CameraPos#(1),CameraPos#(2),CameraPos#(3)
            rotate camera SSAOCamera(1),CameraAng#(1),CameraAng#(2),CameraAng#(3)
            sync mask 2^SSAOCamera(1)
            fastsync
         endif

      `Light Render.
         position camera AdvancedLightingCamera(4),CameraPos#(1),CameraPos#(2),CameraPos#(3)
         rotate camera AdvancedLightingCamera(4),CameraAng#(1),CameraAng#(2),CameraAng#(3)
         sync mask 2^AdvancedLightingCamera(4)
         fastsync

      `Set shader to Diffuse.
         for e=1 to array count(Effect())-1
            set effect technique Effect(e).EffNumber,EffectTechniques$(1)
         next e
      else
         for e=1 to array count(Effect())-1
            set effect technique Effect(e).EffNumber,EffectTechniques$(0)
          next e
      endif

   `Refraction Render
      if RefractionEnabled=1
         position camera RefractionCamera,CameraPos#(1),CameraPos#(2),CameraPos#(3)
         rotate camera  RefractionCamera,CameraAng#(1),CameraAng#(2),CameraAng#(3)
         sync mask 2^RefractionCamera
         fastsync
      endif

   `Reflection Render
      if ReflectionEnabled=2
         if EmitterCount>0
            for e=0 to array count(EmitterVisible())
               set effect technique Emitter(EmitterVisible(e)).Effect,"Particle"
            next e
         endif
         position camera ReflectionCamera,CameraPos#(1),ReflectionHeight#-(CameraPos#(2)-ReflectionHeight#),CameraPos#(3)
         rotate camera  ReflectionCamera,-CameraAng#(1),CameraAng#(2),CameraAng#(3)
         sync mask 2^ReflectionCamera
         fastsync
         if EmitterCount>0
            for e=0 to array count(EmitterVisible())
               set effect technique Emitter(EmitterVisible(e)).Effect,"SoftParticle"
            next e
         endif
      endif

   `Water Update
      Water_Update()

   `Light Scattering Update
      LightScattering_Update()

   `PostFilter Update
      PostFilter_Update()

   `Mask Frame Camera
      set current camera OutputCamera
      sync mask 2^OutputCamera

   endif
endfunction

`--------------
` Delete Advanced Lighting
`--------------
function AdvancedLighting_Delete()
   if AdvancedLightingEnabled=1
      if RefractionEnabled>0 then Refraction_Delete()
      if ReflectionEnabled>0 then Reflection_Delete()
      if FilterEnabled>0 then PostFilter_Delete()
      if SSAOEnabled>0 then SSAO_Delete()
      if ScatteringEnabled>0 then LightScattering_Delete()
      if WaterEnabled>0 then Water_Delete()
      for f=1 to FogAreaCount-1
         delete object FogArea(f).FogObject
         delete effect FogArea(f).FogEffect
         if FogArea(f).FogBackObject>0
            delete object FogArea(f).FogBackObject
            delete effect FogArea(f).FogBackEffect
            delete object FogArea(f).FogFrontObject
         endif
      next f
      for l=1 to array count(PointLight())-1
         if object exist(PointLight(l).LightObject)=1 then delete object PointLight(l).LightObject
         if effect exist(PointLight(l).LightEffect)=1 then delete effect PointLight(l).LightEffect
      next l
      for l=1 to array count(SpotLight())-1
         if object exist(SpotLight(l).LightObject)=1 then delete object SpotLight(l).LightObject
         if effect exist(SpotLight(l).LightEffect)=1 then delete effect SpotLight(l).LightEffect
      next l
      if DirectionalLight(1).LightObject>0
         if object exist(DirectionalLight(1).LightObject)=1 then delete object DirectionalLight(1).LightObject
         if effect exist(DirectionalLight(1).LightEffect)=1 then delete effect DirectionalLight(1).LightEffect
         if object exist(DirectionalLight(2).LightObject)=1 then delete object DirectionalLight(2).LightObject
         if effect exist(DirectionalLight(2).LightEffect)=1 then delete effect DirectionalLight(2).LightEffect
      endif
      for t=1 to DepthMapCount+6
         if Camera exist(AdvancedLightingCamera(t))=1 then delete camera AdvancedLightingCamera(t)
         if image exist(AdvancedLightingImage(t))=1 then delete image AdvancedLightingImage(t)
      next t
      Null=delete vector4(1)
      Null=delete vector4(2)
      Null=delete matrix4(3)
      Null=delete matrix4(4)
      Null=delete matrix4(5)
      Null=delete matrix4(6)
      Null=delete matrix4(7)
      AdvancedLightingEnabled=0
      undim CameraData#()
      undim AdvancedLightingCamera()
      undim AdvancedLightingImage()
      undim Object()
      undim DynamicObjNum()
      undim ObjectSize#()
      undim Effect()
      undim PointLight()
      undim SpotLight()
      undim DirectionalLight()
      undim PointDepthMap()
      undim SpotDepthMap()
      undim Ambient#()
      undim Fog#()
      undim EffectTechniques$()
      undim LightTechniques$()
      undim FogArea()
   endif
endfunction

`--------------
` Set Camera
`--------------
function Global_Set_Camera(Near#,Far#,Fov#,Aspect#)
if AdvancedLightingEnabled=1
   CameraData#(1)=Near#
   CameraData#(2)=Far#
   CameraData#(3)=Fov#
   CameraData#(4)=Aspect#
   set camera fov OutputCamera,Fov#
   set camera range OutputCamera,Near#,Far#
   set camera aspect OutputCamera,Aspect#
   set camera fov FrameCamera,Fov#
   set camera range FrameCamera,Near#,Far#
   set camera aspect FrameCamera,Aspect#
   set camera fov AdvancedLightingCamera(1),Fov#
   set camera range AdvancedLightingCamera(1),Near#,Far#
   set camera aspect AdvancedLightingCamera(1),Aspect#
   set camera fov AdvancedLightingCamera(2),Fov#
   set camera range AdvancedLightingCamera(2),Near#,Far#
   set camera aspect AdvancedLightingCamera(2),Aspect#
   set camera fov AdvancedLightingCamera(3),Fov#
   set camera range AdvancedLightingCamera(3),Near#,Far#
   set camera aspect AdvancedLightingCamera(3),Aspect#
   set camera fov AdvancedLightingCamera(4),Fov#
   set camera range AdvancedLightingCamera(4),Near#,Far#
   set camera aspect AdvancedLightingCamera(4),Aspect#
   if RefractionEnabled=1
      set camera fov RefractionCamera,Fov#
      set camera range RefractionCamera,Near#,Far#
      set camera aspect RefractionCamera,Aspect#
   endif
   if ReflectionEnabled>0
      set camera fov ReflectionCamera,Fov#
      set camera range ReflectionCamera,Near#*1.25,Far#*1.25
      set camera aspect ReflectionCamera,Aspect#
   endif
   if SSAOEnabled=1
      set camera range SSAOCamera(1),CameraData#(1),CameraData#(2)
      set camera fov SSAOCamera(1),CameraData#(3)
      set camera aspect SSAOCamera(1),CameraData#(4)
   endif
   if ScatteringEnabled=1
      set camera fov ScatteringCamera,Fov#
      set camera range ScatteringCamera,Near#,Far#
      set camera aspect ScatteringCamera,Aspect#
   endif
   if FilterEnabled=1
      set camera fov 0,Fov#
      set camera range 0,1,Far#
      set camera aspect 0,Aspect#
   endif
endif
endfunction

`--------------
` Set ambient
`--------------
function Global_Set_Ambient(Red#,Green#,Blue#,LightIntensity#)
if AdvancedLightingEnabled=1
   Ambient#(1)=Red#
   Ambient#(2)=Green#
   Ambient#(3)=Blue#
   Ambient#(4)=LightIntensity#*2
   color backdrop AdvancedLightingCamera(4),rgb(Ambient#(1)/2,Ambient#(2)/2,Ambient#(3)/2)
   for e=1 to array count(Effect())-1
      set effect constant float Effect(e).EffNumber,"LightIntensity",Ambient#(4)
   next e
endif
endfunction

`--------------
` Set Fog
`--------------
function Global_Set_Fog(Red#,Green#,Blue#,Range#,Pow#)
if AdvancedLightingEnabled=1
   Fog#(1)=Red#
   Fog#(2)=Green#
   Fog#(3)=Blue#
   Fog#(4)=Range#
   Fog#(5)=Pow#
   color backdrop FrameCamera,rgb(Fog#(1),Fog#(2),Fog#(3))
   for e=1 to array count(Effect())-1
      set vector4 1,Fog#(1)/255,Fog#(2)/255,Fog#(3)/255,0
      set effect constant vector Effect(e).EffNumber,"FogColor",1
      set effect constant float Effect(e).EffNumber,"FogRange",Fog#(4)
      set effect constant float Effect(e).EffNumber,"FogPow",Fog#(5)
   next e
   if WaterEnabled=1
      color backdrop RefractionCamera,rgb(Fog#(1),Fog#(2),Fog#(3))
      color backdrop ReflectionCamera,rgb(Fog#(1),Fog#(2),Fog#(3))
      set vector4 1,Fog#(1)/255,Fog#(2)/255,Fog#(3)/255,0
      set effect constant vector WaterEffect(1),"FogColor",1
      set effect constant float WaterEffect(1),"FogRange",Fog#(4)
      set effect constant float WaterEffect(1),"FogPow",Fog#(5)
      if WaterType=2
         set effect constant vector WaterEffect(2),"FogColor",1
         set effect constant float WaterEffect(2),"FogRange",Fog#(4)
         set effect constant float WaterEffect(2),"FogPow",Fog#(5)
      endif
   endif
endif
endfunction

`--------------
` Set Global Wireframe
`--------------
function Global_Set_Wireframe(Mode)
   if AdvancedLightingEnabled=1
      WireFrameMode=Mode
      for o=1 to array count(Object())-1
         if object exist(Object(o).ObjNumber)=1
            set object wireframe Object(o).ObjNumber,Mode
         endif
      next o
      if SkyBoxEnabled=1
         set object wireframe SkyBoxObject,Mode
      endif
      if SkyEnabled=1
         set object wireframe SkyObject,Mode
      endif
      if CloudsEnabled=1
         set object wireframe CloudsObject,Mode
      endif
      if WaterEnabled=1
         set object wireframe WaterObject(1),Mode
         if WaterType=2
            set object wireframe WaterObject(2),Mode
         endif
         set object wireframe WaterObject(3),Mode
      endif
   endif
endfunction

`====================================================
` Point light Functions
`====================================================

`--------------
` Make point light
`--------------
function PointLight_Create(Eff$)
   if AdvancedLightingEnabled=1
      Light=0
      for l=1 to array count(PointLight())-1
         if PointLight(l).LightInUse=0 then Light=l
      next l
      if Light=0
         array insert at bottom PointLight()
         Light=array count(PointLight())-1
      endif
      PointLight(Light).LightInUse=1
      PointLight(Light).LightObject=Find_Free_Object()
      PointLight(Light).LightEffect=Find_Free_Effect()
      load effect Eff$,PointLight(Light).LightEffect,0,1
      set effect constant float PointLight(Light).LightEffect,"ProjShift",(WorldSize#/50)
      load object "Shaders/Lighting/point.dbo",PointLight(Light).LightObject
      convert object fvf PointLight(Light).LightObject,0x002
      set object effect PointLight(Light).LightObject,PointLight(Light).LightEffect
      texture object PointLight(Light).LightObject,0,AdvancedLightingImage(1)
      texture object PointLight(Light).LightObject,1,AdvancedLightingImage(2)
      texture object PointLight(Light).LightObject,2,AdvancedLightingImage(3)
      texture object PointLight(Light).LightObject,4,AdvancedLightingImage(0)
      set object mask PointLight(Light).LightObject,2^AdvancedLightingCamera(4)
      disable object zdepth PointLight(Light).LightObject
      disable object zwrite PointLight(Light).LightObject
      PointLight_Set_ShadowOffset(Light,ShadowOffsets#,ShadowBias#)
      PointLight_Set_Position(Light,0,0,0)
      PointLight_Set_Rotation(Light,0,0,0)
      PointLight_Set_Color(Light,255,255,255)
      PointLight_Set_Range(Light,500)
      PointLight_Visible(Light,1)
   endif
endfunction Light

`--------------
` Delete point light
`--------------
function PointLight_Delete(Light)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(PointLight())
   if PointLight(Light).LightInUse=1
      PointLight_Visible(Light,0)
      delete object PointLight(light).LightObject
      delete effect PointLight(light).LightEffect
      PointLight(Light).LightInUse=0
      if PointLight(light).LightDepthMap>0
         PointDepthMap(PointLight(light).LightDepthMap).PLightNumber=0
         PointLight(light).LightDepthMap=0
      endif
   endif
   endif
endfunction

`--------------
` Texture Point Light
`--------------
function PointLight_Set_Texture(Light,Texture)
   if Texture>0
      if AdvancedLightingEnabled=1 and Light>0 and Light<array count(PointLight())
         if PointLight(Light).LightInUse=1
            if image exist(Texture)=1
               PointLight(light).LightTexture=Texture
               texture object PointLight(light).LightObject,5,Texture
            endif
            if Texture=0
               PointLight(light).LightTexture=0
               texture object PointLight(light).LightObject,5,0
            endif
         endif
      endif
   endif
endfunction

`--------------
` Point Light Shadow Offset
`--------------
function PointLight_Set_ShadowOffset(Light,Offsets#,Bias#)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(PointLight())
   if PointLight(Light).LightInUse=1
      PointLight(Light).LightShadowBias#=Bias#
      PointLight(Light).LightShadowOffset#=Offsets#
      set effect constant float PointLight(Light).LightEffect,"ShadowOffSet",(PointLight(light).LightRange#/75)*(PointLight(Light).LightShadowOffset#*ShadowDistort#)
      Shadow_Offsets2x2Cube(PointLight(light).LightObject,"ShadowOffSet2x2",0.001+(PointLight(light).LightRange#/400)*PointLight(Light).LightShadowOffset#)
      Shadow_Offsets3x3Cube(PointLight(light).LightObject,"ShadowOffSet3x3",0.001+(PointLight(light).LightRange#/400)*PointLight(Light).LightShadowOffset#)
      Shadow_Offsets4x4Cube(PointLight(light).LightObject,"ShadowOffSet4x4",0.001+(PointLight(light).LightRange#/400)*PointLight(Light).LightShadowOffset#)
   endif
   endif
endfunction

`--------------
` Position Point Light
`--------------
function PointLight_Set_Position(Light,PosX#,PosY#,PosZ#)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(PointLight())
   if PointLight(Light).LightInUse=1
      PointLight(light).LightPosX#=PosX#
      PointLight(light).LightPosY#=PosY#
      PointLight(light).LightPosZ#=PosZ#
      set vector4 1,PosX#,PosY#,PosZ#,0
      set effect constant vector PointLight(light).LightEffect,"LightPosition",1
      position object PointLight(light).LightObject,PosX#,PosY#,PosZ#
   endif
   endif
endfunction

`--------------
` Rotate Point Light
`--------------
function PointLight_Set_Rotation(Light,AngX#,AngY#,AngZ#)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(PointLight())
   if PointLight(Light).LightInUse=1
      PointLight(light).LightAngX#=AngX#
      PointLight(light).LightAngY#=AngY#
      PointLight(light).LightAngZ#=AngZ#
      rotate x matrix4 3,AngX#/57.3
      rotate y matrix4 4,AngY#/57.3
      rotate z matrix4 5,AngZ#/57.3
      multiply matrix4 6,3,4:multiply matrix4 6,6,5
      set effect constant matrix PointLight(light).LightEffect,"LightAngle",6
      rotate object PointLight(light).LightObject,AngX#,AngY#,AngZ#
   endif
   endif
endfunction

`--------------
` Color Point Light
`--------------
function PointLight_Set_Color(Light,ColR#,ColG#,ColB#)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(PointLight())
   if PointLight(Light).LightInUse=1
      PointLight(light).LightColR#=ColR#
      PointLight(light).LightColG#=ColG#
      PointLight(light).LightColB#=ColB#
      set vector4 1,ColR#/510,ColG#/510,ColB#/510,0
      set effect constant vector PointLight(light).LightEffect,"LightColor",1
   endif
   endif
endfunction

`--------------
` Set Point Light Range
`--------------
function PointLight_Set_Range(Light,Range#)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(PointLight())
   if PointLight(Light).LightInUse=1
      PointLight(light).LightRange#=Range#
      scale object PointLight(light).LightObject,Range#,Range#,Range#
      set effect constant float PointLight(light).LightEffect,"LightRange",Range#
      set effect constant float PointLight(Light).LightEffect,"ShadowOffSet",(PointLight(light).LightRange#/75)*(PointLight(Light).LightShadowOffset#*ShadowDistort#)
      Shadow_Offsets2x2Cube(PointLight(light).LightObject,"ShadowOffSet2x2",0.001+(PointLight(light).LightRange#/400)*PointLight(Light).LightShadowOffset#)
      Shadow_Offsets3x3Cube(PointLight(light).LightObject,"ShadowOffSet3x3",0.001+(PointLight(light).LightRange#/400)*PointLight(Light).LightShadowOffset#)
      Shadow_Offsets4x4Cube(PointLight(light).LightObject,"ShadowOffSet4x4",0.001+(PointLight(light).LightRange#/400)*PointLight(Light).LightShadowOffset#)
   endif
   endif
endfunction

`--------------
` Set Point Light Specular
`--------------
function PointLight_Set_Specular(Light,Specular)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(PointLight())
   if PointLight(Light).LightInUse=1
      PointLight(light).LightSpecular=Specular
      if PointLight(light).LightSpecular<>0
         set effect technique PointLight(light).LightEffect,LightTechniques$(5)
      else
         set effect technique PointLight(light).LightEffect,LightTechniques$(0)
      endif
      if PointLight(light).LightDepthMap>0
         PointDepthMap(PointLight(light).LightDepthMap).PLightNumber=0
         PointLight(light).LightDepthMap=0
      endif
   endif
   endif
endfunction

`--------------
` Set Point Light Shadows
`--------------
function PointLight_Set_Shadows(Light,Shadow)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(PointLight())
   if PointLight(Light).LightInUse=1
      PointLight(light).LightShadow=Shadow
      if PointLight(light).LightSpecular<>0
         set effect technique PointLight(light).LightEffect,LightTechniques$(5)
      else
         set effect technique PointLight(light).LightEffect,LightTechniques$(0)
      endif
      if PointLight(light).LightDepthMap>0
         PointDepthMap(PointLight(light).LightDepthMap).PLightNumber=0
         PointLight(light).LightDepthMap=0
      endif
   endif
   endif
endfunction

`--------------
` Set Point Light Visible
`--------------
function PointLight_Visible(Light,Vis)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(PointLight())
   if PointLight(Light).LightInUse=1
      if PointLight(light).LightVisible=1 and Vis<>1
         PointLight(light).LightVisible=0
         deletevisarray=0
         for a=1 to array count(PointLightVis())-1
            if PointLightVis(a)=light then deletevisarray=a
         next a
         if deletevisarray>0
            array delete element PointLightVis(),deletevisarray
         endif
         exclude object on PointLight(light).LightObject
         hide object PointLight(light).LightObject
         if PointLight(light).LightDepthMap>0
            PointDepthMap(PointLight(light).LightDepthMap).PLightNumber=0
            PointLight(light).LightDepthMap=0
            set effect technique PointLight(light).LightEffect,LightTechniques$(0)
         endif
      endif
      if PointLight(light).LightVisible=0 and Vis=1
         PointLight(light).LightVisible=1
         addvisarray=0
         for a=1 to array count(PointLightVis())-1
            if PointLightVis(a)=light then addvisarray=1
         next a
         if addvisarray=0
            array insert at bottom PointLightVis()
            PointLightVis(array count(PointLightVis())-1)=light
         endif
         exclude object off PointLight(light).LightObject
         show object PointLight(light).LightObject
      endif
   endif
   endif
endfunction

`====================================================
` Spot light Functions
`====================================================

`--------------
` Make spot light
`--------------
function SpotLight_Create(Eff$)
   if AdvancedLightingEnabled=1
      Light=0
      for l=1 to array count(SpotLight())-1
         if SpotLight(l).LightInUse=0 then Light=l
      next l
      if Light=0
         array insert at bottom SpotLight()
         Light=array count(SpotLight())-1
      endif
      SpotLight(Light).LightInUse=1
      SpotLight(Light).LightObject=Find_Free_Object()
      SpotLight(Light).LightEffect=Find_Free_Effect()
      load effect Eff$,SpotLight(Light).LightEffect,0,1
      set effect constant float SpotLight(Light).LightEffect,"ProjShift",(WorldSize#/50)
      load object "Shaders/Lighting/spot.dbo",SpotLight(Light).LightObject
      convert object fvf SpotLight(Light).LightObject,0x002
      set object effect SpotLight(Light).LightObject,SpotLight(Light).LightEffect
      texture object SpotLight(Light).LightObject,0,AdvancedLightingImage(1)
      texture object SpotLight(Light).LightObject,1,AdvancedLightingImage(2)
      texture object SpotLight(Light).LightObject,2,AdvancedLightingImage(3)
      texture object SpotLight(Light).LightObject,4,AdvancedLightingImage(0)
      set object mask SpotLight(Light).LightObject,2^AdvancedLightingCamera(4)
      disable object zdepth SpotLight(Light).LightObject
      disable object zwrite SpotLight(Light).LightObject
      SpotLight_Set_ShadowOffset(Light,ShadowOffsets#,ShadowBias#)
      SpotLight_Set_Rotation(Light,0,0,0,80)
      SpotLight_Set_Color(Light,255,255,255)
      SpotLight_Set_Range(Light,500)
      SpotLight_Visible(Light,1)
   endif
endfunction Light

`--------------
` Delete Spot light
`--------------
function SpotLight_Delete(Light)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(SpotLight())
   if SpotLight(Light).LightInUse=1
   SpotLight_Visible(Light,0)
   delete object SpotLight(light).LightObject
   delete effect SpotLight(light).LightEffect
   SpotLight(Light).LightInUse=0
   if SpotLight(light).LightDepthMap>0
      SpotDepthMap(SpotLight(light).LightDepthMap).SLightNumber=0
      SpotLight(light).LightDepthMap=0
   endif
   endif
   endif
endfunction

`--------------
` Texture Spot Light
`--------------
function SpotLight_Set_Texture(Light,Texture)
   if Texture>0
      if AdvancedLightingEnabled=1 and Light>0 and Light<array count(SpotLight())
        if SpotLight(Light).LightInUse=1
           if image exist(Texture)=1
              SpotLight(light).LightTexture=Texture
              texture object SpotLight(light).LightObject,5,Texture
           endif
           if Texture=0
              SpotLight(light).LightTexture=0
              texture object SpotLight(light).LightObject,5,0
           endif
        endif
      endif
   endif
endfunction

`--------------
` Spot Light Shadow Offset
`--------------
function SpotLight_Set_ShadowOffset(Light,Offsets#,Bias#)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(SpotLight())
   if SpotLight(Light).LightInUse=1
      SpotLight(Light).LightShadowBias#=Bias#
      SpotLight(Light).LightShadowOffset#=Offsets#/1.4
      set effect constant float SpotLight(Light).LightEffect,"ShadowOffSet",(SpotLight(light).LightRange#/75)*(SpotLight(Light).LightShadowOffset#*ShadowDistort#)
      Shadow_Offsets2x22D(SpotLight(light).LightObject,"ShadowOffSet2x2",0.0001+(SpotLight(light).LightRange#/600)*SpotLight(Light).LightShadowOffset#)
      Shadow_Offsets3x32D(SpotLight(light).LightObject,"ShadowOffSet3x3",0.0001+(SpotLight(light).LightRange#/600)*SpotLight(Light).LightShadowOffset#)
      Shadow_Offsets4x42D(SpotLight(light).LightObject,"ShadowOffSet4x4",0.0001+(SpotLight(light).LightRange#/600)*SpotLight(Light).LightShadowOffset#)
   endif
   endif
endfunction

`--------------
` Position Spot Light
`--------------
function SpotLight_Set_Position(Light,PosX#,PosY#,PosZ#)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(SpotLight())
   if SpotLight(Light).LightInUse=1
      SpotLight(light).LightPosX#=PosX#
      SpotLight(light).LightPosY#=PosY#
      SpotLight(light).LightPosZ#=PosZ#
      set vector4 1,PosX#,PosY#,PosZ#,0
      set effect constant vector SpotLight(light).LightEffect,"LightPosition",1
      position object SpotLight(light).LightObject,SpotLight(light).LightPosX#,SpotLight(light).LightPosY#,SpotLight(light).LightPosZ#
   endif
   endif
endfunction

`--------------
` Rotate Spot Light
`--------------
function SpotLight_Set_Rotation(Light,AngX#,AngY#,AngZ#,Fov#)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(SpotLight())
   if SpotLight(Light).LightInUse=1
      SpotLight(light).LightAngX#=AngX#
      SpotLight(light).LightAngY#=AngY#
      SpotLight(light).LightAngZ#=AngZ#
      SpotLight(light).LightFOV#=Fov#
      set current camera AdvancedLightingCamera(7)
      set camera range AdvancedLightingCamera(7),1,SpotLight(light).LightRange#
      set camera fov AdvancedLightingCamera(7),Fov#
      position camera AdvancedLightingCamera(7),0,0,0
      Rotate camera AdvancedLightingCamera(7),AngX#,AngY#,AngZ#
      view matrix4 3:projection matrix4 4
      multiply matrix4 5,3,4
      set effect constant matrix SpotLight(light).LightEffect,"SpotProjMatrix",5
      Roll camera right AdvancedLightingCamera(7),SpotLight(light).LightRoll#
      view matrix4 3:projection matrix4 4
      multiply matrix4 5,3,4
      set effect constant matrix SpotLight(light).LightEffect,"LightProjMatrix",5
      set current camera OutputCamera
      rotate object SpotLight(light).LightObject,AngX#,AngY#,AngZ#
      scale object SpotLight(light).LightObject,(SpotLight(light).LightFOV#^1.2)*(SpotLight(light).LightRange#/100),(SpotLight(light).LightFOV#^1.2)*(SpotLight(light).LightRange#/100),SpotLight(light).LightRange#
   endif
   endif
endfunction

`--------------
` Roll Spot Light Projection (for rotating fan effects ?)
`--------------
function SpotLight_Set_RollProjection(Light,Roll#)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(SpotLight())
   if SpotLight(Light).LightInUse=1
      SpotLight(light).LightRoll#=Roll#
      set current camera AdvancedLightingCamera(7)
      set camera fov AdvancedLightingCamera(7),SpotLight(light).LightFOV#
      position camera AdvancedLightingCamera(7),SpotLight(light).LightPosX#,SpotLight(light).LightPosY#,SpotLight(light).LightPosZ#
      Rotate camera AdvancedLightingCamera(7),SpotLight(light).LightAngX#,SpotLight(light).LightAngY#,SpotLight(light).LightAngZ#
      Roll camera right AdvancedLightingCamera(7),SpotLight(light).LightRoll#
      view matrix4 3:projection matrix4 4
      multiply matrix4 5,3,4
      set effect constant matrix SpotLight(light).LightEffect,"LightProjMatrix",5
      set current camera OutputCamera
   endif
   endif
endfunction

`--------------
` Color Spot Light
`--------------
function SpotLight_Set_Color(Light,ColR#,ColG#,ColB#)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(SpotLight())
   if SpotLight(Light).LightInUse=1
      SpotLight(light).LightColR#=ColR#
      SpotLight(light).LightColG#=ColG#
      SpotLight(light).LightColB#=ColB#
      set vector4 1,ColR#/510,ColG#/510,ColB#/510,0
      set effect constant vector spotLight(light).LightEffect,"LightColor",1
   endif
   endif
endfunction

`--------------
` Set Spot Light Range
`--------------
function SpotLight_Set_Range(Light,Range#)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(SpotLight())
   if SpotLight(Light).LightInUse=1
      SpotLight(light).LightRange#=Range#
      scale object SpotLight(light).LightObject,(SpotLight(light).LightFOV#^1.2)*(SpotLight(light).LightRange#/100),(SpotLight(light).LightFOV#^1.2)*(SpotLight(light).LightRange#/100),SpotLight(light).LightRange#
      set effect constant float SpotLight(light).LightEffect,"LightRange",Range#
      set effect constant float SpotLight(Light).LightEffect,"ShadowOffSet",(SpotLight(light).LightRange#/75)*(SpotLight(Light).LightShadowOffset#*ShadowDistort#)
      Shadow_Offsets2x22D(SpotLight(light).LightObject,"ShadowOffSet2x2",0.0001+(SpotLight(light).LightRange#/600)*SpotLight(Light).LightShadowOffset#)
      Shadow_Offsets3x32D(SpotLight(light).LightObject,"ShadowOffSet3x3",0.0001+(SpotLight(light).LightRange#/600)*SpotLight(Light).LightShadowOffset#)
      Shadow_Offsets4x42D(SpotLight(light).LightObject,"ShadowOffSet4x4",0.0001+(SpotLight(light).LightRange#/600)*SpotLight(Light).LightShadowOffset#)
   endif
   endif
endfunction

`--------------
` Set Spot Light Specular
`--------------
function SpotLight_Set_Specular(Light,Specular)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(SpotLight())
   if SpotLight(Light).LightInUse=1
      SpotLight(light).LightSpecular=Specular
      if SpotLight(light).LightSpecular<>0
         set effect technique SpotLight(light).LightEffect,LightTechniques$(5)
      else
         set effect technique SpotLight(light).LightEffect,LightTechniques$(0)
      endif
      if SpotLight(light).LightDepthMap>0
         SpotDepthMap(SpotLight(light).LightDepthMap).SLightNumber=0
         SpotLight(light).LightDepthMap=0
      endif
   endif
   endif
endfunction

`--------------
` Set Spot Light Shadows
`--------------
function SpotLight_Set_Shadows(Light,Shadow)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(SpotLight())
   if SpotLight(Light).LightInUse=1
      SpotLight(light).LightShadow=Shadow
      if SpotLight(light).LightSpecular<>0
         set effect technique SpotLight(light).LightEffect,LightTechniques$(5)
      else
         set effect technique SpotLight(light).LightEffect,LightTechniques$(0)
      endif
      if SpotLight(light).LightDepthMap>0
         SpotDepthMap(SpotLight(light).LightDepthMap).SLightNumber=0
         SpotLight(light).LightDepthMap=0
      endif
   endif
   endif
endfunction

`--------------
` Set Spot Light Visible
`--------------
function SpotLight_Visible(Light,Vis)
   if AdvancedLightingEnabled=1 and Light>0 and Light<array count(SpotLight())
   if SpotLight(Light).LightInUse=1
      if SpotLight(light).LightVisible=1 and Vis<>1
         SpotLight(light).LightVisible=0
         deletevisarray=0
         for a=1 to array count(SpotLightVis())-1
            if SpotLightVis(a)=light then deletevisarray=a
         next a
         if deletevisarray>0
            array delete element SpotLightVis(),deletevisarray
         endif
         exclude object on SpotLight(light).LightObject
         hide object SpotLight(light).LightObject
         if SpotLight(light).LightDepthMap>0
            SpotDepthMap(SpotLight(light).LightDepthMap).SLightNumber=0
            SpotLight(light).LightDepthMap=0
            set effect technique SpotLight(light).LightEffect,LightTechniques$(0)
         endif
      endif
      if SpotLight(light).LightVisible=0 and Vis=1
         SpotLight(light).LightVisible=1
         addvisarray=0
         for a=1 to array count(SpotLightVis())-1
            if SpotLightVis(a)=light then addvisarray=1
         next a
         if addvisarray=0
            array insert at bottom SpotLightVis()
            SpotLightVis(array count(SpotLightVis())-1)=light
         endif
         exclude object off SpotLight(light).LightObject
         show object SpotLight(light).LightObject
      endif
   endif
   endif
endfunction

`====================================================
` Directional light Functions
`====================================================

`--------------
` Make Directional light
`--------------
function DirectionalLight_Create(Eff$)
if AdvancedLightingEnabled=1
   DirectionalLight(1).LightObject=Find_Free_Object()
   DirectionalLight(1).LightEffect=Find_Free_Effect()
   load effect Eff$,DirectionalLight(1).LightEffect,0,1
   set effect constant float DirectionalLight(1).LightEffect,"ProjShift",(WorldSize#/50)
   load object "Shaders/Lighting/point.dbo",DirectionalLight(1).LightObject
   convert object fvf DirectionalLight(1).LightObject,0x002
   texture object DirectionalLight(1).LightObject,0,AdvancedLightingImage(1)
   texture object DirectionalLight(1).LightObject,1,AdvancedLightingImage(2)
   texture object DirectionalLight(1).LightObject,2,AdvancedLightingImage(3)
   texture object DirectionalLight(1).LightObject,3,AdvancedLightingImage(6)
   texture object DirectionalLight(1).LightObject,4,AdvancedLightingImage(0)
   set object effect DirectionalLight(1).LightObject,DirectionalLight(1).LightEffect
   set object mask DirectionalLight(1).LightObject,2^AdvancedLightingCamera(4)
   disable object zdepth DirectionalLight(1).LightObject
   disable object zwrite DirectionalLight(1).LightObject
   DirectionalLight(2).LightObject=Find_Free_Object()
   DirectionalLight(2).LightEffect=Find_Free_Effect()
   load effect "Shaders/Lighting/DirectionalFill.fx",DirectionalLight(2).LightEffect,0,1
   make object plain DirectionalLight(2).LightObject,200,200,1
   convert object fvf DirectionalLight(2).LightObject,0x002
   set object effect DirectionalLight(2).LightObject,DirectionalLight(2).LightEffect
   set object mask DirectionalLight(2).LightObject,2^AdvancedLightingCamera(6)
   DirectionalLight_Set_ShadowOffset(Light,ShadowOffsets#,ShadowBias#)
   DirectionalLight_Set_Rotation(25,25,0)
   DirectionalLight_Set_Color(255,255,255)
   DirectionalLight_Set_Range(750)
   DirectionalLight_Set_Specular(0)
   DirectionalLight_Set_Shadows(0)
   DirectionalLight_Visible(1)
   endif
endfunction

`--------------
` Delete Directional Light
`--------------
function DirectionalLight_Delete()
   if DirectionalLight(1).LightObject>0
      delete object DirectionalLight(1).LightObject
      delete effect DirectionalLight(1).LightEffect
      delete object DirectionalLight(2).LightObject
      delete effect DirectionalLight(2).LightEffect
      DirectionalLight(1).LightObject=0
   endif
endfunction

`--------------
` Directional Light UpDate
`--------------
function DirectionalLight_UpDate(Effect,Range#,ProjMatrix$,CamPos$,Split$,Radius$,ProjPosition$,Teq$)
   IntCX=int(CameraPos#(1)/(Range#/100))*(Range#/100)
   IntCY=int(CameraPos#(2)/(Range#/100))*(Range#/100)
   IntCZ=int(CameraPos#(3)/(Range#/100))*(Range#/100)
   RangeMultiplier#=Range#*DirectionalMultiplier#
   position camera AdvancedLightingCamera(6),IntCX,IntCY,IntCZ
   move camera AdvancedLightingCamera(6),-Range#/2.5
   set vector4 1,camera position x(AdvancedLightingCamera(6)),camera position y(AdvancedLightingCamera(6)),camera position z(AdvancedLightingCamera(6)),0
   position camera AdvancedLightingCamera(6),IntCX,IntCY,IntCZ
   move camera AdvancedLightingCamera(6),-RangeMultiplier#
   set camera range AdvancedLightingCamera(6),RangeMultiplier#*0.5,RangeMultiplier#*1.5
   view matrix4 3
   projection matrix4 4
   build ortho lhmatrix4 5,Range#/RangeMultiplier#,Range#/RangeMultiplier#,RangeMultiplier#*0.5,RangeMultiplier#*1.5
   add matrix4 4,5,4
   multiply matrix4 5,3,4
   for e=1 to array count(Effect())-1
      set effect constant vector Effect(e).EffNumber,CamPos$,1
      set effect constant float Effect(e).EffNumber,Radius$,Range#/2
      set effect constant float Effect(e).EffNumber,"ShadowBias",DirectionalLight(1).LightShadowBias#
      set effect constant matrix Effect(e).EffNumber,ProjMatrix$,5
      set effect technique Effect(e).EffNumber,Teq$
   next e
   set effect constant matrix Effect,ProjMatrix$,5
   position object DirectionalLight(2).LightObject,camera position x(AdvancedLightingCamera(6)),camera position y(AdvancedLightingCamera(6)),camera position z(AdvancedLightingCamera(6))
   rotate object DirectionalLight(2).LightObject,camera angle x(AdvancedLightingCamera(6)),camera angle y(AdvancedLightingCamera(6)),camera angle z(AdvancedLightingCamera(6))
   move object DirectionalLight(2).LightObject,(RangeMultiplier#*1.5)-(RangeMultiplier#*0.1)
   scale object DirectionalLight(2).LightObject,RangeMultiplier#*2,RangeMultiplier#*2,100
   set effect technique DirectionalLight(2).LightEffect,Teq$
   set effect constant vector Effect,CamPos$,1
   set effect constant float Effect,Split$,Range#/2.25
   set effect constant float Effect,Radius$,Range#/2
   set vector4 1,camera position x(AdvancedLightingCamera(6)),camera position y(AdvancedLightingCamera(6)),camera position z(AdvancedLightingCamera(6)),0
   set effect constant vector Effect,ProjPosition$,1
endfunction

`--------------
` Directional Light Shadow Offset
`--------------
function DirectionalLight_Set_ShadowOffset(Light,Offsets#,Bias#)
   if DirectionalLight(1).LightObject>0
      DirectionalLight(1).LightShadowBias#=Bias#/2
      DirectionalLight(1).LightShadowOffset#=Offsets#
      Range#=DirectionalLight(1).LightRange#
      set effect constant float DirectionalLight(1).LightEffect,"ShadowOffSet_1",Range#*(DirectionalLight(1).LightShadowOffset#*ShadowDistort#*4)
      set effect constant float DirectionalLight(1).LightEffect,"ShadowOffSet_2",Range#*(DirectionalLight(1).LightShadowOffset#*ShadowDistort#*8)
      set effect constant float DirectionalLight(1).LightEffect,"ShadowOffSet_3",Range#*(DirectionalLight(1).LightShadowOffset#*ShadowDistort#*12)
      Shadow_Offsets2x22D(DirectionalLight(1).LightObject,"ShadowOffSet2x2_1",Range#*((DirectionalLight(1).LightShadowOffset#*0.00075)*DirectionalMultiplier#))
      Shadow_Offsets3x32D(DirectionalLight(1).LightObject,"ShadowOffSet3x3_1",Range#*((DirectionalLight(1).LightShadowOffset#*0.00075)*DirectionalMultiplier#))
      Shadow_Offsets4x42D(DirectionalLight(1).LightObject,"ShadowOffSet4x4_1",Range#*((DirectionalLight(1).LightShadowOffset#*0.00075)*DirectionalMultiplier#))
      Shadow_Offsets2x22D(DirectionalLight(1).LightObject,"ShadowOffSet2x2_2",Range#*((DirectionalLight(1).LightShadowOffset#*0.00125)*DirectionalMultiplier#))
      Shadow_Offsets3x32D(DirectionalLight(1).LightObject,"ShadowOffSet3x3_2",Range#*((DirectionalLight(1).LightShadowOffset#*0.00125)*DirectionalMultiplier#))
      Shadow_Offsets4x42D(DirectionalLight(1).LightObject,"ShadowOffSet4x4_2",Range#*((DirectionalLight(1).LightShadowOffset#*0.00125)*DirectionalMultiplier#))
      Shadow_Offsets2x22D(DirectionalLight(1).LightObject,"ShadowOffSet2x2_3",Range#*((DirectionalLight(1).LightShadowOffset#*0.002)*DirectionalMultiplier#))
      Shadow_Offsets3x32D(DirectionalLight(1).LightObject,"ShadowOffSet3x3_3",Range#*((DirectionalLight(1).LightShadowOffset#*0.002)*DirectionalMultiplier#))
      Shadow_Offsets4x42D(DirectionalLight(1).LightObject,"ShadowOffSet4x4_3",Range#*((DirectionalLight(1).LightShadowOffset#*0.002)*DirectionalMultiplier#))
   endif
endfunction

`--------------
` Rotate Directional Light
`--------------
function DirectionalLight_Set_Rotation(AngX#,AngY#,AngZ#)
   if DirectionalLight(1).LightObject>0
      position object DirectionalLight(1).LightObject,0,0,0
      rotate object DirectionalLight(1).LightObject,AngX#,AngY#,AngZ#
      move object DirectionalLight(1).LightObject,1
      DirectionalLight(1).LightPosX#=AngX#
      DirectionalLight(1).LightPosY#=AngY#
      DirectionalLight(1).LightPosZ#=AngZ#
      DirectionalLight(1).LightAngX#=object position x(DirectionalLight(1).LightObject)
      DirectionalLight(1).LightAngY#=object position y(DirectionalLight(1).LightObject)
      DirectionalLight(1).LightAngZ#=object position z(DirectionalLight(1).LightObject)
      if ScatteringCamera>0
         set vector4 1,DirectionalLight(1).LightAngX#,DirectionalLight(1).LightAngY#,DirectionalLight(1).LightAngZ#,0
         set effect constant vector ScatteringEffect,"LightDir",1
      endif
      if SkyBoxEnabled=1
         set current camera AdvancedLightingCamera(5)
         position camera AdvancedLightingCamera(5),0,0,0
         rotate camera AdvancedLightingCamera(5),DirectionalLight(1).LightPosX#,DirectionalLight(1).LightPosY#,DirectionalLight(1).LightPosZ#
         set camera fov AdvancedLightingCamera(5),SkyBoxSunScale#
         view matrix4 3:projection matrix4 4
         multiply matrix4 5,3,4
         set effect constant matrix SkyBoxEffect,"SunProjMatrix",5
         set current camera OutputCamera
      endif
      if SkyEnabled=1
         set current camera AdvancedLightingCamera(5)
         position camera AdvancedLightingCamera(5),0,0,0
         rotate camera AdvancedLightingCamera(5),DirectionalLight(1).LightPosX#,DirectionalLight(1).LightPosY#,DirectionalLight(1).LightPosZ#
         set camera fov AdvancedLightingCamera(5),SkyData#(7)
         view matrix4 3:projection matrix4 4
         multiply matrix4 5,3,4
         set effect constant matrix SkyEffect,"SunProjMatrix",5
         set current camera OutputCamera
      endif
   endif
endfunction

`--------------
` Color Directional Light
`--------------
function DirectionalLight_Set_Color(ColR#,ColG#,ColB#)
   if DirectionalLight(1).LightObject>0
      DirectionalLight(1).LightColR#=ColR#
      DirectionalLight(1).LightColG#=ColG#
      DirectionalLight(1).LightColB#=ColB#
      set vector4 1,ColR#/510,ColG#/510,ColB#/510,0
      set effect constant vector DirectionalLight(1).LightEffect,"LightColor",1
      R#=ColR#/100:if R#>1 then R#=1
      G#=ColG#/100:if G#>1 then G#=1
      B#=ColB#/100:if B#>1 then B#=1
      set vector4 1,R#,G#,B#,0
      for t=1 to array count(FrameTarget())-1
         set effect constant vector FrameTarget(t).Effect,"AvgLumColor",1
      next t
   endif
endfunction

`--------------
` Set Directional Light Range
`--------------
function DirectionalLight_Set_Range(Range#)
   if DirectionalLight(1).LightObject>0
      DirectionalLight(1).LightRange#=Range#
      scale object DirectionalLight(1).LightObject,Range#*2,Range#*2,Range#*2
      set effect constant float DirectionalLight(1).LightEffect,"ShadowOffSet_1",Range#*(DirectionalLight(1).LightShadowOffset#*ShadowDistort#*4)
      set effect constant float DirectionalLight(1).LightEffect,"ShadowOffSet_2",Range#*(DirectionalLight(1).LightShadowOffset#*ShadowDistort#*8)
      set effect constant float DirectionalLight(1).LightEffect,"ShadowOffSet_3",Range#*(DirectionalLight(1).LightShadowOffset#*ShadowDistort#*12)
      Shadow_Offsets2x22D(DirectionalLight(1).LightObject,"ShadowOffSet2x2_1",Range#*((DirectionalLight(1).LightShadowOffset#*0.00075)*DirectionalMultiplier#))
      Shadow_Offsets3x32D(DirectionalLight(1).LightObject,"ShadowOffSet3x3_1",Range#*((DirectionalLight(1).LightShadowOffset#*0.00075)*DirectionalMultiplier#))
      Shadow_Offsets4x42D(DirectionalLight(1).LightObject,"ShadowOffSet4x4_1",Range#*((DirectionalLight(1).LightShadowOffset#*0.00075)*DirectionalMultiplier#))
      Shadow_Offsets2x22D(DirectionalLight(1).LightObject,"ShadowOffSet2x2_2",Range#*((DirectionalLight(1).LightShadowOffset#*0.00125)*DirectionalMultiplier#))
      Shadow_Offsets3x32D(DirectionalLight(1).LightObject,"ShadowOffSet3x3_2",Range#*((DirectionalLight(1).LightShadowOffset#*0.00125)*DirectionalMultiplier#))
      Shadow_Offsets4x42D(DirectionalLight(1).LightObject,"ShadowOffSet4x4_2",Range#*((DirectionalLight(1).LightShadowOffset#*0.00125)*DirectionalMultiplier#))
      Shadow_Offsets2x22D(DirectionalLight(1).LightObject,"ShadowOffSet2x2_3",Range#*((DirectionalLight(1).LightShadowOffset#*0.002)*DirectionalMultiplier#))
      Shadow_Offsets3x32D(DirectionalLight(1).LightObject,"ShadowOffSet3x3_3",Range#*((DirectionalLight(1).LightShadowOffset#*0.002)*DirectionalMultiplier#))
      Shadow_Offsets4x42D(DirectionalLight(1).LightObject,"ShadowOffSet4x4_3",Range#*((DirectionalLight(1).LightShadowOffset#*0.002)*DirectionalMultiplier#))
   endif
endfunction

`--------------
` Set Directional Light Specular
`--------------
function DirectionalLight_Set_Specular(Specular)
   if DirectionalLight(1).LightObject>0
      DirectionalLight(1).LightSpecular=Specular
      if DirectionalLight(1).LightSpecular<>0
         set effect technique DirectionalLight(1).LightEffect,LightTechniques$(DirectionalLight(1).LightShadow+5)
      else
         set effect technique DirectionalLight(1).LightEffect,LightTechniques$(DirectionalLight(1).LightShadow)
      endif
   endif
endfunction

`--------------
` Set Directional Light Shadows
`--------------
function DirectionalLight_Set_Shadows(Shadow)
   if DirectionalLight(1).LightObject>0
      DirectionalLight(1).LightShadow=Shadow
      if DirectionalLight(1).LightSpecular<>0
         set effect technique DirectionalLight(1).LightEffect,LightTechniques$(DirectionalLight(1).LightShadow+5)
      else
         set effect technique DirectionalLight(1).LightEffect,LightTechniques$(DirectionalLight(1).LightShadow)
      endif
   endif
endfunction

`--------------
` Set Directional Light Visible
`--------------
function DirectionalLight_Visible(Vis)
   if DirectionalLight(1).LightObject>0
      if DirectionalLight(1).LightVisible=1 and Vis<>1
         DirectionalLight(1).LightVisible=0
         exclude object on DirectionalLight(1).LightObject
         hide object DirectionalLight(1).LightObject
      endif
      if DirectionalLight(1).LightVisible=0 and Vis=1
         DirectionalLight(1).LightVisible=1
         exclude object off DirectionalLight(1).LightObject
         show object DirectionalLight(1).LightObject
      endif
   endif
endfunction

`====================================================

`--------------
` Shaders shadow Offset arrays
`--------------
function Shadow_Offsets2x22D(Obj,CS$,Offset#)
   Effect=get object effect(Obj,-1)
      set vector4 1,-Offset#*0.5,-Offset#*0.5,0,0:set effect constant vector element CS$,1,1
      set vector4 1,Offset#*0.5,-Offset#*0.5,0,0:set effect constant vector element CS$,2,1
      set vector4 1,-Offset#*0.5,Offset#*0.5,0,0:set effect constant vector element CS$,3,1
      set vector4 1,Offset#*0.5,Offset#*0.5,0,0:set effect constant vector element CS$,4,1
   release effect pointer
endfunction
function Shadow_Offsets2x2Cube(Obj,CS$,Offset#)
   Effect=get object effect(Obj,-1)
      set vector4 1,-Offset#*0.5,-Offset#*0.5,Offset#*0.5,0:set effect constant vector element CS$,1,1
      set vector4 1,Offset#*0.5,-Offset#*0.5,-Offset#*0.5,0:set effect constant vector element CS$,2,1
      set vector4 1,-Offset#*0.5,Offset#*0.5,Offset#*0.5,0:set effect constant vector element CS$,3,1
      set vector4 1,Offset#*0.5,Offset#*0.5,-Offset#*0.5,0:set effect constant vector element CS$,4,1
   release effect pointer
endfunction
function Shadow_Offsets3x32D(Obj,CS$,Offset#)
   Effect=get object effect(Obj,-1)
      set vector4 1,-Offset#,-Offset#,0,0:set effect constant vector element CS$,0,1
      set vector4 1,-Offset#,0,0,0:set effect constant vector element CS$,1,1
      set vector4 1,-Offset#,Offset#,0,0:set effect constant vector element CS$,2,1
      set vector4 1,0,-Offset#,0,0:set effect constant vector element CS$,3,1
      set vector4 1,0,0,0,0:set effect constant vector element CS$,4,1
      set vector4 1,0,Offset#,0,0:set effect constant vector element CS$,5,1
      set vector4 1,Offset#,-Offset#,0,0:set effect constant vector element CS$,6,1
      set vector4 1,Offset#,0,0,0:set effect constant vector element CS$,7,1
      set vector4 1,Offset#,Offset#,0,0:set effect constant vector element CS$,8,1
   release effect pointer
endfunction
function Shadow_Offsets3x3Cube(Obj,CS$,Offset#)
   Effect=get object effect(Obj,-1)
      set vector4 1,-Offset#,-Offset#,Offset#,0:set effect constant vector element CS$,0,1
      set vector4 1,0,-Offset#,-Offset#,0:set effect constant vector element CS$,1,1
      set vector4 1,Offset#,-Offset#,0,0:set effect constant vector element CS$,2,1
      set vector4 1,-Offset#,0,-Offset#,0:set effect constant vector element CS$,3,1
      set vector4 1,0,0,0,0:set effect constant vector element CS$,4,1
      set vector4 1,Offset#,0,Offset#,0:set effect constant vector element CS$,5,1
      set vector4 1,-Offset#,Offset#,0,0:set effect constant vector element CS$,6,1
      set vector4 1,0,Offset#,Offset#,0:set effect constant vector element CS$,7,1
      set vector4 1,Offset#,Offset#,-Offset#,0:set effect constant vector element CS$,8,1
   release effect pointer
endfunction
function Shadow_Offsets4x42D(Obj,CS$,Offset#)
   Effect=get object effect(Obj,-1)
      set vector4 1,-Offset#*1.5,-Offset#*1.5,0,0:set effect constant vector element CS$,0,1
      set vector4 1,-Offset#*0.5,-Offset#*1.5,0,0:set effect constant vector element CS$,1,1
      set vector4 1,Offset#*0.5,-Offset#*1.5,0,0:set effect constant vector element CS$,2,1
      set vector4 1,Offset#*1.5,-Offset#*1.5,0,0:set effect constant vector element CS$,3,1
      set vector4 1,-Offset#*1.5,-Offset#*0.5,0,0:set effect constant vector element CS$,4,1
      set vector4 1,-Offset#*0.5,-Offset#*0.5,0,0:set effect constant vector element CS$,5,1
      set vector4 1,Offset#*0.5,-Offset#*0.5,0,0:set effect constant vector element CS$,6,1
      set vector4 1,Offset#*1.5,-Offset#*0.5,0,0:set effect constant vector element CS$,7,1
      set vector4 1,-Offset#*1.5,Offset#*0.5,0,0:set effect constant vector element CS$,8,1
      set vector4 1,-Offset#*0.5,Offset#*0.5,0,0:set effect constant vector element CS$,9,1
      set vector4 1,Offset#*0.5,Offset#*0.5,0,0:set effect constant vector element CS$,10,1
      set vector4 1,Offset#*1.5,Offset#*0.5,0,0:set effect constant vector element CS$,11,1
      set vector4 1,-Offset#*1.5,Offset#*1.5,0,0:set effect constant vector element CS$,12,1
      set vector4 1,-Offset#*0.5,Offset#*1.5,0,0:set effect constant vector element CS$,13,1
      set vector4 1,Offset#*0.5,Offset#*1.5,0,0:set effect constant vector element CS$,14,1
      set vector4 1,Offset#*1.5,Offset#*1.5,0,0:set effect constant vector element CS$,15,1
   release effect pointer
endfunction
function Shadow_Offsets4x4Cube(Obj,CS$,Offset#)
   Effect=get object effect(Obj,-1)
      set vector4 1,-Offset#*1.5,-Offset#*1.5,-Offset#*0.5,0:set effect constant vector element CS$,0,1
      set vector4 1,-Offset#*0.5,-Offset#*1.5,-Offset#*1.5,0:set effect constant vector element CS$,1,1
      set vector4 1,Offset#*0.5,-Offset#*1.5,Offset#*1.5,0:set effect constant vector element CS$,2,1
      set vector4 1,Offset#*1.5,-Offset#*1.5,Offset#*0.5,0:set effect constant vector element CS$,3,1
      set vector4 1,-Offset#*1.5,-Offset#*0.5,Offset#*1.5,0:set effect constant vector element CS$,4,1
      set vector4 1,-Offset#*0.5,-Offset#*0.5,-Offset#*0.5,0:set effect constant vector element CS$,5,1
      set vector4 1,Offset#*0.5,-Offset#*0.5,Offset#*0.5,0:set effect constant vector element CS$,6,1
      set vector4 1,Offset#*1.5,-Offset#*0.5,-Offset#*1.5,0:set effect constant vector element CS$,7,1
      set vector4 1,-Offset#*1.5,Offset#*0.5,-Offset#*1.5,0:set effect constant vector element CS$,8,1
      set vector4 1,-Offset#*0.5,Offset#*0.5,Offset#*0.5,0:set effect constant vector element CS$,9,1
      set vector4 1,Offset#*0.5,Offset#*0.5,-Offset#*0.5,0:set effect constant vector element CS$,10,1
      set vector4 1,Offset#*1.5,Offset#*0.5,Offset#*1.5,0:set effect constant vector element CS$,11,1
      set vector4 1,-Offset#*1.5,Offset#*1.5,Offset#*0.5,0:set effect constant vector element CS$,12,1
      set vector4 1,-Offset#*0.5,Offset#*1.5,Offset#*1.5,0:set effect constant vector element CS$,13,1
      set vector4 1,Offset#*0.5,Offset#*1.5,-Offset#*1.5,0:set effect constant vector element CS$,14,1
      set vector4 1,Offset#*1.5,Offset#*1.5,-Offset#*0.5,0:set effect constant vector element CS$,15,1
   release effect pointer
endfunction

`====================================================
` Fog Area Functions (Im working on a back plain system)
`====================================================

`--------------
` Make an Area of Fog
`--------------
function FogArea_Create(Fx$,BackFx$,Image)
   if Image=0
      if FogAreaImage=0
         global FogAreaImage
         FogAreaImage=Find_Free_Image()
         make memblock 1,12+(32*32*4)
         write memblock dword 1,0,32
         write memblock dword 1,4,32
         write memblock dword 1,8,32
         for x=0 to 31
            for z=0 to 31
               Pos=12+(z*(32*4))+(x*4)
               write memblock byte 1,Pos+2,255
               write memblock byte 1,Pos+1,255
               write memblock byte 1,Pos+0,255
               write memblock byte 1,Pos+3,255
            next z
         next x
         make image from memblock FogAreaImage,1
         delete memblock 1
      endif
      Image=FogAreaImage
   endif
   FogArea=0
   for f=0 to FogAreaCount-1
      if FogArea(f).FogInUse=0 then FogArea=f
   next f
   if FogArea=0
      array insert at bottom FogArea()
      FogArea=FogAreaCount
      inc FogAreaCount
   endif
   FogArea(FogArea).FogInUse=1
   FogArea(FogArea).FogObject=Find_Free_Object()
   make object box FogArea(FogArea).FogObject,-100,-100,-100
   convert object fvf FogArea(FogArea).FogObject,0x002
   offset limb FogArea(FogArea).FogObject,0,0,0,50
   FogArea(FogArea).FogEffect=Find_Free_Effect()
   load effect Fx$,FogArea(FogArea).FogEffect,0,1
   set object effect FogArea(FogArea).FogObject,FogArea(FogArea).FogEffect
   texture object FogArea(FogArea).FogObject,0,AdvancedLightingImage(1)
   texture object FogArea(FogArea).FogObject,1,Image
   set object transparency FogArea(FogArea).FogObject,2
   disable object zdepth FogArea(FogArea).FogObject
   disable object zwrite FogArea(FogArea).FogObject
   set effect constant float FogArea(FogArea).FogEffect,"ProjShift",(WorldSize#/50)
   if BackFx$<>""
      FogArea(FogArea).FogBackObject=Find_Free_Object()
      make object plain FogArea(FogArea).FogBackObject,-100,100
      set object cull FogArea(FogArea).FogBackObject,1
      FogArea(FogArea).FogBackEffect=Find_Free_Effect()
      load effect BackFx$,FogArea(FogArea).FogBackEffect,0,1
      set object effect FogArea(FogArea).FogBackObject,FogArea(FogArea).FogBackEffect
      texture object FogArea(FogArea).FogBackObject,0,Image
      set object transparency FogArea(FogArea).FogBackObject,2
      disable object zwrite FogArea(FogArea).FogBackObject
      FogArea(FogArea).FogFrontObject=Find_Free_Object()
      make object plain FogArea(FogArea).FogFrontObject,100,100
      set object cull FogArea(FogArea).FogFrontObject,1
      set object effect FogArea(FogArea).FogFrontObject,FogArea(FogArea).FogBackEffect
      texture object FogArea(FogArea).FogFrontObject,0,Image
      set object transparency FogArea(FogArea).FogFrontObject,2
      disable object zwrite FogArea(FogArea).FogFrontObject
      exclude object on FogArea(FogArea).FogFrontObject
   endif
   FogArea_Set_Orientation(FogArea,0,0,0,0,0,100,100,100)
   FogArea_Set_Color(FogArea,64,64,64,1)
   FogArea_Set_Range(FogArea,100,1,1)
   FogArea_Set_Mask(FogArea,1,1,1)
   FogArea_Visible(FogArea,1)
endfunction FogArea

`--------------
` Delete Area off Fog
`--------------
function FogArea_Delete(FogArea)
   if AdvancedLightingEnabled=1 and FogArea>-1 and FogArea<FogAreaCount
   if FogArea(FogArea).FogInUse=1
      delete object FogArea(FogArea).FogObject
      delete effect FogArea(FogArea).FogEffect
      if FogArea(FogArea).FogBackObject>0
         delete object FogArea(FogArea).FogBackObject
         delete effect FogArea(FogArea).FogBackEffect
         delete object FogArea(FogArea).FogFrontObject
      endif
      FogArea(FogArea).FogInUse=0
   endif
   endif
endfunction

`--------------
` Set Area Fog Orientation
`--------------
function FogArea_Set_Orientation(FogArea,PosX#,PosY#,PosZ#,AngX#,AngY#,ScaleX#,ScaleY#,Depth#)
   if AdvancedLightingEnabled=1 and FogArea>-1 and FogArea<FogAreaCount
   if FogArea(FogArea).FogInUse=1
      rotate x matrix4 3,AngX#/57.3
      rotate y matrix4 4,AngY#/57.3
      rotate z matrix4 5,0
      multiply matrix4 3,3,4:multiply matrix4 3,3,5
      set vector3 2,0,0,1:transform normals vector3 2,2,3
      FogArea(FogArea).FogDirX#=x vector3(2)
      FogArea(FogArea).FogDirY#=y vector3(2)
      FogArea(FogArea).FogDirZ#=z vector3(2)
      FogArea(FogArea).FogPosX#=PosX#
      FogArea(FogArea).FogPosY#=PosY#
      FogArea(FogArea).FogPosZ#=PosZ#
      FogArea(FogArea).FogScaleX#=ScaleX#
      FogArea(FogArea).FogScaleY#=ScaleY#
      FogArea(FogArea).FogDepth#=Depth#
      set vector4 1,-FogArea(FogArea).FogDirX#,-FogArea(FogArea).FogDirY#,-FogArea(FogArea).FogDirZ#,0
      set effect constant vector FogArea(FogArea).FogEffect,"FogDir",1
      set vector4 1,FogArea(FogArea).FogPosX#+(FogArea(FogArea).FogDirX#*FogArea(FogArea).FogDepth#),FogArea(FogArea).FogPosY#+(FogArea(FogArea).FogDirY#*FogArea(FogArea).FogDepth#),FogArea(FogArea).FogPosZ#+(FogArea(FogArea).FogDirZ#*FogArea(FogArea).FogDepth#),0
      set effect constant vector FogArea(FogArea).FogEffect,"FogPosition",1
      set effect constant float FogArea(FogArea).FogEffect,"FogZScale",FogArea(FogArea).FogDepth#
      build ortho lhmatrix4 4,FogArea(FogArea).FogScaleX#*1.03125,FogArea(FogArea).FogScaleY#*1.03125,1,Depth#
      set vector3 8,0,0,0
      set vector3 9,FogArea(FogArea).FogDirX#,FogArea(FogArea).FogDirY#,FogArea(FogArea).FogDirZ#
      set vector3 10,0,1,0
      build lookat lhmatrix4 3,8,9,10
      multiply matrix4 5,3,4
      set effect constant matrix FogArea(FogArea).FogEffect,"FogProjMatrix",5
      position object FogArea(FogArea).FogObject,PosX#,PosY#,PosZ#
      rotate object FogArea(FogArea).FogObject,AngX#,AngY#,0
      scale object FogArea(FogArea).FogObject,ScaleX#,ScaleY#,Depth#
      if FogArea(FogArea).FogBackObject>0
         position object FogArea(FogArea).FogBackObject,PosX#,PosY#,PosZ#
         rotate object FogArea(FogArea).FogBackObject,AngX#,AngY#,0
         scale object FogArea(FogArea).FogBackObject,ScaleX#,ScaleY#,100
         position object FogArea(FogArea).FogFrontObject,PosX#+(FogArea(FogArea).FogDirX#*FogArea(FogArea).FogDepth#),PosY#+(FogArea(FogArea).FogDirY#*FogArea(FogArea).FogDepth#),PosZ#+(FogArea(FogArea).FogDirZ#*FogArea(FogArea).FogDepth#)
         rotate object FogArea(FogArea).FogFrontObject,AngX#,AngY#,0
         scale object FogArea(FogArea).FogFrontObject,ScaleX#,ScaleY#,100
      endif
   endif
   endif
endfunction

`--------------
` Set Area Fog Color
`--------------
function FogArea_Set_Color(FogArea,Red#,Green#,Blue#,Intencity#)
   if AdvancedLightingEnabled=1 and FogArea>-1 and FogArea<FogAreaCount
   if FogArea(FogArea).FogInUse=1
      FogArea(FogArea).FogColR#=Red#
      FogArea(FogArea).FogColG#=Green#
      FogArea(FogArea).FogColB#=Blue#
      FogArea(FogArea).FogIntencity#=Intencity#
      set vector4 1,Red#/255,Green#/255,Blue#/255,0
      set effect constant vector FogArea(FogArea).FogEffect,"FogColor",1
      set effect constant float FogArea(FogArea).FogEffect,"FogIntencity",Intencity#
      if FogArea(FogArea).FogBackObject>0
         set effect constant vector FogArea(FogArea).FogBackEffect,"FogColor",1
         set effect constant float FogArea(FogArea).FogBackEffect,"FogIntencity",Intencity#
      endif
   endif
   endif
endfunction

`--------------
` Set Area Fog Range
`--------------
function FogArea_Set_Range(FogArea,Range#,Pow#,ZThickness#)
   if AdvancedLightingEnabled=1 and FogArea>-1 and FogArea<FogAreaCount
   if FogArea(FogArea).FogInUse=1
      FogArea(FogArea).FogRange#=Range#
      FogArea(FogArea).FogPower#=Pow#
      FogArea(FogArea).FogZThickness#=ZThickness#
      set effect constant float FogArea(FogArea).FogEffect,"FogRange",Range#
      set effect constant float FogArea(FogArea).FogEffect,"FogPow",Pow#
      set effect constant float FogArea(FogArea).FogEffect,"FogZThickness",ZThickness#
      if FogArea(FogArea).FogBackObject>0
         set effect constant float FogArea(FogArea).FogBackEffect,"FogRange",Range#
         set effect constant float FogArea(FogArea).FogBackEffect,"FogPow",Pow#
      endif
   endif
   endif
endfunction

`--------------
` Set Area Fog Mask
`--------------
function FogArea_Set_Mask(FogArea,Frame,Refract,Reflect)
   if AdvancedLightingEnabled=1 and FogArea>-1 and FogArea<FogAreaCount
   if FogArea(FogArea).FogInUse=1
      Mask=0
      if Frame=1
         Mask=Mask+(2^FrameCamera)
      endif
      if RefractionEnabled=1
         if Refract=1
            Mask=Mask+(2^RefractionCamera)
         endif
      endif
      if ReflectionEnabled>0
         if Reflect=1
            Mask=Mask+(2^ReflectionCamera)
         endif
      endif
      set object mask FogArea(FogArea).FogObject,Mask
      if FogArea(FogArea).FogBackObject>0
         set object mask FogArea(FogArea).FogBackObject,Mask
         set object mask FogArea(FogArea).FogFrontObject,Mask
      endif
   endif
   endif
endfunction

`--------------
` Set Area Fog Visible
`--------------
function FogArea_Visible(FogArea,Vis)
   if AdvancedLightingEnabled=1 and FogArea>-1 and FogArea<FogAreaCount
   if FogArea(FogArea).FogInUse=1
      if FogArea(FogArea).FogVisible=0 and Vis=1
         FogArea(FogArea).FogVisible=1
         exclude object off FogArea(FogArea).FogObject
         if FogArea(FogArea).FogBackObject>0
            exclude object off FogArea(FogArea).FogBackObject
         endif
      endif
      if FogArea(FogArea).FogVisible=1 and Vis<>1
         FogArea(FogArea).FogVisible=0
         exclude object on FogArea(FogArea).FogObject
         if FogArea(FogArea).FogBackObject>0
            exclude object on FogArea(FogArea).FogBackObject
            exclude object on FogArea(FogArea).FogFrontObject
         endif
      endif
   endif
   endif
endfunction

`====================================================
` Refraction Functions
`====================================================

`--------------
` Refraction camera
`--------------
function Refraction_SetUp(Width,Height)
   global RefractionEnabled=1
   global RefractionCamera
   global RefractionImage
   RefractionCamera=Find_Free_Camera()
   RefractionImage=Find_Free_Image()
   make camera RefractionCamera
   set camera to image RefractionCamera,RefractionImage,Width,Height
   set camera fov RefractionCamera,CameraData#(3)
   set camera range RefractionCamera,CameraData#(1),CameraData#(2)
   set camera aspect RefractionCamera,CameraData#(4)
   backdrop off RefractionCamera
endfunction

`--------------
` Delete Refraction camera
`--------------
function Refraction_Delete()
   if RefractionEnabled=1
      if Camera exist(RefractionCamera)=1 then delete camera RefractionCamera
      if image exist(RefractionImage)=1 then delete image RefractionImage
      RefractionEnabled=0
   endif
endfunction

`====================================================
` Reflection Functions
`====================================================

`--------------
` Reflection camera
`--------------
function Reflection_SetUp(Width,Height)
   global ReflectionEnabled=1
   global ReflectionCamera
   global ReflectionImage
   global ReflectionHeight#
   ReflectionCamera=Find_Free_Camera()
   ReflectionImage=Find_Free_Image()
   make camera ReflectionCamera
   set camera to image ReflectionCamera,ReflectionImage,Width,Height
   set camera fov ReflectionCamera,CameraData#(3)
   set camera range ReflectionCamera,CameraData#(1)*1.25,CameraData#(2)*1.25
   set camera aspect ReflectionCamera,CameraData#(4)
   backdrop off ReflectionCamera
   Reflection_Height(0)
   Reflection_Update(1)
endfunction

`--------------
` Reflection Update
`--------------
function Reflection_Update(Enabled)
   if ReflectionEnabled>0
      ReflectionEnabled=Enabled+1
   endif
endfunction

`--------------
` Reflection Height
`--------------
function Reflection_Height(Height#)
   if ReflectionEnabled>0
      ReflectionHeight#=Height#
      set camera clip ReflectionCamera,3,0,ReflectionHeight#,0,0,1,0
   endif
endfunction

`--------------
` Delete Reflection camera
`--------------
function Reflection_Delete()
   if ReflectionEnabled>0
      if Camera exist(ReflectionCamera)=1 then delete camera ReflectionCamera
      if image exist(ReflectionImage)=1 then delete image ReflectionImage
      ReflectionEnabled=0
   endif
endfunction

`====================================================
` Default Post Effects Functions
`====================================================

`--------------
` Create Post Effects
`--------------
function PostEffects_Setup(PixelBlur,Bloom,BloomFlare,Dof,Scattering,SSAO)
if AdvancedLightingEnabled=1
   if PixelBlur=1 or Bloom=1 or BloomFlare=1 or Dof=1

      `Globals
         Global FrameTarget
         Global WaterFrameTarget
         Global WaterFrameTargetImage

      `Set shader identifiers
         if PixelBlur=1
            Effect_Identifier("Shaders/Post Filter/FinalComp.fx","UsePixelBlur",1)
         else
            Effect_Identifier("Shaders/Post Filter/FinalComp.fx","UsePixelBlur",0)
         endif
         if Bloom=1
            Effect_Identifier("Shaders/Post Filter/FinalComp.fx","UseBloom",1)
            Effect_Identifier("Shaders/Post Filter/FinalCompWater.fx","UseBloom",1)
         else
            Effect_Identifier("Shaders/Post Filter/FinalComp.fx","UseBloom",0)
            Effect_Identifier("Shaders/Post Filter/FinalCompWater.fx","UseBloom",0)
         endif
         if BloomFlare=1
            Effect_Identifier("Shaders/Post Filter/FinalComp.fx","UseFlare",1)
            Effect_Identifier("Shaders/Post Filter/FinalCompWater.fx","UseFlare",1)
         else
            Effect_Identifier("Shaders/Post Filter/FinalComp.fx","UseFlare",0)
            Effect_Identifier("Shaders/Post Filter/FinalCompWater.fx","UseFlare",0)
         endif
         if Dof=1
            Effect_Identifier("Shaders/Post Filter/FinalComp.fx","UseDof",1)
            Effect_Identifier("Shaders/Post Filter/FinalCompWater.fx","UseDof",1)
         else
            Effect_Identifier("Shaders/Post Filter/FinalComp.fx","UseDof",0)
            Effect_Identifier("Shaders/Post Filter/FinalCompWater.fx","UseDof",0)
         endif

      `Setup Frame Image Render
         Frame=PostFilter_SetUp(ImgScreenSizeX,ImgScreenSizeY,0)

      `Frame Targets
         FrameTarget=PostFilter_FrameTarget_Add("Shaders/Post Filter/FinalComp.fx","")
         PostFilter_FrameTarget_Image(FrameTarget,0,RenderTarget(Frame).Image)
         PostFilter_FrameTarget_Image(FrameTarget,1,AdvancedLightingImage(1))
         PostFilter_FrameTarget_Image(FrameTarget,2,AdvancedLightingImage(3))
         WaterFrameTargetImage=Find_Free_Image()
         Load image "Shaders/Water/Distort.dds",WaterFrameTargetImage
         WaterFrameTarget=PostFilter_FrameTarget_Add("Shaders/Post Filter/FinalCompWater.fx","")
         PostFilter_FrameTarget_Image(WaterFrameTarget,0,RenderTarget(Frame).Image)
         PostFilter_FrameTarget_Image(WaterFrameTarget,1,AdvancedLightingImage(1))
         PostFilter_FrameTarget_Image(WaterFrameTarget,2,AdvancedLightingImage(3))
         PostFilter_FrameTarget_Image(WaterFrameTarget,6,WaterFrameTargetImage)
         hide object FrameTarget(WaterFrameTarget).Object

      `SetUp Glow Render Targets
         if Bloom=1
            Luminance1=PostFilter_RenderTarget_Add("Shaders/Post Filter/Luminance1.fx","",9,9,0)
            PostFilter_RenderTarget_Image(Luminance1,0,RenderTarget(Frame).Image)
            Luminance2=PostFilter_RenderTarget_Add("Shaders/Post Filter/Luminance2.fx","",3,3,0)
            PostFilter_RenderTarget_Image(Luminance2,0,RenderTarget(Luminance1).Image)
            Luminance3=PostFilter_RenderTarget_Add("Shaders/Post Filter/Luminance3.fx","",1,1,0)
            PostFilter_RenderTarget_Image(Luminance3,0,RenderTarget(Luminance2).Image)
            Brightpass=PostFilter_RenderTarget_Add("Shaders/Post Filter/BrightPass.fx","",256,256,0)
            PostFilter_RenderTarget_Image(Brightpass,0,RenderTarget(1).Image)
            BloomH=PostFilter_RenderTarget_Add("Shaders/Post Filter/BloomH.fx","",256,256,0)
            PostFilter_RenderTarget_Image(BloomH,0,RenderTarget(Brightpass).Image)
            BloomV=PostFilter_RenderTarget_Add("Shaders/Post Filter/BloomV.fx","",256,256,0)
            PostFilter_RenderTarget_Image(BloomV,0,RenderTarget(BloomH).Image)
            PostFilter_FrameTarget_Image(FrameTarget,3,RenderTarget(Luminance3).Image)
            PostFilter_FrameTarget_Image(FrameTarget,4,RenderTarget(BloomV).Image)
            PostFilter_FrameTarget_Image(WaterFrameTarget,3,RenderTarget(Luminance3).Image)
            PostFilter_FrameTarget_Image(WaterFrameTarget,4,RenderTarget(BloomV).Image)
         endif

      `SetUp Dof Render Targets
         if Dof=1
            BlurH=PostFilter_RenderTarget_Add("Shaders/Post Filter/BlurH.fx","",ImgScreenSizeX/4,ImgScreenSizeY/4,0)
            PostFilter_RenderTarget_Image(BlurH,0,RenderTarget(Frame).Image)
            BlurV=PostFilter_RenderTarget_Add("Shaders/Post Filter/BlurV.fx","",ImgScreenSizeX/4,ImgScreenSizeY/4,0)
            PostFilter_RenderTarget_Image(BlurV,0,RenderTarget(BlurH).Image)
            PostFilter_FrameTarget_Image(FrameTarget,5,RenderTarget(BlurV).Image)
            PostFilter_FrameTarget_Image(WaterFrameTarget,5,RenderTarget(BlurV).Image)
         endif
      endif

   `SetUp Scattering
      if Scattering=1 then LightScattering_SetUp(ImgScreenSizeX/4,ImgScreenSizeY/4)

   `SetUp SSAO
      if SSAO=1 then SSAO_Setup(ImgScreenSizeX/4,ImgScreenSizeY/4)

endif
endfunction

`--------------
` Delete Post Effects
`--------------
function PostEffects_Delete()
   if image exist(WaterFrameTargetImage) then delete image WaterFrameTargetImage
   LightScattering_Delete()
   SSAO_Delete()
   PostFilter_Delete()
endfunction

`--------------
` Set Post Effects
`--------------
function PostEffects_Set(NearFocus#,FarFocus#,Water)
   if WaterFrameTarget>0
      set effect constant float FrameTarget(FrameTarget).Effect,"DOFNearFocus",NearFocus#
      set effect constant float FrameTarget(FrameTarget).Effect,"DOFFarFocus",FarFocus#
      set effect constant float FrameTarget(WaterFrameTarget).Effect,"DOFNearFocus",NearFocus#
      set effect constant float FrameTarget(WaterFrameTarget).Effect,"DOFFarFocus",FarFocus#
      if Water=1
         hide object FrameTarget(FrameTarget).Object
         show object FrameTarget(WaterFrameTarget).Object
      else
         show object FrameTarget(FrameTarget).Object
         hide object FrameTarget(WaterFrameTarget).Object
      endif
   endif
endfunction

`====================================================
` Post Filter Functions
`====================================================

`Post frame target data
type FrameTargetData
   Object
   Effect
   Teq$
endtype

`Post render target data
type RenderTargetData
   UpDate
   Camera
   Image
   Object
   Effect
   Teq$
endtype

`--------------
` Frame Render Set Up
`--------------
function PostFilter_SetUp(Width,Height,D3DFormat)
   if AdvancedLightingEnabled=1

   `Globals
      global FilterEnabled=1
      global FrameTargetCount=1
      global RenderTargetCount=2
      global RenderTargetMask=0
      global dim FrameTarget(1) as FrameTargetData
      global dim RenderTarget(1) as RenderTargetData

   `Frame Render Camera
      RenderTarget(1).UpDate=1
      RenderTarget(1).Camera=Find_Free_Camera()
      RenderTarget(1).Image=Find_Free_Image()
      make camera RenderTarget(1).Camera
      if D3DFormat=0 then set camera to image RenderTarget(1).Camera,RenderTarget(1).Image,Width,Height
      if D3DFormat>0 then set camera to image RenderTarget(1).Camera,RenderTarget(1).Image,Width,Height,3,D3DFormat
      set camera range RenderTarget(1).Camera,CameraData#(1),CameraData#(2)
      set camera fov RenderTarget(1).Camera,CameraData#(3)
      set camera aspect RenderTarget(1).Camera,CameraData#(4)
      backdrop on RenderTarget(1).Camera
      backdrop off OutputCamera
      set camera fov 0,CameraData#(3)
      set camera range 0,1,CameraData#(2)
      RenderTargetMask=2^RenderTarget(1).Camera
      FrameCamera=RenderTarget(1).Camera

   endif
endfunction 1

`--------------
` Post Filter Update
`--------------
function PostFilter_Update()
   if FilterEnabled=1
      position camera RenderTarget(1).Camera,CameraPos#(1),CameraPos#(2),CameraPos#(3)
      rotate camera RenderTarget(1).Camera,CameraAng#(1),CameraAng#(2),CameraAng#(3)
      sync mask RenderTargetMask
      fastsync
      for t=1 to array count(FrameTarget())-1
         position object FrameTarget(t).Object,CameraPos#(1),CameraPos#(2),CameraPos#(3)
         rotate object FrameTarget(t).Object,CameraAng#(1),CameraAng#(2),CameraAng#(3)
      next t
   endif
endfunction

`--------------
` Delete Post Filter
`--------------
function PostFilter_Delete()
   if FilterEnabled=1
      for t=1 to array count(FrameTarget())-1
         if object exist(FrameTarget(t).Object)=1 then delete object FrameTarget(t).Object
         if effect exist(FrameTarget(t).Effect)=1 then delete effect FrameTarget(t).Effect
      next t
      for t=1 to array count(RenderTarget())-1
         if Camera exist(RenderTarget(t).Camera)=1 then delete camera RenderTarget(t).Camera
         if image exist(RenderTarget(t).Image)=1 then delete image RenderTarget(t).Image
         if object exist(RenderTarget(t).Object)=1 then delete object RenderTarget(t).Object
         if effect exist(RenderTarget(t).Effect)=1 then delete effect RenderTarget(t).Effect
      next t
      FilterEnabled=0
      undim FrameTarget()
      undim RenderTarget()
   endif
endfunction

`--------------
` Add Frame Target
`--------------
function PostFilter_FrameTarget_Add(Effect$,Teq$)
   if FilterEnabled=1
      array insert at bottom FrameTarget()
      FrameTarget(FrameTargetCount).Object=Find_Free_Object()
      FrameTarget(FrameTargetCount).Effect=Find_Free_Effect()
      FrameTarget(FrameTargetCount).Teq$=Teq$
      make object plain  FrameTarget(FrameTargetCount).Object,2,2,1
      convert object fvf FrameTarget(FrameTargetCount).Object,0x002
      set object mask FrameTarget(FrameTargetCount).Object,2^OutputCamera
      load effect Effect$,FrameTarget(FrameTargetCount).Effect,0,1
      set vector4 1,0.5/ImgScreenSizeX,0.5/ImgScreenSizeY,0,0
      set effect constant vector FrameTarget(FrameTargetCount).Effect,"ViewVec",1
      set effect technique FrameTarget(FrameTargetCount).Effect,Teq$
      set object effect FrameTarget(FrameTargetCount).Object,FrameTarget(FrameTargetCount).Effect
      inc FrameTargetCount
   endif
   r=FrameTargetCount-1
endfunction r

`--------------
` Texture Frame Target
`--------------
function PostFilter_FrameTarget_Image(Targ,Stage,Img)
   if FilterEnabled=1 and Targ>0 and Targ<FrameTargetCount
      texture object FrameTarget(Targ).Object,Stage,Img
   endif
endfunction

`--------------
` Add Render Target
`--------------
function PostFilter_RenderTarget_Add(Effect$,Teq$,Width,Height,D3DFormat)
   if FilterEnabled=1
      array insert at bottom RenderTarget()
      RenderTarget(RenderTargetCount).UpDate=1
      RenderTarget(RenderTargetCount).Camera=Find_Free_Camera()
      RenderTarget(RenderTargetCount).Image=Find_Free_Image()
      RenderTarget(RenderTargetCount).Object=Find_Free_Object()
      RenderTarget(RenderTargetCount).Effect=Find_Free_Effect()
      RenderTarget(RenderTargetCount).Teq$=Teq$
      make camera RenderTarget(RenderTargetCount).Camera
      if D3DFormat=0 then set camera to image RenderTarget(RenderTargetCount).Camera,RenderTarget(RenderTargetCount).Image,Width,Height
      if D3DFormat>0 then set camera to image RenderTarget(RenderTargetCount).Camera,RenderTarget(RenderTargetCount).Image,Width,Height,3,D3DFormat
      set camera range RenderTarget(RenderTargetCount).Camera,1,10
      color backdrop RenderTarget(RenderTargetCount).Camera,rgb(255,255,255)
      sync mask 2^RenderTarget(RenderTargetCount).Camera
      fastsync
      backdrop off RenderTarget(RenderTargetCount).Camera
      make object plain RenderTarget(RenderTargetCount).Object,2,2,1
      convert object fvf RenderTarget(RenderTargetCount).Object,0x002
      load effect Effect$,RenderTarget(RenderTargetCount).Effect,0,1
      set vector4 1,1.0/Width,1.0/Height,0,0
      set effect constant vector RenderTarget(RenderTargetCount).Effect,"ViewVec",1
      set effect technique RenderTarget(RenderTargetCount).Effect,Teq$
      set object effect RenderTarget(RenderTargetCount).Object,RenderTarget(RenderTargetCount).Effect
      set object mask RenderTarget(RenderTargetCount).Object,2^RenderTarget(RenderTargetCount).Camera
      RenderTargetMask=RenderTargetMask+(2^RenderTarget(RenderTargetCount).Camera)
      inc RenderTargetCount
   endif
   r=RenderTargetCount-1
endfunction r

`--------------
` Disable Target
`--------------
function PostFilter_DisableRenderTarget(Targ)
   RenderTarget(Targ).UpDate=0
   RenderTargetMask=0
   for t=1 to RenderTargetCount-1
      if RenderTarget(t).UpDate=1
         RenderTargetMask=RenderTargetMask+(2^RenderTarget(t).Camera)
      endif
   next t
endfunction

`--------------
` Enable Target
`--------------
function PostFilter_EnableRenderTarget(Targ)
   RenderTarget(Targ).UpDate=1
   RenderTargetMask=0
   for t=1 to RenderTargetCount-1
      if RenderTarget(t).UpDate=1
         RenderTargetMask=RenderTargetMask+(2^RenderTarget(t).Camera)
      endif
   next t
endfunction

`--------------
` Texture Render Target
`--------------
function PostFilter_RenderTarget_Image(Targ,Stage,Img)
   if FilterEnabled=1 and Targ>0 and Targ<RenderTargetCount
      texture object RenderTarget(Targ).Object,Stage,Img
   endif
endfunction

`--------------
` Light Scattering Set Up
`--------------
function LightScattering_SetUp(Width,Height)
   if AdvancedLightingEnabled=1
      global ScatteringEnabled=1
      global ScatteringCamera=0
      global ScatteringImage=0
      global ScatteringObject=0
      global ScatteringEffect=0
      ScatteringCamera=Find_Free_Camera()
      ScatteringImage=Find_Free_Image()
      make camera ScatteringCamera
      set camera to image ScatteringCamera,ScatteringImage,Width,Height
      backdrop on ScatteringCamera
      color backdrop ScatteringCamera,rgb(0,0,0)
      set camera range ScatteringCamera,CameraData#(1),CameraData#(2)
      set camera fov ScatteringCamera,CameraData#(3)
      set camera aspect ScatteringCamera,CameraData#(4)
      ScatteringObject=Find_Free_Object()
      ScatteringEffect=Find_Free_Effect()
      make object plain ScatteringObject,2,2,1
      convert object fvf ScatteringObject,0x002
      set object mask ScatteringObject,2^0
      load effect "Shaders/Post Filter/Scatter.fx",ScatteringEffect,0,1
      set object effect ScatteringObject,ScatteringEffect
      disable object zdepth ScatteringObject
      texture object ScatteringObject,0,ScatteringImage
      ghost object on ScatteringObject
      set vector4 1,DirectionalLight(1).LightAngX#,DirectionalLight(1).LightAngY#,DirectionalLight(1).LightAngZ#,0
      set effect constant vector ScatteringEffect,"LightDir",1
   endif
endfunction

`--------------
` Update Light Scattering
`--------------
function LightScattering_Update()
   if ScatteringEnabled=1
   if DirectionalLight(1).LightVisible=1 and WireFrameMode=0
      show object ScatteringObject
      if SkyBoxEnabled=1 then set effect technique SkyBoxEffect,"Scattering"
      if SkyEnabled=1 then set effect technique SkyEffect,"Scattering"
      if CloudsEnabled=1 then set effect technique CloudsEffect,"Scattering"
      position object ScatteringObject,CameraPos#(1),CameraPos#(2),CameraPos#(3)
      rotate object ScatteringObject,DirectionalLight(1).LightPosX#,DirectionalLight(1).LightPosY#,DirectionalLight(1).LightPosZ#
      position camera ScatteringCamera,CameraPos#(1),CameraPos#(2),CameraPos#(3)
      rotate camera ScatteringCamera,CameraAng#(1),CameraAng#(2),CameraAng#(3)
      sync mask 2^ScatteringCamera
      fastsync
      if SkyBoxEnabled=1 then set effect technique SkyBoxEffect,"Diffuse"
      if SkyEnabled=1 then set effect technique SkyEffect,"Diffuse"
      if CloudsEnabled=1 then set effect technique CloudsEffect,"Diffuse"
   else
      hide object ScatteringObject
   endif
   endif
endfunction

`--------------
` Disable Light Scattering
`--------------
function LightScattering_Disable()
   if ScatteringEnabled>0
      ScatteringEnabled=2
      hide object ScatteringObject
   endif
endfunction

`--------------
` Enable Light Scattering
`--------------
function LightScattering_Enable()
   if ScatteringEnabled>0
      ScatteringEnabled=1
      show object ScatteringObject
   endif
endfunction

`--------------
` Delete Light Scattering
`--------------
function LightScattering_Delete()
   if ScatteringEnabled>0
      if camera exist(ScatteringCamera)=1 then delete camera ScatteringCamera
      if image exist(ScatteringImage)=1 then delete image ScatteringImage
      if object exist(ScatteringObject)=1 then delete object ScatteringObject
      if effect exist(ScatteringEffect)=1 then delete effect ScatteringEffect
      ScatteringEnabled=0
   endif
endfunction

`--------------
` Screen space ambient occlusion
`--------------
function SSAO_SetUp(Width,Height)
if AdvancedLightingEnabled=1
   global SSAOEnabled=1
   global dim SSAOCamera(1)
   global dim SSAOImage(1)
   global dim SSAOObject(2)
   global dim SSAOEffect(2)
   SSAOCamera(1)=Find_Free_Camera()
   SSAOImage(1)=Find_Free_Image()
   make camera SSAOCamera(1)
   set camera to image SSAOCamera(1),SSAOImage(1),Width,Height
   set camera range SSAOCamera(1),CameraData#(1),CameraData#(2)
   set camera fov SSAOCamera(1),CameraData#(3)
   set camera aspect SSAOCamera(1),CameraData#(4)
   backdrop off SSAOCamera(1)
   SSAOObject(1)=Find_Free_Object()
   SSAOEffect(1)=Find_Free_Effect()
   make object plain SSAOObject(1),2,2,1
   convert object fvf SSAOObject(1),0x002
   set object mask SSAOObject(1),2^SSAOCamera(1)
   load effect "Shaders/Post Filter/SSAO.fx",SSAOEffect(1),0,1
   set object effect SSAOObject(1),SSAOEffect(1)
   texture object SSAOObject(1),0,AdvancedLightingImage(1)
   texture object SSAOObject(1),1,AdvancedLightingImage(2)
   SSAOObject(2)=Find_Free_Object()
   SSAOEffect(2)=Find_Free_Effect()
   make object plain SSAOObject(2),2,2,1
   convert object fvf SSAOObject(2),0x002
   set object mask SSAOObject(2),2^AdvancedLightingCamera(4)
   load effect "Shaders/Post Filter/SSAO Blur.fx",SSAOEffect(2),0,1
   set vector4 1,1.0/Width,1.0/Height,0,0
   set effect constant vector SSAOEffect(2),"ViewVec",1
   set object effect SSAOObject(2),SSAOEffect(2)
   texture object SSAOObject(2),0,SSAOImage(1)
   ghost object on SSAOObject(2),1
endif
endfunction

`--------------
` Disable SSAO
`--------------
function SSAO_Disable()
   if SSAOEnabled>0
      SSAOEnabled=2
      hide object SSAOObject(1)
      hide object SSAOObject(2)
   endif
endfunction

`--------------
` Enable Light SSAO
`--------------
function SSAO_Enable()
   if SSAOEnabled>0
      SSAOEnabled=1
      show object SSAOObject(1)
      show object SSAOObject(2)
   endif
endfunction

`--------------
` Delete SSAO
`--------------
function SSAO_Delete()
   if SSAOEnabled>0
      if camera exist(SSAOCamera)=1 then delete camera SSAOCamera
      if image exist(SSSAOImage)=1 then delete image SSAOImage
      if object exist(SSAOObject(1))=1 then delete object SSAOObject(1)
      if effect exist(SSAOEffect(1))=1 then delete effect SSAOEffect(1)
      if object exist(SSAOObject(2))=1 then delete object SSAOObject(2)
      if effect exist(SSAOEffect(2))=1 then delete effect SSAOEffect(2)
      SSAOEnabled=0
   endif
endfunction

`====================================================
` Effect Functions
`====================================================

`--------------
` Add effect
`--------------
function Effect_Add(EffNumber)
   if AdvancedLightingEnabled=1
      if effect exist(EffNumber)=1
         for e=1 to array count(Effect())-1
            if Effect(e).EffNumber=EffNumber then Eff=e
         next e
         if Eff=0
            array insert at bottom Effect()
            ac=array count(Effect())-1
            Effect(ac).EffNumber=EffNumber
            Effect(ac).EffObject=0
            set vector4 1,0.5/ImgScreenSizeX,0.5/ImgScreenSizeY,0,0
            set effect constant vector Effect(ac).EffNumber,"ViewVec",1
            set effect constant float Effect(ac).EffNumber,"LightIntensity",Ambient#(4)
            set vector4 1,Fog#(1)/255,Fog#(2)/255,Fog#(3)/255,0
            set effect constant vector Effect(ac).EffNumber,"FogColor",1
            set effect constant float Effect(ac).EffNumber,"FogRange",Fog#(4)
            set effect constant float Effect(ac).EffNumber,"FogPow",Fog#(5)
         endif
      endif
   endif
endfunction

`--------------
` Remove effect
`--------------
function Effect_Remove(EffNumber)
   if AdvancedLightingEnabled=1
      for e=1 to array count(Effect())-1
         if Effect(e).EffNumber=EffNumber then Eff=e
      next e
      if Eff>0
         if Eff<array count(Effect())-1
            Effect(Eff).EffNumber=Effect(array count(Effect())-1).EffNumber
            Effect(Eff).EffObject=Effect(array count(Effect())-1).EffObject
         endif
         array delete element Effect(),array count(Effect())-1
      endif
   endif
endfunction

`--------------
` Attach object to effect for object motion blur
`--------------
function Effect_AttachObject(EffNumber,Obj)
   if AdvancedLightingEnabled=1
      for e=1 to array count(Effect())-1
         if Effect(e).EffNumber=EffNumber then Eff=e
      next e
      if Eff>0
         if object exist(Obj)=1
            Effect(Eff).EffObject=Obj
         endif
      endif
   endif
endfunction

`--------------
` Custom World matrix for object motion blur
`--------------
function Effect_SetPreviousWorld(Eff,Obj)
   rotate x matrix4 3,-wrapvalue(object angle x(obj))*0.0174532778
   rotate y matrix4 4,-wrapvalue(object angle y(obj))*0.0174532778
   rotate z matrix4 5,-wrapvalue(object angle z(obj))*0.0174532778
   multiply matrix4 6,5,4
   multiply matrix4 6,6,3
   scale matrix4 3,object size x(obj,1)/object size x(obj),object size y(obj,1)/object size y(obj),object size z(obj,1)/object size z(obj)
   multiply matrix4 6,6,3
   transpose matrix4 6,6
   translate matrix4 3,object position x(obj),object position y(obj),object position z(obj)
   multiply matrix4 6,6,3
   set effect constant matrix Eff,"PreviousWorld",6
endfunction

`--------------
` Set Effect Identifier
`--------------
function Effect_Identifier(fxfile$,def$,value)
if file exist(fxfile$)=1
   open to read 1,fxfile$
   open to write 2,fxfile$+"_TEMP"
   Fileline=0
      repeat
         if Fileline>0 then write string 2,line$
         read string 1,line$
         if left$(line$,7)="#define"
             rline$=right$(line$,len(line$)-8)
             if left$(rline$,len(rline$)-2)=def$
               line$="#define "+left$(rline$,len(rline$)-2)+" "+str$(value)
            endif
         endif
         inc Fileline
      until file end(1)=1
   close file 2
   close file 1
   delete file fxfile$
   rename file fxfile$+"_TEMP",fxfile$
endif
endfunction

`====================================================
` Object Functions
`====================================================

`--------------
` Add object
`--------------
function Object_Add(ObjNumber)
   if AdvancedLightingEnabled=1
      if object exist(ObjNumber)=1
         array insert at bottom Object()
         ac=array count(Object())-1
         Object(ac).ObjNumber=ObjNumber
         texture object ObjNumber,7,AdvancedLightingImage(4)
         Object_Mask(ObjNumber,1,1,1,1,1,0)
         Object_Size(ObjNumber)
         Object(ac).ObjSizeX#=ObjectSize#(1)
         Object(ac).ObjSizeY#=ObjectSize#(2)
         Object(ac).ObjSizeZ#=ObjectSize#(3)
      endif
   endif
endfunction

`--------------
` Find objects array
`--------------
function Object_FindArray(ObjNumber)
   if AdvancedLightingEnabled=1
      for o = 1 to array count(Object())-1
         if Object(o).ObjNumber=ObjNumber then exitfunction o
      next o:o=0
   endif
endfunction o

`--------------
` Remove Object from render
`--------------
function Object_Remove(ObjNumber)
   if AdvancedLightingEnabled=1
      Object=Object_FindArray(ObjNumber)
      if Object>0
      Object_Set_Static(ObjNumber)
      if Object(Object).ObjShadows=1 then Object_Render_Shadows(ObjNumber)
      if Object<array count(Object())-1
         for o=1 to array count(DynamicObjNum())-1
            if DynamicObjNum(o)=array count(Object())-1 then DynamicObjNum(o)=Object
         next o
         Object(Object).ObjNumber=Object(array count(Object())-1).ObjNumber
         Object(Object).ObjSizeX#=Object(array count(Object())-1).ObjSizeX#
         Object(Object).ObjSizeY#=Object(array count(Object())-1).ObjSizeY#
         Object(Object).ObjSizeZ#=Object(array count(Object())-1).ObjSizeZ#
         Object(Object).ObjOldPosX#=Object(array count(Object())-1).ObjOldPosX#
         Object(Object).ObjOldPosY#=Object(array count(Object())-1).ObjOldPosY#
         Object(Object).ObjOldPosZ#=Object(array count(Object())-1).ObjOldPosZ#
         Object(Object).ObjOldAngX=Object(array count(Object())-1).ObjOldAngX
         Object(Object).ObjOldAngY=Object(array count(Object())-1).ObjOldAngY
         Object(Object).ObjOldAngZ=Object(array count(Object())-1).ObjOldAngZ
         Object(Object).ObjOldScaleX#=Object(array count(Object())-1).ObjOldScaleX#
         Object(Object).ObjOldScaleY#=Object(array count(Object())-1).ObjOldScaleY#
         Object(Object).ObjOldScaleZ#=Object(array count(Object())-1).ObjOldScaleZ#
         Object(Object).ObjMask=Object(array count(Object())-1).ObjMask
         Object(Object).ObjFrame=Object(array count(Object())-1).ObjFrame
         Object(Object).ObjAdvancedLighting=Object(array count(Object())-1).ObjAdvancedLighting
         Object(Object).ObjShadows=Object(array count(Object())-1).ObjShadows
         Object(Object).ObjRefract=Object(array count(Object())-1).ObjRefract
         Object(Object).ObjReflect=Object(array count(Object())-1).ObjReflect
         Object(Object).ObjScattering=Object(array count(Object())-1).ObjScattering
      endif
      for e=1 to array count(Effect())-1
         if Effect(e).EffObject=ObjNumber then Effect(e).EffObject=0
      next e
      array delete element Object(),array count(Object())-1
      endif
   endif
endfunction

`--------------
` Set Object to Dynamic (For auto shadow map updates)
`--------------
function Object_Set_Dynamic(ObjNumber)
   if AdvancedLightingEnabled=1
      Object=Object_FindArray(ObjNumber)
      for o=1 to array count(DynamicObjNum())-1
         if DynamicObjNum(o)=Object then obj=o
      next o
      if obj=0
         array insert at bottom DynamicObjNum()
         ac=array count(DynamicObjNum())-1
         DynamicObjNum(ac)=Object
      endif
   endif
endfunction

`--------------
` Set Object to Static
`--------------
function Object_Set_Static(ObjNumber)
   if AdvancedLightingEnabled=1
      Object=Object_FindArray(ObjNumber)
      obj=-1
      for o=1 to array count(DynamicObjNum())-1
         if DynamicObjNum(o)=Object then obj=o
      next o
      if obj>-1
         array delete element DynamicObjNum(),obj
     endif
   endif
endfunction

`--------------
` Set Object Frame Render
`--------------
function Object_Mask_Frame(ObjNumber,Frame)
   Object=Object_FindArray(ObjNumber)
   if Object>0
      Object_Mask(ObjNumber,Frame,Object(Object).ObjAdvancedLighting,Object(Object).ObjShadows,Object(Object).ObjRefract,Object(Object).ObjReflect,Object(Object).ObjScattering)
   endif
endfunction

`--------------
` Set Object Advanced Lighting Render
`--------------
function Object_Mask_AdvancedLighting(ObjNumber,AdvancedLighting)
   Object=Object_FindArray(ObjNumber)
   if Object>0
      Object_Mask(ObjNumber,Object(Object).ObjFrame,AdvancedLighting,Object(Object).ObjShadows,Object(Object).ObjRefract,Object(Object).ObjReflect,Object(Object).ObjScattering)
   endif
endfunction

`--------------
` Set Object Shadows Render
`--------------
function Object_Mask_Shadows(ObjNumber,Shadow)
   Object=Object_FindArray(ObjNumber)
   if Object>0
      Object_Mask(ObjNumber,Object(Object).ObjFrame,Object(Object).ObjAdvancedLighting,Shadow,Object(Object).ObjRefract,Object(Object).ObjReflect,Object(Object).ObjScattering)
   endif
endfunction

`--------------
` Set Object Refraction Render
`--------------
function Object_Mask_Refraction(ObjNumber,Refract)
   Object=Object_FindArray(ObjNumber)
   if Object>0
      Object_Mask(ObjNumber,Object(Object).ObjFrame,Object(Object).ObjAdvancedLighting,Object(Object).ObjShadows,Refract,Object(Object).ObjReflect,Object(Object).ObjScattering)
   endif
endfunction

`--------------
` Set Object Reflection Render
`--------------
function Object_Mask_Reflection(ObjNumber,Reflect)
   Object=Object_FindArray(ObjNumber)
   if Object>0
      Object_Mask(ObjNumber,Object(Object).ObjFrame,Object(Object).ObjAdvancedLighting,Object(Object).ObjShadows,Object(Object).ObjRefract,Reflect,Object(Object).ObjScattering)
   endif
endfunction

`--------------
` Set Object Mask
`--------------
function Object_Mask(ObjNumber,Frame,AdvancedLighting,Shadow,Refract,Reflect,Scattering)
if object exist(ObjNumber)=1
   Mask=0
   if AdvancedLightingEnabled=1
      Object=Object_FindArray(ObjNumber)
      if Object>0
         if Object(Object).ObjShadows>0 and Shadow=0 then Object_Render_Shadows(ObjNumber)
         Object(Object).ObjFrame=Frame
         Object(Object).ObjAdvancedLighting=AdvancedLighting
         Object(Object).ObjShadows=Shadow
         Object(Object).ObjRefract=Refract
         Object(Object).ObjReflect=Reflect
         Object(Object).ObjScattering=Scattering
      endif
      if Frame=1
         Mask=Mask+(2^FrameCamera)
      endif
      if AdvancedLighting=1
         Mask=Mask+(2^AdvancedLightingCamera(1))
         Mask=Mask+(2^AdvancedLightingCamera(2))
         Mask=Mask+(2^AdvancedLightingCamera(3))
      endif
      if Shadow>0
         if Shadow=1
            for s=5 to DepthMapCount+6
               Mask=Mask+(2^AdvancedLightingCamera(s))
            next s
         endif
         if Shadow=2
            Mask=Mask+(2^AdvancedLightingCamera(6))
         endif
      endif
      if RefractionEnabled=1
         if Refract=1
            Mask=Mask+(2^RefractionCamera)
         endif
      endif
      if ReflectionEnabled>0
         if Reflect=1
            Mask=Mask+(2^ReflectionCamera)
         endif
      endif
      if Scattering=1 and ScatteringCamera>0
         Mask=Mask+(2^ScatteringCamera)
      endif
      if Object>0 then Object(Object).ObjMask=mask
   endif
   set object mask ObjNumber,mask
endif
endfunction

`--------------
` Update Shadows for hiding/removal of objects
`--------------
function Object_Render_Shadows(ObjNumber)
   if AdvancedLightingEnabled=1
      Object=Object_FindArray(ObjNumber)
      if Object>0 and Object(Object).ObjShadows=1
         Object_Size(Object(Object).ObjNumber)
         Object(Object).ObjSizeX#=ObjectSize#(1)
         Object(Object).ObjSizeY#=ObjectSize#(2)
         Object(Object).ObjSizeZ#=ObjectSize#(3)
         Nx#=Object position x(Object(Object).ObjNumber):Ox=Object(Object).ObjOldPosX#
         Ny#=Object position y(Object(Object).ObjNumber):Oy=Object(Object).ObjOldPosY#
         Nz#=Object position z(Object(Object).ObjNumber):Oz=Object(Object).ObjOldPosZ#
         for d = 1 to DepthMapCount
            if PointDepthMap(d).PLightNumber>0
               Lx#=PointLight(PointDepthMap(d).PLightNumber).LightPosX#
               Ly#=PointLight(PointDepthMap(d).PLightNumber).LightPosY#
               Lz#=PointLight(PointDepthMap(d).PLightNumber).LightPosZ#
               Sx#=Object(Object).ObjSizeX#+PointLight(PointDepthMap(d).PLightNumber).LightRange#
               Sy#=Object(Object).ObjSizeY#+PointLight(PointDepthMap(d).PLightNumber).LightRange#
               Sz#=Object(Object).ObjSizeZ#+PointLight(PointDepthMap(d).PLightNumber).LightRange#
               col=0
               if BoxCollision(Nx#,Ny#,Nz#,Lx#,Ly#,Lz#,Sx#,Sy#,Sz#)=1 then col=1
               if BoxCollision(Ox#,Oy#,Oz#,Lx#,Ly#,Lz#,Sx#,Sy#,Sz#)=1 then col=1
               if col=1 then PointDepthMap(d).PLightUpdate=1
            endif
            if SpotDepthMap(d).SLightNumber>0
               move object  SpotLight(SpotDepthMap(d).SLightNumber).LightObject,SpotLight(SpotDepthMap(d).SLightNumber).LightRange#
               Lx#=object position x(SpotLight(SpotDepthMap(d).SLightNumber).LightObject)
               Ly#=object position y(SpotLight(SpotDepthMap(d).SLightNumber).LightObject)
               Lz#=object position z(SpotLight(SpotDepthMap(d).SLightNumber).LightObject)
               move object  SpotLight(SpotDepthMap(d).SLightNumber).LightObject,-SpotLight(SpotDepthMap(d).SLightNumber).LightRange#
               Sx#=Object(Object).ObjSizeX#+SpotLight(SpotDepthMap(d).SLightNumber).LightRange#
               Sy#=Object(Object).ObjSizeY#+SpotLight(SpotDepthMap(d).SLightNumber).LightRange#
               Sz#=Object(Object).ObjSizeZ#+SpotLight(SpotDepthMap(d).SLightNumber).LightRange#
               col=0
               if BoxCollision(Nx#,Ny#,Nz#,Lx#,Ly#,Lz#,Sx#,Sy#,Sz#)=1 then col=1
               if BoxCollision(Ox#,Oy#,Oz#,Lx#,Ly#,Lz#,Sx#,Sy#,Sz#)=1 then col=1
               if col=1 then SpotDepthMap(d).SLightUpdate=1
            endif
          next d
      endif
   endif
endfunction

`--------------
` Get box size of an object
`--------------
function Object_Size(ObjNumber)
   PosX#=object position x(ObjNumber):PosY#=object position y(ObjNumber):PosZ#=object position z(ObjNumber)
   SizX#=object size x(ObjNumber,1):SizY#=object size y(ObjNumber,1):SizZ#=object size z(ObjNumber,1)
   ObjectSize#(1)=0:ObjectSize#(2)=0:ObjectSize#(3)=0
      position object ObjNumber,0,0,0
      move object ObjNumber,SizX#
      move object up ObjNumber,SizY#
      move object left ObjNumber,SizZ#
   if abs(object position x(ObjNumber))>ObjectSize#(1) then ObjectSize#(1)=abs(object position x(ObjNumber))
   if abs(object position y(ObjNumber))>ObjectSize#(2) then ObjectSize#(2)=abs(object position y(ObjNumber))
   if abs(object position z(ObjNumber))>ObjectSize#(3) then ObjectSize#(3)=abs(object position z(ObjNumber))
      position object ObjNumber,0,0,0
      move object ObjNumber,SizX#
      move object down ObjNumber,SizY#
      move object left ObjNumber,SizZ#
   if abs(object position x(ObjNumber))>ObjectSize#(1) then ObjectSize#(1)=abs(object position x(ObjNumber))
   if abs(object position y(ObjNumber))>ObjectSize#(2) then ObjectSize#(2)=abs(object position y(ObjNumber))
   if abs(object position z(ObjNumber))>ObjectSize#(3) then ObjectSize#(3)=abs(object position z(ObjNumber))
      position object ObjNumber,0,0,0
      move object ObjNumber,SizX#
      move object down ObjNumber,SizY#
      move object right ObjNumber,SizZ#
   if abs(object position x(ObjNumber))>ObjectSize#(1) then ObjectSize#(1)=abs(object position x(ObjNumber))
   if abs(object position y(ObjNumber))>ObjectSize#(2) then ObjectSize#(2)=abs(object position y(ObjNumber))
   if abs(object position z(ObjNumber))>ObjectSize#(3) then ObjectSize#(3)=abs(object position z(ObjNumber))
      position object ObjNumber,0,0,0
      move object ObjNumber,object size x(ObjNumber,1)
      move object up ObjNumber,object size y(ObjNumber,1)
      move object right ObjNumber,object size z(ObjNumber,1)
   if abs(object position x(ObjNumber))>ObjectSize#(1) then ObjectSize#(1)=abs(object position x(ObjNumber))
   if abs(object position y(ObjNumber))>ObjectSize#(2) then ObjectSize#(2)=abs(object position y(ObjNumber))
   if abs(object position z(ObjNumber))>ObjectSize#(3) then ObjectSize#(3)=abs(object position z(ObjNumber))
   position object ObjNumber,PosX#,PosY#,PosZ#
endfunction

`====================================================
` water Functions
`====================================================

`--------------
` Setup water
`--------------
function Water_SetUp(WType,RefractionW,RefractionH,ReflectionW,ReflectionH)
   if AdvancedLightingEnabled=1

   `Globals
      global WaterEnabled=1
      global WaterType=WType
      global WaterVisible=1
      global WaterMode
      global WaterOldScale#
      global WaterFogAera
      global dim WaterImage(4)
      global dim WaterObject(3)
      global dim WaterEffect(3)
      global dim WaterData#(12)

   `Setup refraction reflection
      if RefractionEnabled=0 then Refraction_SetUp(RefractionW,RefractionH)
      if ReflectionEnabled=0 then Reflection_SetUp(ReflectionW,ReflectionH)
      backdrop on RefractionCamera
      color backdrop RefractionCamera,rgb(Fog#(1),Fog#(2),Fog#(3))
      backdrop on ReflectionCamera
      color backdrop ReflectionCamera,rgb(Fog#(1),Fog#(2),Fog#(3))

   `Water plain
      WaterImage(1)=Find_Free_Image()
      load image "Shaders/Water/Waves.dds",WaterImage(1),3
      WaterImage(2)=Find_Free_Image()
      load image "Shaders/Water/DetailWaves.dds",WaterImage(2)
      WaterImage(3)=Find_Free_Image()
      load image "Shaders/Water/Foam.dds",WaterImage(3)
      WaterEffect(1)=Find_Free_Effect()
      if WaterType=0 then load effect "Shaders/Water/Water.fx",WaterEffect(1),0,1
      if WaterType<>0 then load effect "Shaders/Water/Ocean.fx",WaterEffect(1),0,1
      set vector4 1,0.5/ImgScreenSizeX,0.5/ImgScreenSizeY,0,0
      set effect constant vector WaterEffect(1),"ViewVec",1
      WaterObject(1)=Find_Free_Object()
      if WaterType<>2 then load object "Shaders/Water/Water Plain.dbo",WaterObject(1)
      if WaterType=2 then load object "Shaders/Water/WaterEdge.dbo",WaterObject(1)
      convert object fvf WaterObject(1),0x002
      set object effect WaterObject(1),WaterEffect(1)
      texture object WaterObject(1),0,AdvancedLightingImage(1)
      texture object WaterObject(1),1,RefractionImage
      texture object WaterObject(1),2,ReflectionImage
      texture object WaterObject(1),3,WaterImage(1)
      texture object WaterObject(1),4,WaterImage(2)
      texture object WaterObject(1),5,WaterImage(3)
      set object transparency WaterObject(1),2
      set object mask WaterObject(1),2^FrameCamera

   `Water waves plain (100x100)
      if WaterType=2
         WaterEffect(2)=Find_Free_Effect()
         load effect "Shaders/Water/Ocean Waves.fx",WaterEffect(2),0,1
         set vector4 1,0.5/ImgScreenSizeX,0.5/ImgScreenSizeY,0,0
         set effect constant vector WaterEffect(2),"ViewVec",1
         WaterObject(2)=Find_Free_Object()
         load object "Shaders/Water/WaterMesh.dbo",WaterObject(2)
         convert object fvf WaterObject(2),0x002
         set object effect WaterObject(2),WaterEffect(2)
         texture object WaterObject(2),0,AdvancedLightingImage(1)
         texture object WaterObject(2),1,RefractionImage
         texture object WaterObject(2),2,ReflectionImage
         texture object WaterObject(2),3,WaterImage(1)
         texture object WaterObject(2),4,WaterImage(2)
         texture object WaterObject(2),5,WaterImage(3)
         set object transparency WaterObject(2),2
         set object mask WaterObject(2),2^FrameCamera
      endif

   `Water Floor
      WaterObject(3)=Find_Free_Object()
      WaterEffect(3)=Find_Free_Effect()
      load effect "Shaders/Water/Water Floor.fx",WaterEffect(3),0
      Effect_Add(WaterEffect(3))
      load object "Shaders/Water/Water Floor.dbo",WaterObject(3)
      set object effect WaterObject(3),WaterEffect(3)

   `Fogging
      WaterImage(4)=Find_Free_Image()
      load image "Shaders/Water/caustics.dds",WaterImage(4),3
      WaterFogAera=FogArea_Create("Shaders/Fog/WaterFog.fx","Shaders/Fog/WaterFogBack.fx",0)
      texture object FogArea(WaterFogAera).FogObject,2,WaterImage(4)
      texture object FogArea(WaterFogAera).FogBackObject,1,WaterImage(4)

  `Set to defaults
      Water_Set_Scale(280,40,1400)
      Water_Set_DetailScale(3,0.25)
      Water_Set_LightColor(250,210,180)
      Water_Set_Color(255,255,255)
      Water_Set_FogColor(20,40,60,500)

   endif
endfunction

`--------------
` Delete Water
`--------------
function Water_Delete()
   if WaterEnabled=1
      FogArea_Delete(WaterFogAera)
      if image exist(WaterImage(1))=1 then delete image WaterImage(1)
      if image exist(WaterImage(2))=1 then delete image WaterImage(2)
      if image exist(WaterImage(3))=1 then delete image WaterImage(3)
      if image exist(WaterImage(4))=1 then delete image WaterImage(4)
      if object exist(WaterObject(1))=1 then delete object WaterObject(1)
      if object exist(WaterObject(2))=1 then delete object WaterObject(2)
      if object exist(WaterObject(3))=1 then delete object WaterObject(3)
      if effect exist(WaterEffect(1))=1 then delete effect WaterEffect(1)
      if effect exist(WaterEffect(2))=1 then delete effect WaterEffect(2)
      if effect exist(WaterEffect(3))=1 then Effect_Remove(WaterEffect(3)):delete effect WaterEffect(3)
      WaterEnabled=0
      undim WaterCamera()
      undim WaterImage()
      undim WaterObject()
      undim WaterEffect()
      undim WaterData#()
   endif
endfunction

`--------------
` Water update
`--------------
function Water_Update()
   if WaterEnabled=1 and WaterVisible=1
      if CameraPos#(2)>WaterData#(1)
         if ReflectionHeight#<>WaterData#(1)-(WaterData#(2)*0.1)
            Reflection_Height(WaterData#(1)-(WaterData#(2)*0.1))
        endif
         if WaterMode<>1
            Reflection_Update(1)
            Object_Mask(WaterObject(3),0,1,0,1,0,0)
            FogArea_Set_Mask(WaterFogAera,0,1,0)
            set effect technique WaterEffect(1),"AboveWater"
            if WaterType=2 then set effect technique WaterEffect(2),"AboveWater"
            WaterMode=1
         endif
         FogArea_Set_Orientation(WaterFogAera,CameraPos#(1),-2,CameraPos#(3),-90,0,CameraData#(2)*2,CameraData#(2)*2,WaterData#(1)+3)
         FogRange#=WaterData#(7)+(((CameraPos#(2)-WaterData#(1))*(WaterData#(7)/200))/3)
         FogArea_Set_Range(WaterFogAera,FogRange#,1,1.0)
         set vector4 1,CameraPos#(1)-(DirectionalLight(1).LightAngX#*CameraData#(2)),CameraPos#(2)-(DirectionalLight(1).LightAngY#*CameraData#(2)),CameraPos#(3)-(DirectionalLight(1).LightAngZ#*CameraData#(2)),0
         set effect constant vector WaterEffect(1),"LightPosition",1
         FresPower#=CameraAng#(1)
         if FresPower#>180 then FresPower#=0
         if FresPower#>90 then FresPower#=90
         FresPower#=50+(FresPower#*10)
         set effect constant float WaterEffect(1),"FresBias",FresPower#
         if WaterType=2
            set effect constant vector WaterEffect(2),"LightPosition",1
            set effect constant float WaterEffect(2),"FresBias",FresPower#
         endif
         position object WaterObject(3),CameraPos#(1),-1,CameraPos#(3)
         scale object WaterObject(3),CameraData#(2)*4,1,CameraData#(2)*4
         WaterScale#=WaterData#(3)+(int((CameraPos#(2)-WaterData#(1))/80)*80)
         if WaterScale#>WaterData#(3)*4 then WaterScale#=WaterData#(3)*4
         wpx#=int(CameraPos#(1)/(WaterScale#/25))*(WaterScale#/25)
         wpz#=int(CameraPos#(3)/(WaterScale#/25))*(WaterScale#/25)
         position object WaterObject(1),wpx#-CameraData#(2),WaterData#(1),wpz#-CameraData#(2)
         scale object WaterObject(1),CameraData#(2)*2,CameraData#(2)*2,CameraData#(2)*2
      else
         if WaterMode<>2
            Reflection_Update(0)
            Object_Mask(WaterObject(3),1,1,0,1,0,0)
            FogArea_Set_Mask(WaterFogAera,1,1,0)
            FogArea_Set_Range(WaterFogAera,WaterData#(7),1,0)
            set effect technique WaterEffect(1),"UnderWater"
            if WaterType=2 then set effect technique WaterEffect(2),"UnderWater"
            WaterMode=2
         endif
         FogArea_Set_Orientation(WaterFogAera,CameraPos#(1),-2,CameraPos#(3),-90,0,(WaterData#(7)+2)*2,(WaterData#(7)+2)*2,WaterData#(1)+3)
         position object WaterObject(3),CameraPos#(1),-1,CameraPos#(3)
         scale object WaterObject(3),WaterData#(7)*2,WaterData#(1),WaterData#(7)*2
         for e=1 to array count(Effect())-1
            set effect technique Effect(e).EffNumber,EffectTechniques$(1-WireFrameMode)
         next e
         WaterScale#=WaterData#(3)/2
         wpx#=int(CameraPos#(1)/(WaterScale#/25))*(WaterScale#/25)
         wpz#=int(CameraPos#(3)/(WaterScale#/25))*(WaterScale#/25)
      endif
      position object WaterObject(1),wpx#-CameraData#(2),WaterData#(1),wpz#-CameraData#(2)
      scale object WaterObject(1),CameraData#(2)*2,CameraData#(2)*2,CameraData#(2)*2
      if WaterType=2
         set vector4 1,WaterScale#,100/WaterScale#,0,0
         set effect constant vector WaterEffect(2),"ScaleVec",1
         scale object WaterObject(2),WaterScale#*2,WaterScale#,WaterScale#*2
         position object WaterObject(2),wpx#,WaterData#(1),wpz#
         if WaterOldScale#<>WaterScale#
            WaterOldScale#=WaterScale#
            lock vertexdata for limb WaterObject(1),0
               VerOffsetX1#=50-((50/CameraData#(2))*WaterScale#)+0.1:VerOffsetZ1#=50-((50/CameraData#(2))*WaterScale#)+0.1
               VerOffsetX2#=50-((50/CameraData#(2))*WaterScale#)+0.1:VerOffsetZ2#=50+((50/CameraData#(2))*WaterScale#)-0.1
               VerOffsetX3#=50+((50/CameraData#(2))*WaterScale#)-0.1:VerOffsetZ3#=50-((50/CameraData#(2))*WaterScale#)+0.1
               VerOffsetX4#=50+((50/CameraData#(2))*WaterScale#)-0.1:VerOffsetZ4#=50+((50/CameraData#(2))*WaterScale#)-0.1
               set vertexdata position 1,VerOffsetX1#,0,VerOffsetZ1#
               set vertexdata position 4,VerOffsetX1#,0,VerOffsetZ1#
               set vertexdata position 5,VerOffsetX3#,0,VerOffsetZ3#
               set vertexdata position 7,VerOffsetX3#,0,VerOffsetZ3#
               set vertexdata position 9,VerOffsetX3#,0,VerOffsetZ3#
               set vertexdata position 10,VerOffsetX4#,0,VerOffsetZ4#
               set vertexdata position 13,VerOffsetX4#,0,VerOffsetZ4#
               set vertexdata position 15,VerOffsetX4#,0,VerOffsetZ4#
               set vertexdata position 16,VerOffsetX2#,0,VerOffsetZ2#
               set vertexdata position 19,VerOffsetX2#,0,VerOffsetZ2#
               set vertexdata position 22,VerOffsetX2#,0,VerOffsetZ2#
               set vertexdata position 23,VerOffsetX1#,0,VerOffsetZ1#
            unlock vertexdata
         endif
      endif
   endif
endfunction

`--------------
` Set water scale
`--------------
function Water_Set_Scale(Hight#,WaveHight#,Scale#)
   if WaterEnabled=1
      WaterData#(1)=Hight#
      WaterData#(2)=WaveHight#
      WaterData#(3)=Scale#
      set vector4 1,WaterData#(3)*1.25,WaterData#(3)*1.25,0,0
      set effect constant float WaterEffect(1),"WaterHeight",WaterData#(1)
      set effect constant vector WaterEffect(1),"WaterScale",1
      if WaterType=2
         set effect constant float WaterEffect(2),"WaterHeight",WaterData#(1)
         set effect constant float WaterEffect(2),"WaveHeight",WaterData#(2)
         set effect constant vector WaterEffect(2),"WaterScale",1
      endif
      set vector4 1,WaterData#(3)/5,WaterData#(3)/5,0,0
      set effect constant vector FogArea(WaterFogAera).FogEffect,"CausticScale",1
      set effect constant vector FogArea(WaterFogAera).FogBackEffect,"CausticScale",1
   endif
endfunction

`--------------
` Set water Detail Scale
`--------------
function Water_Set_DetailScale(DetailScale#,DetailBump#)
   if WaterEnabled=1
      WaterData#(11)=DetailScale#
      WaterData#(12)=DetailBump#
      set effect constant float WaterEffect(1),"DetailScale",WaterData#(11)
      set effect constant float WaterEffect(1),"DetailBump",WaterData#(12)
      if WaterType=2
         set effect constant float WaterEffect(2),"DetailScale",WaterData#(11)
         set effect constant float WaterEffect(2),"DetailBump",WaterData#(12)
      endif
   endif
endfunction

`--------------
` Set water light color
`--------------
function Water_Set_LightColor(SpecR#,SpecG#,SpecB#)
   if WaterEnabled=1
      WaterData#(8)=SpecR#
      WaterData#(9)=SpecG#
      WaterData#(10)=SpecB#
      set vector4 1,WaterData#(8)/155,WaterData#(9)/155,WaterData#(10)/155,0
      set effect constant vector WaterEffect(1),"SpecularColor",1
      if WaterType=2 then set effect constant vector WaterEffect(2),"SpecularColor",1
   endif
endfunction

`--------------
` Set water color
`--------------
function Water_Set_Color(Red#,Green#,Blue#)
   if WaterEnabled=1
      set vector4 1,Red#/255,Green#/255,Blue#/255,0
      set effect constant vector WaterEffect(1),"WaterColor",1
      if WaterType=2
         set effect constant vector WaterEffect(2),"WaterColor",1
      endif
   endif
endfunction

`--------------
` Set water fog color
`--------------
function Water_Set_FogColor(Red#,Green#,Blue#,Range#)
   if WaterEnabled=1
      WaterData#(4)=Red#
      WaterData#(5)=Green#
      WaterData#(6)=Blue#
      WaterData#(7)=Range#
      set vector4 1,Fog#(1)/255,Fog#(2)/255,Fog#(3)/255,0
      set effect constant vector WaterEffect(1),"FogColor",1
      set effect constant float WaterEffect(1),"FogRange",Fog#(4)
      set effect constant float WaterEffect(1),"FogPow",Fog#(5)
      if WaterType=2
         set effect constant vector WaterEffect(2),"FogColor",1
         set effect constant float WaterEffect(2),"FogRange",Fog#(4)
         set effect constant float WaterEffect(2),"FogPow",Fog#(5)
      endif
      FogArea_Set_Color(WaterFogAera,WaterData#(4),WaterData#(5),WaterData#(6),1)
      set vector4 1,WaterData#(4)/255,WaterData#(5)/255,WaterData#(6)/255,1
      set effect constant vector WaterEffect(1),"WaterFogColor",1
      set effect constant float WaterEffect(1),"WaterFogRange",WaterData#(7)
      if WaterType=2
         set effect constant vector WaterEffect(2),"WaterFogColor",1
         set effect constant float WaterEffect(2),"WaterFogRange",WaterData#(7)
      endif
      set effect constant vector WaterEffect(3),"WaterFogColor",1
   endif
endfunction

`--------------
` Set Water Visible
`--------------
function Water_Visible(Vis)
   if WaterEnabled=1
      FogArea_Visible(WaterFogAera,Vis)
      if Vis=1
         WaterVisible=1
         exclude object off WaterObject(1)
         show object WaterObject(1)
         if WaterType=2
            exclude object off WaterObject(2)
            show object WaterObject(2)
         endif
         exclude object off WaterObject(3)
         show object WaterObject(3)
      else
         WaterVisible=0
         exclude object on WaterObject(1)
         hide object WaterObject(1)
         if WaterType=2
            exclude object on WaterObject(2)
            hide object WaterObject(2)
         endif
         exclude object on WaterObject(3)
         hide object WaterObject(3)
      endif
   endif
endfunction

`====================================================
` CubeMap Sky Box Functions
`====================================================

`--------------
` Setup Sky Box
`--------------
function SkyBox_SetUp(CubeMapTex$)
   if AdvancedLightingEnabled=1
      global SkyBoxEnabled=1
      global SkyBoxVisible=1
      global SkyBoxSunScale#=25.0
      global SkyBoxObject=0
      global SkyBoxEffect=0
      global dim SkyBoxImage(2)
      SkyBoxImage(1)=Find_Free_Image()
      load image CubeMapTex$,SkyBoxImage(1),2
      SkyBoxImage(2)=Find_Free_Image()
      load image "Shaders/Sky/Sun.dds",SkyBoxImage(2)
      SkyBoxEffect=Find_Free_Effect()
      load effect "Shaders/Sky/Skybox.fx",SkyBoxEffect,0,1
      Effect_Add(SkyBoxEffect)
      SkyBoxObject=Find_Free_Object()
      make object sphere SkyBoxObject,-100,15,15
      convert object fvf SkyBoxObject,0x002
      Object_Mask(SkyBoxObject,1,1,0,1,1,1)
      set object effect SkyBoxObject,SkyBoxEffect
      texture object SkyBoxObject,0,SkyBoxImage(1)
      texture object SkyBoxObject,1,SkyBoxImage(2)
      texture object SkyBoxObject,2,AdvancedLightingImage(1)
      set current camera AdvancedLightingCamera(5)
      position camera AdvancedLightingCamera(5),0,0,0
      rotate camera AdvancedLightingCamera(5),DirectionalLight(1).LightPosX#,DirectionalLight(1).LightPosY#,DirectionalLight(1).LightPosZ#
      set camera fov AdvancedLightingCamera(5),SkyBoxSunScale#
      view matrix4 3:projection matrix4 4
      multiply matrix4 5,3,4
      set effect constant matrix SkyBoxEffect,"SunProjMatrix",5
      set current camera OutputCamera
   endif
endfunction

`--------------
` Update Sky Box
`--------------
function SkyBox_UpDate()
   if SkyBoxEnabled=1
      position object SkyBoxObject,CameraPos#(1),CameraPos#(2),CameraPos#(3)
      scale object SkyBoxObject,CameraData#(2)*2,CameraData#(2)*2,CameraData#(2)*2
   endif
endfunction

`--------------
` Delete Sky Box
`--------------
function SkyBox_Delete()
   if SkyBoxEnabled=1
      if Image exist(SkyBoxImage(1))=1 then delete image SkyBoxImage(1)
      if Image exist(SkyBoxImage(2))=1 then delete image SkyBoxImage(2)
      if object exist(SkyBoxObject)=1 then delete object SkyBoxObject
      if effect exist(SkyBoxEffect)=1 then Effect_Remove(SkyBoxEffect):delete effect SkyBoxEffect
      SkyBoxEnabled=0
      undim SkyBoxImage()
   endif
endfunction

`--------------
` Set Sky Box Visible
`--------------
function SkyBox_Visible(Vis)
   if SkyBoxEnabled=1
      if Vis=1
         SkyBoxVisible=1
         exclude object off SkyBoxObject
         show object SkyBoxObject
      else
         SkyBoxVisible=0
         exclude object on SkyBoxObject
         hide object SkyBoxObject
      endif
   endif
endfunction

`====================================================
` Sky Functions
`====================================================

`--------------
` Setup Sky
`--------------
function Sky_SetUp()
   if AdvancedLightingEnabled=1
      global SkyEnabled=1
      global SkyVisible=1
      global SkyObject=0
      global SkyEffect=0
      global SunTex=0
      global dim SkyImage(3)
      global dim SkyData#(7)
      global dim SkyStarMapAng#(6)
      SkyStarMapAng#(5)=0.001
      SkyData#(7)=35
      SkyImage(1)=Find_Free_Image()
      load image "Shaders/Sky/StarMap.dds",SkyImage(1),2
      SkyImage(2)=Find_Free_Image()
      load image "Shaders/Sky/Sun.dds",SkyImage(2)
      SkyImage(3)=Find_Free_Image()
      load image "Shaders/Sky/Moon.dds",SkyImage(3)
      SkyEffect=Find_Free_Effect()
      load effect "Shaders/Sky/Sky.fx",SkyEffect,0,1
      Effect_Add(SkyEffect)
      SkyObject=Find_Free_Object()
      load object "Shaders/Sky/Skydome.dbo",SkyObject
      convert object fvf SkyObject,0x002
      Object_Mask(SkyObject,1,1,0,1,1,1)
      set object effect SkyObject,SkyEffect
      texture object SkyObject,0,SkyImage(1)
      texture object SkyObject,1,SkyImage(2)
      texture object SkyObject,2,AdvancedLightingImage(1)
      set current camera AdvancedLightingCamera(5)
      position camera AdvancedLightingCamera(5),0,0,0
      rotate camera AdvancedLightingCamera(5),DirectionalLight(1).LightPosX#,DirectionalLight(1).LightPosY#,DirectionalLight(1).LightPosZ#
      set camera fov AdvancedLightingCamera(5),SkyData#(7)
      view matrix4 3:projection matrix4 4
      multiply matrix4 5,3,4
      set effect constant matrix SkyEffect,"SunProjMatrix",5
      set current camera OutputCamera
      Sky_Set_SkyColor(110,120,140)
      Sky_Set_SunColor(255,255,255)
   endif
endfunction

`--------------
` Update Sky
`--------------
function Sky_Update()
   if SkyEnabled=1
      position object SkyObject,CameraPos#(1),CameraPos#(2),CameraPos#(3)
      scale object SkyObject,CameraData#(2)*2,CameraData#(2)*2,CameraData#(2)*2
      SkyStarMapAng#(2)=wrapvalue(SkyStarMapAng#(2)-SkyStarMapAng#(5))
      rotate x matrix4 3,0
      rotate y matrix4 4,SkyStarMapAng#(2)/57.3
      rotate z matrix4 5,0
      multiply matrix4 6,3,4:multiply matrix4 6,6,5
      set effect constant matrix SkyEffect,"StarAngle",6
   endif
endfunction

`--------------
` Delete Sky
`--------------
function Sky_Delete()
   if SkyEnabled=1
      if Image exist(SkyImage(1))=1 then delete image SkyImage(1)
      if Image exist(SkyImage(2))=1 then delete image SkyImage(2)
      if Image exist(SkyImage(3))=1 then delete image SkyImage(3)
      if object exist(SkyObject)=1 then delete object SkyObject
      if effect exist(SkyEffect)=1 then Effect_Remove(SkyEffect):delete effect SkyEffect
      SkyEnabled=0
      undim SkyImage()
      undim SkyData#()
      undim SkyStarMapAng#()
   endif
endfunction

`--------------
` Set Sky Color
`--------------
function Sky_Set_SkyColor(SkyR#,SkyG#,SkyB#)
   if SkyEnabled=1
      SkyData#(1)=SkyR#
      SkyData#(2)=SkyG#
      SkyData#(3)=SkyB#
      set vector4 1,SkyData#(1)/255,SkyData#(2)/255,SkyData#(3)/255,0
      set effect constant vector SkyEffect,"SkyColor",1
   endif
endfunction

`--------------
` Set Sun Color
`--------------
function Sky_Set_SunColor(SunR#,SunG#,SunB#)
   if SkyEnabled=1
      SkyData#(4)=SunR#
      SkyData#(5)=SunG#
      SkyData#(6)=SunB#
      set vector4 1,SkyData#(4)/255,SkyData#(5)/255,SkyData#(6)/255,0
      set effect constant vector SkyEffect,"SunColor",1
   endif
endfunction

`--------------
` Set Sky Visible
`--------------
function Sky_Visible(Vis)
   if SkyEnabled=1
      if Vis=1
         SkyVisible=1
         exclude object off SkyObject
         show object SkyObject
      else
         SkyVisible=0
         exclude object on SkyObject
         hide object SkyObject
      endif
   endif
endfunction

`====================================================
` Cloud Functions
`====================================================

`--------------
` SetUp Clouds
`--------------
function Clouds_SetUp()
   if AdvancedLightingEnabled=1
      global CloudsEnabled=1
      global CloudsVisible=1
      global CloudsVisible=1
      global CloudsObject
      global CloudsEffect
      global dim CloudsImage(6)
      global dim CloudsData#(12)
      CloudsImage(1)=Find_Free_Image()
      load image "Shaders/Sky/CloudsDensity.png",CloudsImage(1)
      CloudsImage(2)=Find_Free_Image()
      load image "Shaders/Sky/Clouds.png",CloudsImage(2)
      CloudsImage(3)=Find_Free_Image()
      load image "Shaders/Sky/CloudsN.png",CloudsImage(3)
      CloudsImage(4)=Find_Free_Image()
      load image "Shaders/Sky/CloudNoise.dds",CloudsImage(4)
      CloudsEffect=Find_Free_Effect()
      load effect "Shaders/Sky/Clouds.fx",CloudsEffect,0,1
      Effect_Add(CloudsEffect)
      CloudsObject=Find_Free_Object()
      load object "Shaders/Sky/Skydome.dbo",CloudsObject
      convert object fvf CloudsObject,0x002||0x100
      make mesh from object 1,CloudsObject
      Layers=2
      for c=1 to Layers
         add limb CloudsObject,c,1
        lock vertexdata for limb CloudsObject,c
            for v=0 to get vertexdata index count()-1
               set vertexdata uv v,0,c,0
            next v
         unlock vertexdata
      next c
      set effect constant float CloudsEffect,"LayerCount",Layers+1
      make mesh from object 1,CloudsObject
      delete object CloudsObject
      make object CloudsObject,1,0
      disable object zwrite CloudsObject
      set object cull CloudsObject,0
      set object transparency CloudsObject,2
      set object effect CloudsObject,CloudsEffect
      texture object CloudsObject,0,CloudsImage(1)
      texture object CloudsObject,1,CloudsImage(2)
      texture object CloudsObject,2,CloudsImage(3)
      texture object CloudsObject,3,CloudsImage(4)
      Object_Mask(CloudsObject,1,0,0,1,1,1)
      Clouds_Set_Scale(20000.0,0.75)
      Clouds_Set_Noise(3.0,0.0175)
      Clouds_Set_Alpha(2.5)
      Clouds_Set_Speed(0.005,-0.005)
      Clouds_Set_Color(255,255,255)
      Clouds_Set_Height(8000,8000)
   endif
endfunction

`--------------
` UpDate Clouds
`--------------
function Clouds_UpDate()
   if CloudsEnabled=1
      position object CloudsObject,CameraPos#(1),CloudsData#(11),CameraPos#(3)
      scale object CloudsObject,CameraData#(2)*2,CloudsData#(12),CameraData#(2)*2
   endif
endfunction

`--------------
` Delete Clouds
`--------------
function Clouds_Delete()
   if CloudsEnabled=1
      if Image exist(CloudsImage(1))=1 then delete image CloudsImage(1)
      if Image exist(CloudsImage(2))=1 then delete image CloudsImage(2)
      if Image exist(CloudsImage(3))=1 then delete image CloudsImage(3)
      if Image exist(CloudsImage(4))=1 then delete image CloudsImage(4)
      if Image exist(CloudsImage(5))=1 then delete image CloudsImage(5)
      if object exist(CloudsObject)=1 then delete object CloudsObject
      if effect exist(CloudsEffect)=1 then Effect_Remove(CloudsEffect):delete effect CloudsEffect
      CloudsEnabled=0
      undim CloudsImage()
      undim CloudsData#()
   endif
endfunction

`--------------
` Set Clouds Scale
`--------------
function Clouds_Set_Scale(CloudScale#,Density#)
   if CloudsEnabled=1
      CloudsData#(1)=CloudScale#
      CloudsData#(2)=Density#
      set effect constant float CloudsEffect,"CloudScale",CloudsData#(1)
      set effect constant float CloudsEffect,"CloudDensity",CloudsData#(2)
   endif
endfunction

`--------------
` Set Clouds Noise
`--------------
function Clouds_Set_Noise(NoiseScale#,Noise#)
   if CloudsEnabled=1
      CloudsData#(9)=NoiseScale#
      CloudsData#(10)=Noise#
      set effect constant float CloudsEffect,"NoiseScale",CloudsData#(9)
      set effect constant float CloudsEffect,"NoiseAmount",CloudsData#(10)
   endif
endfunction

`--------------
` Set Clouds Alpha
`--------------
function Clouds_Set_Alpha(Alpha#)
   if CloudsEnabled=1
      CloudsData#(3)=Alpha#
      set effect constant float CloudsEffect,"CloudAlpha",CloudsData#(3)
   endif
endfunction

`--------------
` Set Clouds Speed
`--------------
function Clouds_Set_Speed(Speedx#,Speedz#)
   if CloudsEnabled=1
      CloudsData#(4)=Speedx#
      CloudsData#(5)=Speedz#
      set vector4 1,CloudsData#(4),CloudsData#(5),0,0
      set effect constant vector CloudsEffect,"CloudSpeed",1
   endif
endfunction

`--------------
` Set Clouds Color
`--------------
function Clouds_Set_Color(CloudR#,CloudG#,CloudB#)
   if CloudsEnabled=1
      CloudsData#(6)=CloudR#
      CloudsData#(7)=CloudG#
      CloudsData#(8)=CloudB#
      set vector4 1,CloudsData#(6)/255,CloudsData#(7)/255,CloudsData#(8)/255,1
      set effect constant vector CloudsEffect,"CloudColor",1
   endif
endfunction

`--------------
` Set Height
`--------------
function Clouds_Set_Height(Height#,Scale#)
   if CloudsEnabled=1
      CloudsData#(11)=Height#
      CloudsData#(12)=Scale#
   endif
endfunction

`--------------
` Set Clouds Visible
`--------------
function Clouds_Visible(Vis)
   if CloudsEnabled=1
      if Vis=1
         CloudsVisible=1
         exclude object off CloudsObject
         show object CloudsObject
      else
         CloudsVisible=0
         exclude object on CloudsObject
         hide object CloudsObject
      endif
   endif
endfunction

`====================================================
` Time Of Day Functions (Need sky)
`====================================================

`Time Of Day data
type TimeOfDaydata
   TODSkyCloudColorR#
   TODSkyCloudColorG#
   TODSkyCloudColorB#
   TODFogColorR#
   TODFogColorG#
   TODFogColorB#
   TODAmbientColorR#
   TODAmbientColorG#
   TODAmbientColorB#
   TODLightColorR#
   TODLightColorG#
   TODLightColorB#
   TODSkyColorR#
   TODSkyColorG#
   TODSkyColorB#
   TODSunColorR#
   TODSunColorG#
   TODSunColorB#
   TODWaterColorR#
   TODWaterColorG#
   TODWaterColorB#
   TODWaterLightColorR#
   TODWaterLightColorG#
   TODWaterLightColorB#
   TODSunTexture#
   TODDirLightAngX1#
   TODDirLightAngY1#
   TODDirLightAngZ1#
   TODDirLightAngX2#
   TODDirLightAngY2#
   TODDirLightAngZ2#
   TODSunScale#
endtype

`--------------
` Setup time of day
`--------------
function TimeOfDay_SetUp(TODFile$)
   if file exist(TODFile$)=1
      open to read 1,TODFile$
      read string 1,S$
      if Get_String_Key(S$)="Hours"
         global TimeOfDayEnabled=1
         global TimeOfDayHours:TimeOfDayHours=val(Get_String_Value(S$))
         global dim TimeOfDay(TimeOfDayHours) as TimeOfDaydata
         if SkyEnabled=1 then Sky_SetUp()
         repeat
         read string 1,h$
         if String_KeyValue(h$)=1
            if Get_String_Key(h$)="Hour"
               Hour=val(Get_String_Value(h$))
               if Hour<(TimeOfDayHours+1)
               read string 1,S$
                  if S$="{"
                     repeat
                     read string 1,S$
                     if String_KeyValue(S$)=1
                        Key$=Get_String_Key(S$)
                        Val$=Get_String_Value(S$)
                        if Key$="SkyColor"
                           TimeOfDay(Hour).TODSkyColorR#=Get_String_InValue(Val$,0)
                           TimeOfDay(Hour).TODSkyColorG#=Get_String_InValue(Val$,1)
                           TimeOfDay(Hour).TODSkyColorB#=Get_String_InValue(Val$,2)
                        endif
                        if Key$="FogColor"
                           TimeOfDay(Hour).TODFogColorR#=Get_String_InValue(Val$,0)
                           TimeOfDay(Hour).TODFogColorG#=Get_String_InValue(Val$,1)
                           TimeOfDay(Hour).TODFogColorB#=Get_String_InValue(Val$,2)
                        endif
                        if Key$="AmbientColor"
                           TimeOfDay(Hour).TODAmbientColorR#=Get_String_InValue(Val$,0)
                           TimeOfDay(Hour).TODAmbientColorG#=Get_String_InValue(Val$,1)
                           TimeOfDay(Hour).TODAmbientColorB#=Get_String_InValue(Val$,2)
                        endif
                       if Key$="DirLightColor"
                           TimeOfDay(Hour).TODLightColorR#=Get_String_InValue(Val$,0)
                           TimeOfDay(Hour).TODLightColorG#=Get_String_InValue(Val$,1)
                           TimeOfDay(Hour).TODLightColorB#=Get_String_InValue(Val$,2)
                        endif
                        if Key$="SunColor"
                           TimeOfDay(Hour).TODSunColorR#=Get_String_InValue(Val$,0)
                           TimeOfDay(Hour).TODSunColorG#=Get_String_InValue(Val$,1)
                           TimeOfDay(Hour).TODSunColorB#=Get_String_InValue(Val$,2)
                        endif
                        if Key$="SkyCloudColor"
                           TimeOfDay(Hour).TODSkyCloudColorR#=Get_String_InValue(Val$,0)
                           TimeOfDay(Hour).TODSkyCloudColorG#=Get_String_InValue(Val$,1)
                           TimeOfDay(Hour).TODSkyCloudColorB#=Get_String_InValue(Val$,2)
                        endif
                        if Key$="WaterColor"
                           TimeOfDay(Hour).TODWaterColorR#=Get_String_InValue(Val$,0)
                           TimeOfDay(Hour).TODWaterColorG#=Get_String_InValue(Val$,1)
                           TimeOfDay(Hour).TODWaterColorB#=Get_String_InValue(Val$,2)
                        endif
                        if Key$="WaterLightColor"
                           TimeOfDay(Hour).TODWaterLightColorR#=Get_String_InValue(Val$,0)
                           TimeOfDay(Hour).TODWaterLightColorG#=Get_String_InValue(Val$,1)
                           TimeOfDay(Hour).TODWaterLightColorB#=Get_String_InValue(Val$,2)
                        endif
                        if Key$="SunTexture"
                           TimeOfDay(Hour).TODSunTexture#=val(Val$)
                        endif
                        if Key$="DirLightAng1"
                           TimeOfDay(Hour).TODDirLightAngX1#=Get_String_InValue(Val$,0)
                           TimeOfDay(Hour).TODDirLightAngY1#=Get_String_InValue(Val$,1)
                           TimeOfDay(Hour).TODDirLightAngZ1#=Get_String_InValue(Val$,2)
                        endif
                        if Key$="DirLightAng2"
                           TimeOfDay(Hour).TODDirLightAngX2#=Get_String_InValue(Val$,0)
                           TimeOfDay(Hour).TODDirLightAngY2#=Get_String_InValue(Val$,1)
                           TimeOfDay(Hour).TODDirLightAngZ2#=Get_String_InValue(Val$,2)
                        endif
                        if Key$="SunScale"
                           TimeOfDay(Hour).TODSunScale#=val(Val$)
                        endif
                     endif
                     until S$="" or S$="}"
                  endif
               endif
            endif
         endif
         until h$=""
      endif
      close file 1
   endif
endfunction

`--------------
` Delete TimeOfDay
`--------------
function TimeOfDay_Delete()
   if TimeOfDayEnabled=1
      TimeOfDayEnabled=0
      undim TimeOfDay()
   endif
endfunction

`--------------
` Set Time Of Day time
`--------------
function TimeOfDay_SetTime(Time#)
   if TimeOfDayEnabled=1
      if Time#>(TimeOfDayHours+1) then Time#=(TimeOfDayHours+1)
      if Time#<0 then Time#=0
      Time1=int(Time#)
      Time2=int(Time#)+1
      if Time2>TimeOfDayHours then Time2=0
      R#=TimeOfDay(Time1).TODFogColorR#+((TimeOfDay(Time2).TODFogColorR#-TimeOfDay(Time1).TODFogColorR#)*(Time#-Time1))
      G#=TimeOfDay(Time1).TODFogColorG#+((TimeOfDay(Time2).TODFogColorG#-TimeOfDay(Time1).TODFogColorG#)*(Time#-Time1))
      B#=TimeOfDay(Time1).TODFogColorB#+((TimeOfDay(Time2).TODFogColorB#-TimeOfDay(Time1).TODFogColorB#)*(Time#-Time1))
      Global_Set_Fog(R#,G#,B#,Fog#(4),Fog#(5))
      R#=TimeOfDay(Time1).TODAmbientColorR#+((TimeOfDay(Time2).TODAmbientColorR#-TimeOfDay(Time1).TODAmbientColorR#)*(Time#-Time1))
      G#=TimeOfDay(Time1).TODAmbientColorG#+((TimeOfDay(Time2).TODAmbientColorG#-TimeOfDay(Time1).TODAmbientColorG#)*(Time#-Time1))
      B#=TimeOfDay(Time1).TODAmbientColorB#+((TimeOfDay(Time2).TODAmbientColorB#-TimeOfDay(Time1).TODAmbientColorB#)*(Time#-Time1))
      Global_Set_Ambient(R#,G#,B#,Ambient#(4)/2)
      R#=TimeOfDay(Time1).TODLightColorR#+((TimeOfDay(Time2).TODLightColorR#-TimeOfDay(Time1).TODLightColorR#)*(Time#-Time1))
      G#=TimeOfDay(Time1).TODLightColorG#+((TimeOfDay(Time2).TODLightColorG#-TimeOfDay(Time1).TODLightColorG#)*(Time#-Time1))
      B#=TimeOfDay(Time1).TODLightColorB#+((TimeOfDay(Time2).TODLightColorB#-TimeOfDay(Time1).TODLightColorB#)*(Time#-Time1))
      DirectionalLight_Set_Color(R#,G#,B#)
      if TimeOfDay(Time1).TODSunTexture#=0
         x#=TimeOfDay(Time1).TODDirLightAngX1#+((TimeOfDay(Time2).TODDirLightAngX1#-TimeOfDay(Time1).TODDirLightAngX1#)*(Time#-Time1))
         y#=TimeOfDay(Time1).TODDirLightAngY1#+((TimeOfDay(Time2).TODDirLightAngY1#-TimeOfDay(Time1).TODDirLightAngY1#)*(Time#-Time1))
         z#=TimeOfDay(Time1).TODDirLightAngZ1#+((TimeOfDay(Time2).TODDirLightAngZ1#-TimeOfDay(Time1).TODDirLightAngZ1#)*(Time#-Time1))
         DirectionalLight_Set_Rotation(x#,y#,z#)
      endif
      if TimeOfDay(Time1).TODSunTexture#=1
         x#=TimeOfDay(Time1).TODDirLightAngX2#+((TimeOfDay(Time2).TODDirLightAngX2#-TimeOfDay(Time1).TODDirLightAngX2#)*(Time#-Time1))
         y#=TimeOfDay(Time1).TODDirLightAngY2#+((TimeOfDay(Time2).TODDirLightAngY2#-TimeOfDay(Time1).TODDirLightAngY2#)*(Time#-Time1))
         z#=TimeOfDay(Time1).TODDirLightAngZ2#+((TimeOfDay(Time2).TODDirLightAngZ2#-TimeOfDay(Time1).TODDirLightAngZ2#)*(Time#-Time1))
         DirectionalLight_Set_Rotation(x#,y#,z#)
      endif
      R#=TimeOfDay(Time1).TODSkyColorR#+((TimeOfDay(Time2).TODSkyColorR#-TimeOfDay(Time1).TODSkyColorR#)*(Time#-Time1))
      G#=TimeOfDay(Time1).TODSkyColorG#+((TimeOfDay(Time2).TODSkyColorG#-TimeOfDay(Time1).TODSkyColorG#)*(Time#-Time1))
      B#=TimeOfDay(Time1).TODSkyColorB#+((TimeOfDay(Time2).TODSkyColorB#-TimeOfDay(Time1).TODSkyColorB#)*(Time#-Time1))
      Sky_Set_SkyColor(R#,G#,B#)
      R#=TimeOfDay(Time1).TODSunColorR#+((TimeOfDay(Time2).TODSunColorR#-TimeOfDay(Time1).TODSunColorR#)*(Time#-Time1))
      G#=TimeOfDay(Time1).TODSunColorG#+((TimeOfDay(Time2).TODSunColorG#-TimeOfDay(Time1).TODSunColorG#)*(Time#-Time1))
      B#=TimeOfDay(Time1).TODSunColorB#+((TimeOfDay(Time2).TODSunColorB#-TimeOfDay(Time1).TODSunColorB#)*(Time#-Time1))
      Sky_Set_SunColor(R#,G#,B#)
      R#=TimeOfDay(Time1).TODSkyCloudColorR#+((TimeOfDay(Time2).TODSkyCloudColorR#-TimeOfDay(Time1).TODSkyCloudColorR#)*(Time#-Time1))
      G#=TimeOfDay(Time1).TODSkyCloudColorG#+((TimeOfDay(Time2).TODSkyCloudColorG#-TimeOfDay(Time1).TODSkyCloudColorG#)*(Time#-Time1))
      B#=TimeOfDay(Time1).TODSkyCloudColorB#+((TimeOfDay(Time2).TODSkyCloudColorB#-TimeOfDay(Time1).TODSkyCloudColorB#)*(Time#-Time1))
      Clouds_Set_Color(R#,G#,B#)
      if SkyEnabled=1
         if TimeOfDay(Time1).TODSunTexture#=0 and SunTex=1
            texture object SkyObject,1,SkyImage(2)
            SunTex=0
         endif
         if TimeOfDay(Time1).TODSunTexture#=1 and SunTex=0
            texture object SkyObject,1,SkyImage(3)
            SunTex=1
         endif
         SkyData#(7)=TimeOfDay(Time1).TODSunScale#+((TimeOfDay(Time2).TODSunScale#-TimeOfDay(Time1).TODSunScale#)*(Time#-Time1))
      endif
      R#=TimeOfDay(Time1).TODWaterColorR#+((TimeOfDay(Time2).TODWaterColorR#-TimeOfDay(Time1).TODWaterColorR#)*(Time#-Time1))
      G#=TimeOfDay(Time1).TODWaterColorG#+((TimeOfDay(Time2).TODWaterColorG#-TimeOfDay(Time1).TODWaterColorG#)*(Time#-Time1))
      B#=TimeOfDay(Time1).TODWaterColorB#+((TimeOfDay(Time2).TODWaterColorB#-TimeOfDay(Time1).TODWaterColorB#)*(Time#-Time1))
      Water_Set_Color(R#,G#,B#)
      R#=TimeOfDay(Time1).TODWaterLightColorR#+((TimeOfDay(Time2).TODWaterLightColorR#-TimeOfDay(Time1).TODWaterLightColorR#)*(Time#-Time1))
      G#=TimeOfDay(Time1).TODWaterLightColorG#+((TimeOfDay(Time2).TODWaterLightColorG#-TimeOfDay(Time1).TODWaterLightColorG#)*(Time#-Time1))
      B#=TimeOfDay(Time1).TODWaterLightColorB#+((TimeOfDay(Time2).TODWaterLightColorB#-TimeOfDay(Time1).TODWaterLightColorB#)*(Time#-Time1))
      Water_Set_LightColor(R#,G#,B#)
   endif
endfunction

`====================================================
` Material System Functions
`====================================================

`Material data
type MaterialsData
   TextureName$
   ShaderPath$
   TexturePath0$
   TextureType0
   TexturePath1$
   TextureType1
   TexturePath2$
   TextureType2
   TexturePath3$
   TextureType3
   TexturePath4$
   TextureType4
   TexturePath5$
   TextureType5
endtype


`Material data
type MaterialData
   Name$
   Number
endtype

`--------------
` Load Material
`--------------
function Material_Load(File$)
   if AdvancedLightingEnabled=1
   if file exist(File$)=1
      if MaterialsEnabled=0
         global MaterialsEnabled=1
         global MaterialsCount
         global MaterialShaderCount
         global MaterialTextureCount
         global dim Materials() as MaterialsData
         global dim MaterialShader(1) as MaterialData
         global dim MaterialTexture(1) as MaterialData
      endif
      open to read 1,File$
      repeat
      read string 1,N$
      if String_KeyValue(N$)=1
      if Get_String_Key(N$)="texturename"
         array insert at bottom Materials()
         Materials(MaterialsCount).TextureName$=Get_String_Value(N$)
         read string 1,S$
            if S$="{"
               repeat
               read string 1,S$
               if String_KeyValue(S$)=1
                  Key$=lower$(Get_String_Key(S$))
                  Val$=lower$(Get_String_Value(S$))
        if lower$(right$(Val$,12))<>"lightmap.png" and Val$<>""
                     if Key$="shader"
                        Materials(MaterialsCount).ShaderPath$=Val$
                     endif
                     if Key$="stage0"
                        Materials(MaterialsCount).TexturePath0$=Val$
                        Materials(MaterialsCount).TextureType0=0
                     endif
                     if Key$="stage0cube"
                        Materials(MaterialsCount).TexturePath0$=Val$
                        Materials(MaterialsCount).TextureType0=2
                     endif
                     if Key$="stage0volume"
                        Materials(MaterialsCount).TexturePath0$=Val$
                        Materials(MaterialsCount).TextureType0=3
                     endif
                     if Key$="stage1"
                        Materials(MaterialsCount).TexturePath1$=Val$
                        Materials(MaterialsCount).TextureType1=0
                     endif
                     if Key$="stage1cube"
                        Materials(MaterialsCount).TexturePath1$=Val$
                        Materials(MaterialsCount).TextureType1=2
                     endif
                     if Key$="stage1volume"
                        Materials(MaterialsCount).TexturePath1$=Val$
                        Materials(MaterialsCount).TextureType1=3
                     endif
                     if Key$="stage2"
                        Materials(MaterialsCount).TexturePath2$=Val$
                        Materials(MaterialsCount).TextureType2=0
                     endif
                     if Key$="stage2cube"
                        Materials(MaterialsCount).TexturePath2$=Val$
                        Materials(MaterialsCount).TextureType2=2
                     endif
                     if Key$="stage2volume"
                        Materials(MaterialsCount).TexturePath2$=Val$
                        Materials(MaterialsCount).TextureType2=3
                     endif
                     if Key$="stage3"
                        Materials(MaterialsCount).TexturePath3$=Val$
                        Materials(MaterialsCount).TextureType3=0
                     endif
                     if Key$="stage3cube"
                        Materials(MaterialsCount).TexturePath3$=Val$
                        Materials(MaterialsCount).TextureType3=2
                     endif
                     if Key$="stage3volume"
                        Materials(MaterialsCount).TexturePath3$=Val$
                        Materials(MaterialsCount).TextureType3=3
                     endif
                     if Key$="stage4"
                        Materials(MaterialsCount).TexturePath4$=Val$
                        Materials(MaterialsCount).TextureType4=0
                     endif
                     if Key$="stage4cube"
                        Materials(MaterialsCount).TexturePath4$=Val$
                        Materials(MaterialsCount).TextureType4=2
                     endif
                     if Key$="stage4volume"
                        Materials(MaterialsCount).TexturePath4$=Val$
                        Materials(MaterialsCount).TextureType4=3
                     endif
                     if Key$="stage5"
                        Materials(MaterialsCount).TexturePath5$=Val$
                        Materials(MaterialsCount).TextureType5=0
                     endif
                     if Key$="stage5cube"
                        Materials(MaterialsCount).TexturePath5$=Val$
                        Materials(MaterialsCount).TextureType5=2
                     endif
                     if Key$="stage5volume"
                        Materials(MaterialsCount).TexturePath5$=Val$
                        Materials(MaterialsCount).TextureType5=3
                     endif
                  endif
               endif
               until S$="" or S$="}"
            endif
         inc MaterialsCount
      endif
      endif
      until N$=""
      close file 1
   endif
   endif
endfunction

`--------------
` Apply Materials to obejct
`--------------
function Material_Apply(obj)
   if MaterialsEnabled=1
      lm=0
      repeat
         Tname$=limb texture name(obj,lm)
         mid=0
         repeat
           inc mid
         until mid$(Tname$,len(Tname$)-mid)="/" or mid$(Tname$,len(Tname$)-mid)="\" or mid$(Tname$,len(Tname$)-mid)=""
         Tname$=Right$(Tname$,mid)
         Material_ApplyLimb(obj,lm,Tname$)
         inc lm
      until limb exist(obj,lm)=0
      Object_Add(obj)
   endif
endfunction

`--------------
` Apply Materials to limb
`--------------
function Material_ApplyLimb(obj,lm,Tname$)
   if MaterialsEnabled=1
      for m=0 to MaterialsCount-1
         if Materials(m).TextureName$=Tname$
            if Materials(m).ShaderPath$<>""
               Shader=0
               for s=0 to MaterialShaderCount-1
                   if MaterialShader(s).Name$=Materials(m).ShaderPath$
                      set limb effect obj,lm,MaterialShader(s).Number
                      Shader=1
                      exit
                   endif
               next s
               if Shader=0
                  array insert at bottom MaterialShader()
                  MaterialShader(MaterialShaderCount).Name$=Materials(m).ShaderPath$
                  MaterialShader(MaterialShaderCount).Number=Find_Free_Effect()
                  load effect MaterialShader(MaterialShaderCount).Name$,MaterialShader(MaterialShaderCount).Number,0
                  Effect_Add(MaterialShader(MaterialShaderCount).Number)
                  set limb effect obj,lm,MaterialShader(MaterialShaderCount).Number
                  inc MaterialShaderCount
               endif
            endif
            if Materials(m).TexturePath0$<>""
               Texture=0
               for t=0 to  MaterialTextureCount-1
                   if MaterialTexture(t).Name$=Materials(m).TexturePath0$
                      texture limb obj,lm,0,MaterialTexture(t).Number
                      Texture=1
                      exit
                   endif
               next t
               if Texture=0
                  array insert at bottom MaterialTexture()
                  MaterialTexture(MaterialTextureCount).Name$=Materials(m).TexturePath0$
                  MaterialTexture(MaterialTextureCount).Number=Find_Free_Image()
                  load image MaterialTexture(MaterialTextureCount).Name$,MaterialTexture(MaterialTextureCount).Number,Materials(m).TextureType0
                  texture limb obj,lm,0,MaterialTexture(MaterialTextureCount).Number
                  inc MaterialTextureCount
               endif
            endif
            if Materials(m).TexturePath1$<>""
               Texture=0
               for t=0 to  MaterialTextureCount-1
                   if MaterialTexture(t).Name$=Materials(m).TexturePath1$
                      texture limb obj,lm,1,MaterialTexture(t).Number
                      Texture=1
                      exit
                   endif
               next t
               if Texture=0
                  array insert at bottom MaterialTexture()
                  MaterialTexture(MaterialTextureCount).Name$=Materials(m).TexturePath1$
                  MaterialTexture(MaterialTextureCount).Number=Find_Free_Image()
                  load image MaterialTexture(MaterialTextureCount).Name$,MaterialTexture(MaterialTextureCount).Number,Materials(m).TextureType1
                  texture limb obj,lm,1,MaterialTexture(MaterialTextureCount).Number
                  inc MaterialTextureCount
               endif
            endif
            if Materials(m).TexturePath2$<>""
               Texture=0
               for t=0 to  MaterialTextureCount-1
                   if MaterialTexture(t).Name$=Materials(m).TexturePath2$
                      texture limb obj,lm,2,MaterialTexture(t).Number
                      Texture=1
                      exit
                   endif
               next t
               if Texture=0
                  array insert at bottom MaterialTexture()
                  MaterialTexture(MaterialTextureCount).Name$=Materials(m).TexturePath2$
                  MaterialTexture(MaterialTextureCount).Number=Find_Free_Image()
                  load image MaterialTexture(MaterialTextureCount).Name$,MaterialTexture(MaterialTextureCount).Number,Materials(m).TextureType2
                  texture limb obj,lm,2,MaterialTexture(MaterialTextureCount).Number
                  inc MaterialTextureCount
               endif
            endif
            if Materials(m).TexturePath3$<>""
               Texture=0
               for t=0 to  MaterialTextureCount-1
                   if MaterialTexture(t).Name$=Materials(m).TexturePath3$
                     texture limb obj,lm,3,MaterialTexture(t).Number
                     Texture=1
                     exit
                   endif
               next t
               if Texture=0
                  array insert at bottom MaterialTexture()
                  MaterialTexture(MaterialTextureCount).Name$=Materials(m).TexturePath3$
                  MaterialTexture(MaterialTextureCount).Number=Find_Free_Image()
                  load image MaterialTexture(MaterialTextureCount).Name$,MaterialTexture(MaterialTextureCount).Number,Materials(m).TextureType3
                  texture limb obj,lm,3,MaterialTexture(MaterialTextureCount).Number
                  inc MaterialTextureCount
               endif
            endif
            if Materials(m).TexturePath4$<>""
               Texture=0
               for t=0 to  MaterialTextureCount-1
                   if MaterialTexture(t).Name$=Materials(m).TexturePath4$
                      texture limb obj,lm,4,MaterialTexture(t).Number
                      Texture=1
                      exit
                   endif
               next t
               if Texture=0
                  array insert at bottom MaterialTexture()
                  MaterialTexture(MaterialTextureCount).Name$=Materials(m).TexturePath4$
                  MaterialTexture(MaterialTextureCount).Number=Find_Free_Image()
                  load image MaterialTexture(MaterialTextureCount).Name$,MaterialTexture(MaterialTextureCount).Number,Materials(m).TextureType4
                  texture limb obj,lm,4,MaterialTexture(MaterialTextureCount).Number
                  inc MaterialTextureCount
               endif
            endif
            if Materials(m).TexturePath5$<>""
               Texture=0
               for t=0 to  MaterialTextureCount-1
                  if MaterialTexture(t).Name$=Materials(m).TexturePath5$
                     texture limb obj,lm,5,MaterialTexture(t).Number
                     Texture=1
                     exit
                  endif
               next t
               if Texture=0
                  array insert at bottom MaterialTexture()
                  MaterialTexture(MaterialTextureCount).Name$=Materials(m).TexturePath5$
                  MaterialTexture(MaterialTextureCount).Number=Find_Free_Image()
                  load image MaterialTexture(MaterialTextureCount).Name$,MaterialTexture(MaterialTextureCount).Number,Materials(m).TextureType5
                  texture limb obj,lm,5,MaterialTexture(MaterialTextureCount).Number
                  inc MaterialTextureCount
               endif
            endif
         endif
      next m
   endif
endfunction

`--------------
` Delete Materials
`--------------
function Material_Delete()
   if MaterialsEnabled=1
      for s=MaterialShaderStart to MaterialShaderEnd-1
         if effect exist(s)=1
            Effect_Remove(s)
            delete effect s
         endif
      next s
      for t=MaterialTextureStart to MaterialTextureEnd-1
         if image exist(t)=1 then delete image t
      next t
      MaterialsEnabled=0
      MaterialsCount=0
      MaterialShaderStart=0
      MaterialShaderEnd=0
      MaterialTextureStart=0
      MaterialTextureEnd=0
      undim Materials()
      undim MaterialShaderName$()
      undim MaterialTextureName$()
   endif
endfunction

`====================================================
` Emitter/Particle Functions
`====================================================

`Emitter data
type EmitterData
   InUse
   Object
   Effect
   Visible
   Looplife#
   Playlife#
   Stoplife
   FrustumCullSize#
   Particles
   ParticleStart
   Emission#
   PositionX#
   PositionY#
   PositionZ#
   OffsetPositionX#
   OffsetPositionY#
   OffsetPositionZ#
   AngleX#
   AngleY#
   AngleZ#
   OffsetAngleX#
   OffsetAngleY#
   OffsetAngleZ#
   ParticleLife#
   ParticleEmission#
   ParticleCurveScale#
   ParticleCurveDirection#
   ParticleCurveVelocity#
   ParticleCurveColor#
endtype

`Particle data
type ParticleData
   Update
   Life#
   Gravity#
   GravityPower#
   WindPower#
   Alpha#
   CurrentAlpha#
   AlphaStart
   PositionX#
   PositionY#
   PositionZ#
   RndPositionX#
   RndPositionY#
   RndPositionZ#
   StartRndAngleX#
   StartRndAngleY#
   StartRndAngleZ#
   AngleX#
   AngleY#
   AngleZ#
   RndAngleX#
   RndAngleY#
   RndAngleZ#
   CurrentDirectionX#
   DestinationDirectionX#
   CurrentDirectionY#
   DestinationDirectionY#
   CurrentDirectionZ#
   DestinationDirectionZ#
   Scale#
   CurrentScale#
   DestinationScale#
   Velocity#
   CurrentVelocity#
   DestinationVelocity#
   ColorR#
   CurrentColorR#
   DestinationColorR#
   ColorG#
   CurrentColorG#
   DestinationColorG#
   ColorB#
   CurrentColorB#
   DestinationColorB#
endtype

`Particle data
type FileEmitterData
   InUse
   EmitterStart
   EmitterEnd
endtype

`--------------
` Emitter UpDate
`--------------
function Emitter_UpDate(iTimer#)

`FrustumCull----
   FrustumCull_GetViewProject(0)
`---------------

if EmitterCount>0

   `Play/Loop/Stop Emitters
      me=0
      for e=0 to array count(EmitterVisible())
         if Emitter(EmitterVisible(e-me)).Playlife#>0 then dec Emitter(EmitterVisible(e-me)).Playlife#,iTimer#
         if Emitter(EmitterVisible(e-me)).Playlife#<0 then Emitter(EmitterVisible(e-me)).Playlife#=0
         if Emitter(EmitterVisible(e-me)).Stoplife=2 and Emitter(EmitterVisible(e-me)).Playlife#=0
            Emitter(EmitterVisible(e-me)).Looplife#=Emitter(EmitterVisible(e-me)).ParticleLife#
            Emitter(EmitterVisible(e-me)).Stoplife=1
         endif
         if Emitter(EmitterVisible(e-me)).Looplife#>0 then dec Emitter(EmitterVisible(e-me)).Looplife#,iTimer#
         if Emitter(EmitterVisible(e-me)).Looplife#<0 then Emitter(EmitterVisible(e-me)).Looplife#=0
         if Emitter(EmitterVisible(e-me)).Stoplife=1 and Emitter(EmitterVisible(e-me)).Looplife#=0
            Emitter(EmitterVisible(e-me)).Stoplife=0
            Emitter_Visible(EmitterVisible(e-me),0)
            inc me
         endif
      next e

   `Emitters
      for e=0 to array count(EmitterVisible())
         if Emitter(EmitterVisible(e)).FrustumCullSize#>0 then Cull=FrustumCull_Sphere(Emitter(EmitterVisible(e)).PositionX#+Emitter(EmitterVisible(e)).OffsetPositionX#,Emitter(EmitterVisible(e)).PositionY#+Emitter(EmitterVisible(e)).OffsetPositionY#,Emitter(EmitterVisible(e)).PositionZ#+Emitter(EmitterVisible(e)).OffsetPositionZ#,Emitter(EmitterVisible(e)).FrustumCullSize#)
         if Emitter(EmitterVisible(e)).FrustumCullSize#=0 then Cull=1
         if Cull=1
            null=get object effect(Emitter(EmitterVisible(e)).Object,-1)
            position object Emitter(EmitterVisible(e)).Object,Emitter(EmitterVisible(e)).PositionX#+Emitter(EmitterVisible(e)).OffsetPositionX#,Emitter(EmitterVisible(e)).PositionY#+Emitter(EmitterVisible(e)).OffsetPositionY#,Emitter(EmitterVisible(e)).PositionZ#+Emitter(EmitterVisible(e)).OffsetPositionZ#
            exclude object off Emitter(EmitterVisible(e)).Object
         else
            exclude object on Emitter(EmitterVisible(e)).Object
         endif

      `Particles
         for p=0 to Emitter(EmitterVisible(e)).Particles
            Particle=p+Emitter(EmitterVisible(e)).ParticleStart

         `ReSet Particles
            if Particle(Particle).Life#>Emitter(EmitterVisible(e)).ParticleLife#
               Particle(Particle).Update=1
               Particle(Particle).Life#=-(Particle(Particle).Life#-Emitter(EmitterVisible(e)).ParticleLife#)
               Particle(Particle).PositionX#=Emitter(EmitterVisible(e)).PositionX#+Particle(Particle).RndPositionX#+Emitter(EmitterVisible(e)).OffsetPositionX#
               Particle(Particle).PositionY#=Emitter(EmitterVisible(e)).PositionY#+Particle(Particle).RndPositionY#+Emitter(EmitterVisible(e)).OffsetPositionY#
               Particle(Particle).PositionZ#=Emitter(EmitterVisible(e)).PositionZ#+Particle(Particle).RndPositionZ#+Emitter(EmitterVisible(e)).OffsetPositionZ#
               NRndAngX#=(rnd(Particle(Particle).StartRndAngleX#*100)/100)-(Particle(Particle).StartRndAngleX#/2)
               NRndAngY#=(rnd(Particle(Particle).StartRndAngleY#*100)/100)-(Particle(Particle).StartRndAngleY#/2)
               NRndAngZ#=(rnd(Particle(Particle).StartRndAngleZ#*100)/100)-(Particle(Particle).StartRndAngleZ#/2)
               NewAngleX#=wrapvalue(Emitter(EmitterVisible(e)).AngleX#+Emitter(EmitterVisible(e)).OffsetAngleX#+NRndAngX#)
               NewAngleY#=wrapvalue(Emitter(EmitterVisible(e)).AngleY#+Emitter(EmitterVisible(e)).OffsetAngleY#+NRndAngY#)
               NewAngleZ#=wrapvalue(Emitter(EmitterVisible(e)).AngleZ#+Emitter(EmitterVisible(e)).OffsetAngleZ#+NRndAngZ#)
               rotate x matrix4 3,-NewAngleX#/57.3
               rotate y matrix4 4,-NewAngleY#/57.3
               rotate z matrix4 5,-NewAngleZ#/57.3
               multiply matrix4 3,3,4:multiply matrix4 3,3,5
               set vector3 2,0,0,1:transform normals vector3 2,2,3
               Particle(Particle).CurrentDirectionX#=x vector3(2)
               Particle(Particle).CurrentDirectionY#=y vector3(2)
               Particle(Particle).CurrentDirectionZ#=z vector3(2)
               NRndAngX#=NRndAngX#+((rnd(Particle(Particle).RndAngleX#*100)/100)-(Particle(Particle).RndAngleX#/2))
               NRndAngY#=NRndAngY#+((rnd(Particle(Particle).RndAngleY#*100)/100)-(Particle(Particle).RndAngleY#/2))
               NRndAngZ#=NRndAngZ#+((rnd(Particle(Particle).RndAngleZ#*100)/100)-(Particle(Particle).RndAngleZ#/2))
               rotate x matrix4 3,-wrapvalue(Emitter(EmitterVisible(e)).AngleX#+Emitter(EmitterVisible(e)).OffsetAngleX#+Particle(Particle).AngleX#+NRndAngX#)/57.3
               rotate y matrix4 4,-wrapvalue(Emitter(EmitterVisible(e)).AngleY#+Emitter(EmitterVisible(e)).OffsetAngleY#+Particle(Particle).AngleY#+NRndAngY#)/57.3
               rotate z matrix4 5,-wrapvalue(Emitter(EmitterVisible(e)).AngleZ#+Emitter(EmitterVisible(e)).OffsetAngleZ#+Particle(Particle).AngleZ#+NRndAngZ#)/57.3
               multiply matrix4 3,3,4:multiply matrix4 3,3,5
               set vector3 2,0,0,1:transform normals vector3 2,2,3
               Particle(Particle).DestinationDirectionX#=x vector3(2)
               Particle(Particle).DestinationDirectionY#=y vector3(2)
               Particle(Particle).DestinationDirectionZ#=z vector3(2)
               Particle(Particle).Gravity#=0
               Particle(Particle).CurrentAlpha#=1
               Particle(Particle).CurrentScale#=Particle(Particle).Scale#
               Particle(Particle).CurrentVelocity#=Particle(Particle).Velocity#
               Particle(Particle).CurrentColorR#=Particle(Particle).ColorR#
               Particle(Particle).CurrentColorG#=Particle(Particle).ColorG#
               Particle(Particle).CurrentColorB#=Particle(Particle).ColorB#
               if Emitter(EmitterVisible(e)).Looplife#>0 then Particle(Particle).Update=0
            endif

         `Update Particles
            if Particle(Particle).Update=1
               if Particle(Particle).Life#>Particle(Particle).AlphaStart
                  Particle(Particle).CurrentAlpha#=(Emitter(EmitterVisible(e)).ParticleLife#-((Particle(Particle).Life#-Particle(Particle).AlphaStart)/(1-Particle(Particle).Alpha#)))/Emitter(EmitterVisible(e)).ParticleLife#
               endif
               Particle(Particle).CurrentScale#=curvevalue(Particle(Particle).DestinationScale#,Particle(Particle).CurrentScale#,Emitter(EmitterVisible(e)).ParticleCurveScale#/iTimer#)
               Particle(Particle).CurrentVelocity#=curvevalue(Particle(Particle).DestinationVelocity#,Particle(Particle).CurrentVelocity#,Emitter(EmitterVisible(e)).ParticleCurveVelocity#/iTimer#)
               Particle(Particle).CurrentDirectionX#=curvevalue(Particle(Particle).DestinationDirectionX#,Particle(Particle).CurrentDirectionX#,Emitter(EmitterVisible(e)).ParticleCurveDirection#/iTimer#)
               Particle(Particle).CurrentDirectionY#=curvevalue(Particle(Particle).DestinationDirectionY#,Particle(Particle).CurrentDirectionY#,Emitter(EmitterVisible(e)).ParticleCurveDirection#/iTimer#)
               Particle(Particle).CurrentDirectionZ#=curvevalue(Particle(Particle).DestinationDirectionZ#,Particle(Particle).CurrentDirectionZ#,Emitter(EmitterVisible(e)).ParticleCurveDirection#/iTimer#)
               Particle(Particle).CurrentColorR#=curvevalue(Particle(Particle).DestinationColorR#,Particle(Particle).CurrentColorR#,Emitter(EmitterVisible(e)).ParticleCurveColor#/iTimer#)
               Particle(Particle).CurrentColorG#=curvevalue(Particle(Particle).DestinationColorG#,Particle(Particle).CurrentColorG#,Emitter(EmitterVisible(e)).ParticleCurveColor#/iTimer#)
               Particle(Particle).CurrentColorB#=curvevalue(Particle(Particle).DestinationColorB#,Particle(Particle).CurrentColorB#,Emitter(EmitterVisible(e)).ParticleCurveColor#/iTimer#)
               Particle(Particle).Gravity#=Particle(Particle).Gravity#+((Gravity#*Particle(Particle).GravityPower#)*iTimer#)
               Particle(Particle).PositionX#=Particle(Particle).PositionX#+(Particle(Particle).CurrentDirectionX#*(Particle(Particle).CurrentVelocity#*iTimer#))+((EmitterWindX#*Particle(Particle).WindPower#)*iTimer#)
               Particle(Particle).PositionY#=Particle(Particle).PositionY#+(Particle(Particle).CurrentDirectionY#*(Particle(Particle).CurrentVelocity#*iTimer#))-(Particle(Particle).Gravity#*iTimer#)
               Particle(Particle).PositionZ#=Particle(Particle).PositionZ#+(Particle(Particle).CurrentDirectionZ#*(Particle(Particle).CurrentVelocity#*iTimer#))+((EmitterWindZ#*Particle(Particle).WindPower#)*iTimer#)
               if Cull=1
                  set vector4 1,Particle(Particle).PositionX#,Particle(Particle).PositionY#,Particle(Particle).PositionZ#,Particle(Particle).CurrentScale#
                  set effect constant vector element "ParticlePosition",p,1
                  set vector4 1,Particle(Particle).CurrentColorR#/255,Particle(Particle).CurrentColorG#/255,Particle(Particle).CurrentColorB#/255,Particle(Particle).CurrentAlpha#
                  set effect constant vector element "ParticleColor",p,1
               endif
            endif
            inc Particle(Particle).Life#,iTimer#
         next p
         if Cull=1 then release effect pointer
      next e

   `-------

endif
endfunction

`--------------
` Create Emitter
`--------------
function Emitter_Create(Shader$,Texture$,FrustumCullSize#,Particles#,Life#,Emission#)
   if EmitterCount=0
      `--------------
      Null=make vector4(1)
      Null=make vector3(2)
      Null=make matrix4(3)
      Null=make matrix4(4)
      Null=make matrix4(5)
      global dim ViewProjectFrustum#(5,3)
      global dim ViewProject#(15)
      `--------------
      global EmitterCount
      global ParticleCount
      global Gravity#=0.025
      global EmitterWindX#
      global EmitterWindZ#
      global dim Emitter() as EmitterData
      global dim Particle() as ParticleData
      global dim EmitterVisible()
      Emitter_GlobalWind(45,1.0)
   endif
   Emitter=-1
   if Particles#>0 and Particles#<101
      for e=0 to EmitterCount-1
         if Emitter(e).InUse=0 then Emitter=e
      next e
      if Emitter=-1
         array insert at bottom Emitter()
         Emitter=EmitterCount
         inc EmitterCount
      endif
      Emitter(Emitter).InUse=1
      Emitter(Emitter).Object=Find_Free_Object()
      Emitter(Emitter).Effect=Find_Free_Effect()
      Emitter(Emitter).Visible=-1
      Emitter(Emitter).FrustumCullSize#=FrustumCullSize#
      Emitter(Emitter).ParticleLife#=Life#
      Emitter(Emitter).Particles=Particles#-1
      Emitter(Emitter).ParticleStart=ParticleCount
      Emitter(Emitter).Emission#=(Emission#/100)
      for p=0 to Particles#-1
         array insert at bottom Particle()
         Particle(ParticleCount).Life#=(Life#-(p*((Life#/(Particles#-1))*(Emission#/100))))
         inc ParticleCount
      next p
      Emitter_MakeObject(Emitter(Emitter).Object,Particles#)
      load effect Shader$,Emitter(Emitter).Effect,0,1
      set object effect Emitter(Emitter).Object,Emitter(Emitter).Effect
      texture object Emitter(Emitter).Object,0,Find_Used_Image(Texture$)
      texture object Emitter(Emitter).Object,1,AdvancedLightingImage(1)
      set object transparency Emitter(Emitter).Object,2
      disable object zwrite Emitter(Emitter).Object
      set object mask Emitter(Emitter).Object,(2^FrameCamera)+(2^RefractionCamera)+(2^ReflectionCamera)
   endif
endfunction Emitter

`--------------
` Emitter Set Wind
`--------------
function Emitter_GlobalWind(WindAng#,WindPower#)
   rotate x matrix4 3,0
   rotate y matrix4 4,-(WindAng#)/57.3
   rotate z matrix4 5,0
   multiply matrix4 3,3,4:multiply matrix4 3,3,5
   set vector3 2,0,0,1:transform normals vector3 2,2,3
   EmitterWindX#=x vector3(2)*WindPower#
   EmitterWindZ#=z vector3(2)*WindPower#
endfunction

`--------------
` Delete Emitter
`--------------
function Emitter_Delete(Emitter)
if Emitter>-1 and Emitter<EmitterCount
   if Emitter(Emitter).InUse=1
      Emitter_Visible(Emitter,0)
      delete object Emitter(Emitter).Object
      delete effect Emitter(Emitter).Effect
      for p=0 to Emitter(Emitter).Particles
         array delete element Particle(),Emitter(Emitter).ParticleStart
         dec ParticleCount
      next p
      for e=0 to EmitterCount-1
         if e>Emitter
            if Emitter(e).InUse=1 then Emitter(e).ParticleStart=Emitter(e).ParticleStart-(Emitter(Emitter).Particles+1)
         endif
      next e
      Emitter(Emitter).InUse=0
      Emitter(Emitter).Visible=0
      Emitter(Emitter).ParticleStart=0
   endif
endif
endfunction

`--------------
` Make Emitter Object
`--------------
function Emitter_MakeObject(Obj,Particles)
   Vertex=((Particles*3)*2)
   Make Memblock 1,(Vertex*40)+12
   Write Memblock Dword 1,0,(0x002 || 0x010 || 0x200)
   Write Memblock Dword 1,4,40
   Write Memblock Dword 1,8,Vertex
   make mesh from memblock 1,1
   delete memblock 1
   make object Obj,1,0
   set object normals Obj
   delete mesh 1
   make mesh from object 1,Obj
   delete object Obj
   Vertex=0:Index=0
   lock vertexdata for mesh 1
   for p=0 to Particles
      set indexdata Vertex,Index+0:inc Vertex
      set indexdata Vertex,Index+1:inc Vertex
      set indexdata Vertex,Index+2:inc Vertex
      set indexdata Vertex,Index+1:inc Vertex
      set indexdata Vertex,Index+3:inc Vertex
      set indexdata Vertex,Index+2:inc Vertex
      ang#=rnd(360)
      set vertexdata uv Index,0,1,0
      set vertexdata uv Index,1,p,ang#/57.3:inc Index
      set vertexdata uv Index,0,0,0
      set vertexdata uv Index,1,p,ang#/57.3:inc Index
      set vertexdata uv Index,0,1,1
      set vertexdata uv Index,1,p,ang#/57.3:inc Index
      set vertexdata uv Index,0,0,1
      set vertexdata uv Index,1,p,ang#/57.3:inc Index
   next p
   delete mesh from vertexdata Index,get vertexdata vertex count()-1,0,0
   unlock vertexdata
   make object Obj,1,0
   convert object fvf Obj,(0x002 || 0x200)
endfunction

`--------------
` Set Emitter Visible
`--------------
function Emitter_Visible(Emitter,Vis)
if Emitter>-1 and Emitter<EmitterCount
   if Vis=1 and Emitter(Emitter).Visible=-1
      array insert at bottom EmitterVisible()
      EmitterVisible(array count(EmitterVisible()))=Emitter
      Emitter(Emitter).Visible=array count(EmitterVisible())
      show object Emitter(Emitter).Object
      exclude object off Emitter(Emitter).Object
   endif
   if Vis=0 and Emitter(Emitter).Visible>-1
      array delete element EmitterVisible(),Emitter(Emitter).Visible
      for de=0 to EmitterCount-1
         if Emitter(de).Visible>Emitter(Emitter).Visible
            dec Emitter(de).Visible
         endif
      next de
      Emitter(Emitter).Visible=-1
      hide object Emitter(Emitter).Object
      exclude object on Emitter(Emitter).Object
   endif
endif
endfunction

`--------------
` Emitter Loop
`--------------
function Emitter_Loop(Emitter)
if Emitter>-1 and Emitter<EmitterCount
   Emitter(Emitter).Playlife#=0
   Emitter(Emitter).Looplife#=0
   Emitter(Emitter).Stoplife=0
   if Emitter(Emitter).Visible=-1 then Emitter_Visible(Emitter,1)
endif
endfunction

`--------------
` Emitter Play
`--------------
function Emitter_Play(Emitter)
if Emitter>-1 and Emitter<EmitterCount
   Emitter(Emitter).Playlife#=Emitter(Emitter).ParticleLife#*Emitter(Emitter).Emission#
   Emitter(Emitter).Looplife#=0
   Emitter(Emitter).Stoplife=2
   if Emitter(Emitter).Visible=-1 then Emitter_Visible(Emitter,1)
endif
endfunction

`--------------
` Emitter Stop
`--------------
function Emitter_Stop(Emitter)
if Emitter>-1 and Emitter<EmitterCount
   if Emitter(Emitter).Looplife#=0
      Emitter(Emitter).Looplife#=Emitter(Emitter).ParticleLife#
      Emitter(Emitter).Stoplife=1
   endif
endif
endfunction

`--------------
` Emitter Position
`--------------
function Emitter_Set_Position(Emitter,X#,Y#,Z#)
if Emitter>-1 and Emitter<EmitterCount
   Emitter(Emitter).PositionX#=X#
   Emitter(Emitter).PositionY#=Y#
   Emitter(Emitter).PositionZ#=Z#
endif
endfunction

`--------------
` Emitter Start Position
`--------------
function Emitter_Set_OffsetPosition(Emitter,X#,Y#,Z#)
if Emitter>-1 and Emitter<EmitterCount
   Emitter(Emitter).OffsetPositionX#=X#
   Emitter(Emitter).OffsetPositionY#=Y#
   Emitter(Emitter).OffsetPositionZ#=Z#
endif
endfunction

`--------------
` Emitter Angle
`--------------
function Emitter_Set_Angle(Emitter,X#,Y#,Z#)
if Emitter>-1 and Emitter<EmitterCount
   Emitter(Emitter).AngleX#=X#
   Emitter(Emitter).AngleY#=Y#
   Emitter(Emitter).AngleZ#=Z#
endif
endfunction

`--------------
` Emitter Start Angle
`--------------
function Emitter_Set_OffsetAngle(Emitter,X#,Y#,Z#)
if Emitter>-1 and Emitter<EmitterCount
   Emitter(Emitter).OffsetAngleX#=X#
   Emitter(Emitter).OffsetAngleY#=Y#
   Emitter(Emitter).OffsetAngleZ#=Z#
endif
endfunction

`--------------
` Load Emitter File
`--------------
function FileEmitter_Load(File$,PosX#,PosY#,PosZ#,AngX#,AngY#,AngZ#)
   if FileEmitterCount=0
      global FileEmitterCount
      global FileEmittersCount
      global dim FileEmitter() as FileEmitterData
      global dim FileEmitters()
   endif
   FileEmitter=-1
   if file exist(File$)=1
      open to read 1,File$
      for e=0 to FileEmitterCount-1
         if FileEmitter(e).InUse=0 then FileEmitter=e
      next e
      if FileEmitter=-1
         array insert at bottom FileEmitter()
         FileEmitter=FileEmitterCount
         inc FileEmitterCount
      endif
      FileEmitter(FileEmitter).InUse=1
      FileEmitter(FileEmitter).EmitterStart=FileEmittersCount
      repeat
         read string 1,Name$
         read string 1,Bracket$
         if Bracket$="{"
            repeat
               read string 1,KeyVal$
               Key$=lower$(Get_String_Key(KeyVal$))
               Val$=lower$(Get_String_Value(KeyVal$))
               if Key$="shader" then Shader$=Val$
               if Key$="texturefile" then Texture$=Val$
               if Key$="frustumcullsize" then FrustumCullSize#=val(Val$)
               if Key$="particles" then Particles=val(Val$)
               if Key$="life" then life=val(Val$)
               if Key$="emission" then emission=val(Val$)
               if Key$="alpha" then alpha#=Get_String_InValue(Val$,0):rndalpha#=Get_String_InValue(Val$,1)
               if Key$="alphaStart" then alphastart#=val(Val$)
               if Key$="gravity" then grav#=Get_String_InValue(Val$,0):rndgrav#=Get_String_InValue(Val$,1)
               if Key$="wind" then wind#=Get_String_InValue(Val$,0):rndwind#=Get_String_InValue(Val$,1)
               if Key$="offsetposition" then offsetposx#=Get_String_InValue(Val$,0):offsetposy#=Get_String_InValue(Val$,1):offsetposz#=Get_String_InValue(Val$,2)
               if Key$="rndposition" then rndposx#=Get_String_InValue(Val$,0):rndposy#=Get_String_InValue(Val$,1):rndposz#=Get_String_InValue(Val$,2)
               if Key$="offsetangle" then offsetangx#=Get_String_InValue(Val$,0):offsetangy#=Get_String_InValue(Val$,1):offsetangz#=Get_String_InValue(Val$,2)
               if Key$="rndangle" then rndangx#=Get_String_InValue(Val$,0):rndangy#=Get_String_InValue(Val$,1):rndangz#=Get_String_InValue(Val$,2)
               if Key$="destinationangle" then desangx#=Get_String_InValue(Val$,0):desangy#=Get_String_InValue(Val$,1):desangz#=Get_String_InValue(Val$,2):rnddesangx#=Get_String_InValue(Val$,3):rnddesangy#=Get_String_InValue(Val$,4):rnddesangz#=Get_String_InValue(Val$,5)
               if Key$="curveangle" then curveang#=val(Val$)
               if Key$="curveangle" then curveang#=val(Val$)
               if Key$="startscale" then scale#=Get_String_InValue(Val$,0):rndscale#=Get_String_InValue(Val$,1)
               if Key$="destinationscale" then desscale#=Get_String_InValue(Val$,0):rnddesscale#=Get_String_InValue(Val$,1)
               if Key$="curvescale" then curvescale#=val(Val$)
               if Key$="startvelocity" then veloc#=Get_String_InValue(Val$,0):rndveloc#=Get_String_InValue(Val$,1)
               if Key$="destinationvelocity" then desveloc#=Get_String_InValue(Val$,0):rnddesveloc#=Get_String_InValue(Val$,1)
               if Key$="curvevelocity" then curveveloc#=val(Val$)
               if Key$="startcolor" then colr#=Get_String_InValue(Val$,0):colg#=Get_String_InValue(Val$,1):colb#=Get_String_InValue(Val$,2)
               if Key$="startrndcolor" then rndcolr#=Get_String_InValue(Val$,0):rndcolg#=Get_String_InValue(Val$,1):rndcolb#=Get_String_InValue(Val$,2)
               if Key$="destinationcolor" then descolr#=Get_String_InValue(Val$,0):descolg#=Get_String_InValue(Val$,1):descolb#=Get_String_InValue(Val$,2)
               if Key$="destinationrndcolor" then rnddescolr#=Get_String_InValue(Val$,0):rnddescolg#=Get_String_InValue(Val$,1):rnddescolb#=Get_String_InValue(Val$,2)
               if Key$="curvecolor" then curvecolor#=val(Val$)
               if Key$="rotation" then rotate#=Get_String_InValue(Val$,0):rndrotate#=Get_String_InValue(Val$,1)
            until KeyVal$="" or KeyVal$="};"
            array insert at bottom FileEmitters()
            if file exist(Shader$)=1 and file exist(Texture$)=1
               FileEmitters(FileEmittersCount)=Emitter_Create(Shader$,Texture$,FrustumCullSize#,Particles,life,emission)
               Emitter_Set_Position(FileEmitters(FileEmittersCount),PosX#,PosY#,PosZ#)
               Emitter_Set_OffsetPosition(FileEmitters(FileEmittersCount),offsetposx#,offsetposy#,offsetposz#)
               Particles_Set_RndPosition(FileEmitters(FileEmittersCount),rndposx#,rndposy#,rndposz#)
               Emitter_Set_Angle(FileEmitters(FileEmittersCount),AngX#,AngY#,AngZ#)
               Emitter_Set_OffsetAngle(FileEmitters(FileEmittersCount),offsetangx#,offsetangy#,offsetangz#)
               Particles_Set_RndAngle(FileEmitters(FileEmittersCount),rndangx#,rndangy#,rndangz#)
               Particles_Set_Alpha(FileEmitters(FileEmittersCount),alpha#,rndalpha#)
               Particles_Set_AlphaStart(FileEmitters(FileEmittersCount),alphastart#)
               Particles_Set_Gravity(FileEmitters(FileEmittersCount),grav#,rndgrav#)
               Particles_Set_Wind(FileEmitters(FileEmittersCount),wind#,rndwind#)
               Particles_Set_Rotation(FileEmitters(FileEmittersCount),rotate#,rndrotate#)
               Particles_Set_DestinationAngle(FileEmitters(FileEmittersCount),desangx#,desangy#,desangz#,rnddesangx#,rnddesangy#,rnddesangz#)
               Particles_Set_CurveAngle(FileEmitters(FileEmittersCount),curveang#)
               Particles_Set_StartScale(FileEmitters(FileEmittersCount),scale#,rndscale#)
               Particles_Set_DestinationScale(FileEmitters(FileEmittersCount),desscale#,rnddesscale#)
               Particles_Set_CurveScale(FileEmitters(FileEmittersCount),curvescale#)
               Particles_Set_StartVelocity(FileEmitters(FileEmittersCount),veloc#,rnddesveloc#)
               Particles_Set_DestinationVelocity(FileEmitters(FileEmittersCount),desveloc#,rnddesveloc#)
               Particles_Set_CurveVelocity(FileEmitters(FileEmittersCount),curveveloc#)
               Particles_Set_StartColor(FileEmitters(FileEmittersCount),colr#,colg#,colb#,rndcolr#,rndcolg#,rndcolb#)
               Particles_Set_DestinationColor(FileEmitters(FileEmittersCount),descolr#,descolg#,descolb#,rnddescolr#,rnddescolg#,rnddescolb#)
               Particles_Set_CurveColor(FileEmitters(FileEmittersCount),curvecolor#)
               Emitter_Visible(FileEmitters(FileEmittersCount),0)
               inc FileEmittersCount
            endif
            Shader$="":Texture$="":FrustumCullSize#=0:Particles=0:life=0:emission=0:alpha#=0:rndalpha#=0
            alphastart#=0:grav#=0:rndgrav#=0:wind#=0:rndwind#=0:offsetposx#=0:offsetposy#=0:offsetposz#=0
            rndposx#=0:rndposy#=0:rndposz#=0:offsetangx#=0:offsetangy#=0:offsetangz#=0:rndangx#=0:rndangy#=0
            rndangz#=0:desangx#=0:desangy#=0:desangz#=0:rnddesangx#=0:rnddesangy#=0:rnddesangz#=0:curveang#=0
            curveang#=0:scale#=0:rndscale#=0:desscale#=0:rnddesscale#=0:curvescale#=0:veloc#=0:rndveloc#=0
            desveloc#=0:rnddesveloc#=0:curveveloc#=0:colr#=0:colg#=0:colb#=0:rndcolr#=0:rndcolg#=0:rndcolb#=0
            descolr#=0:descolg#=0:descolb#=0:rnddescolr#=0:rnddescolg#=0:rnddescolb#=0:curvecolor#=0
            rotate#=0:rndrotate#=0
         endif
      until Bracket$=""
      FileEmitter(FileEmitter).EmitterEnd=FileEmittersCount-1
      close file 1
   endif
endfunction FileEmitter

`--------------
` Delete File Emitter
`--------------
function FileEmitter_Delete(FileEmitter)
if FileEmitter>-1 and FileEmitter<FileEmitterCount
   if FileEmitter(FileEmitter).InUse=1
      for e=FileEmitter(FileEmitter).EmitterStart to FileEmitter(FileEmitter).EmitterEnd
         Emitter_Delete(FileEmitters(e))
      next e
      for e=FileEmitter(FileEmitter).EmitterStart to FileEmitter(FileEmitter).EmitterEnd
         array delete element FileEmitters(),FileEmitter(FileEmitter).EmitterStart
         dec FileEmittersCount
      next e
      FileEmitter(FileEmitter).InUse=0
      FileEmitter(FileEmitter).EmitterStart=0
      FileEmitter(FileEmitter).EmitterEnd=0
   endif
endif
endfunction

`--------------
` File Emitter Loop
`--------------
function FileFileEmitter_Loop(FileEmitter)
if FileEmitter>-1 and FileEmitter<FileEmitterCount
   if FileEmitter(FileEmitter).InUse=1
      for e=FileEmitter(FileEmitter).EmitterStart to FileEmitter(FileEmitter).EmitterEnd
         Emitter_Loop(FileEmitters(e))
      next e
   endif
endif
endfunction

`--------------
` File Emitter Play
`--------------
function FileEmitter_Play(FileEmitter)
if FileEmitter>-1 and FileEmitter<FileEmitterCount
   if FileEmitter(FileEmitter).InUse=1
      for e=FileEmitter(FileEmitter).EmitterStart to FileEmitter(FileEmitter).EmitterEnd
         Emitter_Play(FileEmitters(e))
      next e
   endif
endif
endfunction

`--------------
` File Emitter Stop
`--------------
function FileEmitter_Stop(FileEmitter)
if FileEmitter>-1 and FileEmitter<FileEmitterCount
   if FileEmitter(FileEmitter).InUse=1
      for e=FileEmitter(FileEmitter).EmitterStart to FileEmitter(FileEmitter).EmitterEnd
         Emitter_Stop(FileEmitters(e))
      next e
   endif
endif
endfunction

`--------------
` Position File Emitter
`--------------
function FileEmitter_Set_Position(FileEmitter,X#,Y#,Z#)
if FileEmitter>-1 and FileEmitter<FileEmitterCount
   if FileEmitter(FileEmitter).InUse=1
      for e=FileEmitter(FileEmitter).EmitterStart to FileEmitter(FileEmitter).EmitterEnd
         Emitter_Set_Position(FileEmitters(e),X#,Y#,Z#)
      next e
   endif
endif
endfunction

`--------------
` File Emitter Visible
`--------------
function FileEmitter_Visible(FileEmitter,Vis)
if FileEmitter>-1 and FileEmitter<FileEmitterCount
   if FileEmitter(FileEmitter).InUse=1
      for e=FileEmitter(FileEmitter).EmitterStart to FileEmitter(FileEmitter).EmitterEnd
         Emitter_Visible(FileEmitters(e),Vis)
      next e
   endif
endif
endfunction

`---------------------------------- Set Parameters for individual Particles

`--------------
` Particle Rnd Position
`--------------
function Particles_Set_RndPosition(Emitter,RndX#,RndY#,RndZ#)
if Emitter>-1 and Emitter<EmitterCount
   for p=0 to Emitter(Emitter).Particles
      Particle(p+Emitter(Emitter).ParticleStart).RndPositionX#=rnd(RndX#*2)-RndX#
      Particle(p+Emitter(Emitter).ParticleStart).RndPositionY#=rnd(RndY#*2)-RndY#
      Particle(p+Emitter(Emitter).ParticleStart).RndPositionZ#=rnd(RndZ#*2)-RndZ#
   next p
endif
endfunction

`--------------
` Particle Rnd Angle
`--------------
function Particles_Set_RndAngle(Emitter,RndX#,RndY#,RndZ#)
if Emitter>-1 and Emitter<EmitterCount
   for p=0 to Emitter(Emitter).Particles
      Particle(p+Emitter(Emitter).ParticleStart).StartRndAngleX#=rnd(RndX#*2)-RndX#
      Particle(p+Emitter(Emitter).ParticleStart).StartRndAngleY#=rnd(RndY#*2)-RndY#
      Particle(p+Emitter(Emitter).ParticleStart).StartRndAngleZ#=rnd(RndZ#*2)-RndZ#
   next p
endif
endfunction

`--------------
` Particle alpha
`--------------
function Particles_Set_Alpha(Emitter,Alpha#,RndAlpha#)
if Emitter>-1 and Emitter<EmitterCount
   for p=0 to Emitter(Emitter).Particles
      Particle(p+Emitter(Emitter).ParticleStart).Alpha#=(Alpha#/100)+(rnd(RndAlpha#)/100)
   next p
endif
endfunction

`--------------
` Particle alpha Start
`--------------
function Particles_Set_AlphaStart(Emitter,AlphaStart)
if Emitter>-1 and Emitter<EmitterCount
   for p=0 to Emitter(Emitter).Particles
      Particle(p+Emitter(Emitter).ParticleStart).AlphaStart=AlphaStart
   next p
endif
endfunction

`--------------
` Particle Gravity
`--------------
function Particles_Set_Gravity(Emitter,GravityPower#,RndGravityPower#)
if Emitter>-1 and Emitter<EmitterCount
   for p=0 to Emitter(Emitter).Particles
      Particle(p+Emitter(Emitter).ParticleStart).GravityPower#=(GravityPower#/100)+(rnd(RndGravityPower#)/100)
   next p
endif
endfunction

`--------------
` Particle Wind
`--------------
function Particles_Set_Wind(Emitter,WindPower#,RndWindPower#)
if Emitter>-1 and Emitter<EmitterCount
   for p=0 to Emitter(Emitter).Particles
      Particle(p+Emitter(Emitter).ParticleStart).WindPower#=(WindPower#/100)+(rnd(RndWindPower#)/100)
   next p
endif
endfunction

`--------------
` Particle Rotation
`--------------
function Particles_Set_Rotation(Emitter,Rotation#,RndRotation#)
if Emitter>-1 and Emitter<EmitterCount
   set vector4 1,RndRotation#,Rotation#,0,0
   set effect constant vector Emitter(Emitter).Effect,"Rotation",1
endif
endfunction

`--------------
` Particle Destination Angle
`--------------
function Particles_Set_DestinationAngle(Emitter,X#,Y#,Z#,RndX#,RndY#,RndZ#)
if Emitter>-1 and Emitter<EmitterCount
   for p=0 to Emitter(Emitter).Particles
      Particle(p+Emitter(Emitter).ParticleStart).AngleX#=X#
      Particle(p+Emitter(Emitter).ParticleStart).AngleY#=Y#
      Particle(p+Emitter(Emitter).ParticleStart).AngleZ#=Z#
      Particle(p+Emitter(Emitter).ParticleStart).RndAngleX#=rnd(RndX#*2)-RndX#
      Particle(p+Emitter(Emitter).ParticleStart).RndAngleY#=rnd(RndY#*2)-RndY#
      Particle(p+Emitter(Emitter).ParticleStart).RndAngleZ#=rnd(RndZ#*2)-RndZ#
   next p
endif
endfunction

`--------------
` Particle Curve Angle
`--------------
function Particles_Set_CurveAngle(Emitter,CurveAngle#)
if Emitter>-1 and Emitter<EmitterCount
   Emitter(Emitter).ParticleCurveDirection#=CurveAngle#
endif
endfunction

`--------------
` Particle Start Scale
`--------------
function Particles_Set_StartScale(Emitter,Scale#,RndScale#)
if Emitter>-1 and Emitter<EmitterCount
   for p=0 to Emitter(Emitter).Particles
      Particle(p+Emitter(Emitter).ParticleStart).Scale#=Scale#+rnd(RndScale#)
      Particle(p+Emitter(Emitter).ParticleStart).DestinationScale#=Particle(p+Emitter(Emitter).ParticleStart).Scale#
   next p
endif
endfunction

`--------------
` Particle Destination Scale
`--------------
function Particles_Set_DestinationScale(Emitter,DestinationScale#,RndDestinationScale#)
if Emitter>-1 and Emitter<EmitterCount
   for p=0 to Emitter(Emitter).Particles
      Particle(p+Emitter(Emitter).ParticleStart).DestinationScale#=DestinationScale#+rnd(RndDestinationScale#)
   next p
endif
endfunction

`--------------
` Particle Curve Scale
`--------------
function Particles_Set_CurveScale(Emitter,CurveScale#)
if Emitter>-1 and Emitter<EmitterCount
   Emitter(Emitter).ParticleCurveScale#=CurveScale#
endif
endfunction

`--------------
` Particle Start Velocity
`--------------
function Particles_Set_StartVelocity(Emitter,Velocity#,RndVelocity#)
if Emitter>-1 and Emitter<EmitterCount
   for p=0 to Emitter(Emitter).Particles
      Particle(p+Emitter(Emitter).ParticleStart).Velocity#=Velocity#+(rnd(RndVelocity#*100)/100)
      Particle(p+Emitter(Emitter).ParticleStart).DestinationVelocity#=Particle(p+Emitter(Emitter).ParticleStart).Velocity#
   next p
endif
endfunction

`--------------
` Particle Destination Velocity
`--------------
function Particles_Set_DestinationVelocity(Emitter,DestinationVelocity#,RndDestinationVelocity#)
if Emitter>-1 and Emitter<EmitterCount
   for p=0 to Emitter(Emitter).Particles
      Particle(p+Emitter(Emitter).ParticleStart).DestinationVelocity#=DestinationVelocity#+(rnd(RndDestinationVelocity#*100)/100)
   next p
endif
endfunction

`--------------
` Particle Curve Velocity
`--------------
function Particles_Set_CurveVelocity(Emitter,CurveVelocity#)
if Emitter>-1 and Emitter<EmitterCount
   Emitter(Emitter).ParticleCurveVelocity#=CurveVelocity#
endif
endfunction

`--------------
` Particle Start Color
`--------------
function Particles_Set_StartColor(Emitter,ColorR#,ColorG#,ColorB#,RndColorR#,RndColorG#,RndColorB#)
if Emitter>-1 and Emitter<EmitterCount
   for p=0 to Emitter(Emitter).Particles
      Particle(p+Emitter(Emitter).ParticleStart).ColorR#=ColorR#+rnd(RndColorR#)
      Particle(p+Emitter(Emitter).ParticleStart).ColorG#=ColorG#+rnd(RndColorG#)
      Particle(p+Emitter(Emitter).ParticleStart).ColorB#=ColorB#+rnd(RndColorB#)
      Particle(p+Emitter(Emitter).ParticleStart).DestinationColorR#=Particle(p+Emitter(Emitter).ParticleStart).ColorR#
      Particle(p+Emitter(Emitter).ParticleStart).DestinationColorG#=Particle(p+Emitter(Emitter).ParticleStart).ColorG#
      Particle(p+Emitter(Emitter).ParticleStart).DestinationColorB#=Particle(p+Emitter(Emitter).ParticleStart).ColorB#
   next p
endif
endfunction

`--------------
` Particle Destination Color
`--------------
function Particles_Set_DestinationColor(Emitter,ColorR#,ColorG#,ColorB#,RndColorR#,RndColorG#,RndColorB#)
if Emitter>-1 and Emitter<EmitterCount
   for p=0 to Emitter(Emitter).Particles
      Particle(p+Emitter(Emitter).ParticleStart).DestinationColorR#=ColorR#+rnd(RndColorR#)
      Particle(p+Emitter(Emitter).ParticleStart).DestinationColorG#=ColorG#+rnd(RndColorG#)
      Particle(p+Emitter(Emitter).ParticleStart).DestinationColorB#=ColorB#+rnd(RndColorB#)
   next p
endif
endfunction

`--------------
` Particle Curve Color
`--------------
function Particles_Set_CurveColor(Emitter,CurveColor#)
if Emitter>-1 and Emitter<EmitterCount
   Emitter(Emitter).ParticleCurveColor#=CurveColor#
endif
endfunction

`====================================================
` Terrain Functions
`====================================================

type Terrain_SegmentData
   Segment_Limb
   Segment_Index
   Segment_LODMode
   Segment_OldLODMode
endtype

`--------------
` Build Terrain
`--------------
function LODTerrain_Build(Height$,Normal$,Blend$,Color$)
if Terrain_Enabled=0

   `Load terrain images
      Global dim Terrain_Texture(3)
      Terrain_Texture(0)=Find_Free_Image()
      load image Height$,Terrain_Texture(0)
      make memblock from image 200,Terrain_Texture(0)
      SizeX#=memblock dword(200,0)
      SizeZ#=memblock dword(200,4)
      delete memblock 200
      Terrain_Texture(1)=Find_Free_Image()
      if Normal$<>""
         load image Normal$,Terrain_Texture(1)
      else
         make memblock 200,12+(SizeX#*SizeZ#*4)
         write memblock dword 200,0,SizeX#
         write memblock dword 200,4,SizeZ#
         write memblock dword 200,8,32
         for x=0 to SizeX#-1
            for z=0 to SizeZ#-1
               Pos=12+(z*(SizeX#*4))+(x*4)
               write memblock byte 200,Pos+2,127
               write memblock byte 200,Pos+1,255
               write memblock byte 200,Pos+0,127
               write memblock byte 200,Pos+3,0
            next z
         next x
         make image from memblock Terrain_Texture(1),200
         delete memblock 200
      endif
      Terrain_Texture(2)=Find_Free_Image()
      load image Blend$,Terrain_Texture(2)
      Terrain_Texture(3)=Find_Free_Image()
      load image Color$,Terrain_Texture(3)

   `Variables
      Global Terrain_Object
      Global Terrain_ObjectN
      Global Terrain_Enabled=1
      Global Terrain_SizeX#
      Global Terrain_SizeZ#
      Global Terrain_SectorsX#
      Global Terrain_SectorsZ#
      Global Terrain_TileSize#
      Global Terrain_Height#
      Global Terrain_PositionX#
      Global Terrain_PositionY#
      Global Terrain_PositionZ#
      Global Terrain_Visible=1
      Global Terrain_Shadows
      Global Terrain_LODLimb
      Global Terrain_Limbs
      if SizeX#<128 then SizeX#=128
      if SizeZ#<128 then SizeZ#=128
      Terrain_SizeX#=int(SizeX#/128)*128
      Terrain_SizeZ#=int(SizeZ#/128)*128
      Terrain_SectorsX#=SizeX#/128
      Terrain_SectorsZ#=SizeZ#/128

   `Arrays
      global dim Terrain_Effect(2)
      global dim Terrain_Limb(Terrain_SectorsX#,Terrain_SectorsZ#)
      global dim Terrain_LOD0Limb(Terrain_SectorsX#*Terrain_SectorsZ#)
      global dim Terrain_LOD1Limb(20)
      global dim Terrain_LOD2Limb(15)
      global dim Terrain_LOD3Limb(10)
      global dim Terrain_Height#(Terrain_SizeX#,Terrain_SizeZ#)
      global dim Terrain_VerticalMap#(Terrain_SizeX#,Terrain_SizeZ#,1)
      global dim Terrain_LayerUV#(4,2)
      global dim Terrain_SegmentXZ(Terrain_SectorsX#,Terrain_SectorsZ#)
      global dim Terrain_SegmentX(Terrain_SectorsX#*Terrain_SectorsZ#,4)
      global dim Terrain_SegmentZ(Terrain_SectorsX#*Terrain_SectorsZ#,4)
      global dim Terrain_Segment(Terrain_SectorsX#*2,Terrain_SectorsZ#*2) as Terrain_SegmentData
      global dim Terrain_LOD1InUse(20)
      global dim Terrain_LOD2InUse(15)
      global dim Terrain_LOD3InUse(10)
      global dim Terrain_RayXYZVector#(2)

   `Get height data
      make memblock from image 200,Terrain_Texture(0)
      for x=0 to Terrain_SizeX#-1
         for z=0 to Terrain_SizeZ#-1
            Pos=12+(z*(Terrain_SizeX#*4))+(x*4)
            Terrain_Height#(x,z)=memblock byte(200,Pos+2)
         next z
      next x
      delete memblock 200

   `Get  vertical mapping from normals
      make memblock from image 200,Terrain_Texture(1)
      for x=0 to Terrain_SizeX#-1
         for z=0 to Terrain_SizeZ#-1
            Pos=12+(z*(Terrain_SizeX#*4))+(x*4)
            Nx#=memblock byte(200,Pos+2)
            Nz#=memblock byte(200,Pos+0)
            Vertical#=abs((Nx#/255)*2-1)+abs((Nz#/255)*2-1)
            Terrain_VerticalMap#(x,z,0)=abs((Nx#/255)*2-1)/Vertical#
            Terrain_VerticalMap#(x,z,1)=abs((Nz#/255)*2-1)/Vertical#
         next z
      next x
      delete memblock 200

   `Load shader
      Terrain_Effect(1)=Find_Free_Effect()
      load effect "Shaders/Terrain/terrain diffuse.fx",Terrain_Effect(1),0,1
      Effect_Add(Terrain_Effect(1))
      Terrain_Effect(2)=Find_Free_Effect()
      load effect "Shaders/Terrain/terrain normals.fx",Terrain_Effect(2),0,1
      Effect_Add(Terrain_Effect(2))

   `Make Terrain Objects
      limb=0
      if file exist("Shaders/Terrain/Terrain"+str$(Terrain_SizeX#)+"x"+str$(Terrain_SizeZ#)+".dbo")=1
         Terrain_Object=Find_Free_Object()
         load object "Shaders/Terrain/Terrain"+str$(Terrain_SizeX#)+"x"+str$(Terrain_SizeZ#)+".dbo",Terrain_Object
         Terrain_ObjectN=Find_Free_Object()
         load object "Shaders/Terrain/Terrain"+str$(Terrain_SizeX#)+"x"+str$(Terrain_SizeZ#)+".dbo",Terrain_ObjectN
         for x=0 to Terrain_SectorsX#-1
            for z=0 to Terrain_SectorsZ#-1
               Terrain_Limb(x,z)=limb
               inc limb
            next z
         next x
         Terrain_Limbs=limb
         for o=0 to 20
            Terrain_LOD1Limb(o)=limb
            exclude limb on Terrain_Object,limb
            exclude limb on Terrain_ObjectN,limb
            inc limb
         next o
         for o=0 to 15
            Terrain_LOD2Limb(o)=limb
            exclude limb on Terrain_Object,limb
            exclude limb on Terrain_ObjectN,limb
            inc limb
         next o
         for o=0 to 10
            Terrain_LOD3Limb(o)=limb
            exclude limb on Terrain_Object,limb
            exclude limb on Terrain_ObjectN,limb
            inc limb
         next o
      else
         Terrain_FreeObject=Find_Free_Object()
         load object "Shaders/Terrain/Terrain.dbo",Terrain_FreeObject
         make mesh from object Terrain_FreeObject,Terrain_FreeObject
         delete object Terrain_FreeObject
         for x=0 to Terrain_SectorsX#-1
            for z=0 to Terrain_SectorsZ#-1
               Terrain_Limb(x,z)=limb
               if limb=0 then Terrain_Object=Find_Free_Object():make object Terrain_Object,Terrain_FreeObject,0:Terrain_ObjectN=Find_Free_Object():make object Terrain_ObjectN,Terrain_FreeObject,0
               if limb>0 then add limb Terrain_Object,limb,Terrain_FreeObject:add limb Terrain_ObjectN,limb,Terrain_FreeObject
               offset limb Terrain_Object,limb,((x*12800)+(12800/2)),0,((z*12800)+(12800/2))
               offset limb Terrain_ObjectN,limb,((x*12800)+(12800/2)),0,((z*12800)+(12800/2))
               inc limb
            next z
         next x
         delete mesh Terrain_FreeObject
         Terrain_Limbs=limb
         load object "Shaders/Terrain/LOD16x16.dbo",Terrain_FreeObject
         make mesh from object Terrain_FreeObject,Terrain_FreeObject
         delete object Terrain_FreeObject
         for o=0 to 20
            Terrain_LOD1Limb(o)=limb
            add limb Terrain_Object,limb,Terrain_FreeObject
            hide limb Terrain_Object,limb
            exclude limb on Terrain_Object,limb
            add limb Terrain_ObjectN,limb,Terrain_FreeObject
            hide limb Terrain_ObjectN,limb
            exclude limb on Terrain_ObjectN,limb
            inc limb
         next o
         delete mesh Terrain_FreeObject
         load object "Shaders/Terrain/LOD32x32.dbo",Terrain_FreeObject
         make mesh from object Terrain_FreeObject,Terrain_FreeObject
         delete object Terrain_FreeObject
         for o=0 to 15
            Terrain_LOD2Limb(o)=limb
            add limb Terrain_Object,limb,Terrain_FreeObject
            hide limb Terrain_Object,limb
            exclude limb on Terrain_Object,limb
            add limb Terrain_ObjectN,limb,Terrain_FreeObject
            hide limb Terrain_ObjectN,limb
            exclude limb on Terrain_ObjectN,limb
            inc limb
         next o
         delete mesh Terrain_FreeObject
         load object "Shaders/Terrain/LOD64x64.dbo",Terrain_FreeObject
         make mesh from object Terrain_FreeObject,Terrain_FreeObject
         delete object Terrain_FreeObject
         for o=0 to 10
            Terrain_LOD3Limb(o)=limb
            add limb Terrain_Object,limb,Terrain_FreeObject
            hide limb Terrain_Object,limb
            exclude limb on Terrain_Object,limb
            add limb Terrain_ObjectN,limb,Terrain_FreeObject
            hide limb Terrain_ObjectN,limb
            exclude limb on Terrain_ObjectN,limb
            inc limb
         next o
         delete mesh Terrain_FreeObject
         save object "Shaders/Terrain/Terrain"+str$(Terrain_SizeX#)+"x"+str$(Terrain_SizeZ#)+".dbo",Terrain_Object
      endif

   `Add
      Object_Add(Terrain_Object)
      Object_Add(Terrain_ObjectN)
      set object effect Terrain_Object,Terrain_Effect(1)
      set object effect Terrain_ObjectN,Terrain_Effect(2)
      texture object Terrain_Object,0,Terrain_Texture(2)
      texture object Terrain_Object,1,Terrain_Texture(3)
      texture object Terrain_ObjectN,0,Terrain_Texture(2)
      texture object Terrain_ObjectN,1,Terrain_Texture(1)
      scale object Terrain_Object,Terrain_TileSize#,Terrain_Height#,Terrain_TileSize#
      scale object Terrain_ObjectN,Terrain_TileSize#,Terrain_Height#,Terrain_TileSize#
      Object_Mask(Terrain_Object,1,0,0,1,1,0)
      Object_Mask(Terrain_ObjectN,0,1,0,0,0,0)

   `Set Segment Arrays
      a=0:b=0:c=0
      for x=0 to Terrain_SectorsX#-1
         for z=0 to Terrain_SectorsZ#-1
            Terrain_SegmentXZ(x,z)=a
            Terrain_SegmentX(a,1)=b:b=b+1
            Terrain_SegmentX(a,2)=b:b=b-1
            Terrain_SegmentX(a,3)=b:b=b+1
            Terrain_SegmentX(a,4)=b:b=b-1
            Terrain_SegmentZ(a,1)=c
            Terrain_SegmentZ(a,2)=c:c=c+1
            Terrain_SegmentZ(a,3)=c
            Terrain_SegmentZ(a,4)=c:c=c+1
            a=a+1
         next z
         b=b+2:c=0
      next x

   `Set Height
      for Tx=0 to Terrain_SectorsX#-1
         for Tz=0 to Terrain_SectorsZ#-1
            LODTerrain_UpDateHight(TX,TZ)
         next TZ
      next Tx

   `Set Uv coords
      LODTerrain_Set_LayerUV(1,1,1)
      LODTerrain_Set_LayerUV(2,1,1)
      LODTerrain_Set_LayerUV(3,1,1)
      LODTerrain_Set_LayerUV(4,1,1)
      LODTerrain_Set_Scale(64,1000)

endif
endfunction

`--------------
` Update Terrain
`--------------
function LODTerrain_Update()
if Terrain_Enabled=1 and Terrain_Visible=1
   TileSize1#=(Terrain_TileSize#*32)
   TileSize2#=(Terrain_TileSize#*64)
   ObjPosy#=object position y(Terrain_Object)
   for x=0 to 4
      inc Terrain_LODLimb
      if Terrain_LODLimb>Terrain_Limbs-1 then Terrain_LODLimb=0
         UseLOD=0
         ObjPosx#=limb position x(Terrain_Object,Terrain_LODLimb)
         ObjPosz#=limb position z(Terrain_Object,Terrain_LODLimb)
         posy#=CameraPos#(2)-(ObjPosy#+(128*(Terrain_Height#/100))):if posy#<0 then posy#=0
         set vector3 2,CameraPos#(1)-(ObjPosx#-TileSize1#),CameraPos#(3)-(ObjPosz#-TileSize1#),0
         dist#=length vector3(2)+posy#
         SegmentX=Terrain_SegmentX(Terrain_LODLimb,1)
         SegmentZ=Terrain_SegmentZ(Terrain_LODLimb,1)
         if dist#<TileSize2#*1.3
            UseLOD=1
            if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>3
               LODTerrain_RemoveLOD(SegmentX,SegmentZ)
               Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=3
               LODTerrain_AddLOD(SegmentX,SegmentZ)
               LODTerrain_EdgeFixLOD()
            endif
         endif
         if dist#<TileSize2#*2.3 and dist#>TileSize2#*1.3
            UseLOD=1
            if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>2
               LODTerrain_RemoveLOD(SegmentX,SegmentZ)
               Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=2
               LODTerrain_AddLOD(SegmentX,SegmentZ)
               LODTerrain_EdgeFixLOD()
            endif
         endif
         set vector3 2,CameraPos#(1)-(ObjPosx#+TileSize1#),CameraPos#(3)-(ObjPosz#-TileSize1#),0
         dist#=length vector3(2)+posy#
         SegmentX=Terrain_SegmentX(Terrain_LODLimb,2)
         SegmentZ=Terrain_SegmentZ(Terrain_LODLimb,2)
         if dist#<TileSize2#*1.3
            UseLOD=1
            if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>3
               LODTerrain_RemoveLOD(SegmentX,SegmentZ)
               Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=3
               LODTerrain_AddLOD(SegmentX,SegmentZ)
               LODTerrain_EdgeFixLOD()
            endif
         endif
         if dist#<TileSize2#*2.3 and dist#>TileSize2#*1.3
            UseLOD=1
            if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>2
               LODTerrain_RemoveLOD(SegmentX,SegmentZ)
               Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=2
               LODTerrain_AddLOD(SegmentX,SegmentZ)
               LODTerrain_EdgeFixLOD()
            endif
         endif
         set vector3 2,CameraPos#(1)-(ObjPosx#-TileSize1#),CameraPos#(3)-(ObjPosz#+TileSize1#),0
         dist#=length vector3(2)+posy#
         SegmentX=Terrain_SegmentX(Terrain_LODLimb,3)
         SegmentZ=Terrain_SegmentZ(Terrain_LODLimb,3)
         if dist#<TileSize2#*1.3
            UseLOD=1
            if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>3
               LODTerrain_RemoveLOD(SegmentX,SegmentZ)
               Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=3
               LODTerrain_AddLOD(SegmentX,SegmentZ)
               LODTerrain_EdgeFixLOD()
            endif
         endif
         if dist#<TileSize2#*2.3 and dist#>TileSize2#*1.3
            UseLOD=1
            if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>2
               LODTerrain_RemoveLOD(SegmentX,SegmentZ)
               Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=2
               LODTerrain_AddLOD(SegmentX,SegmentZ)
               LODTerrain_EdgeFixLOD()
            endif
         endif
         set vector3 2,CameraPos#(1)-(ObjPosx#+TileSize1#),CameraPos#(3)-(ObjPosz#+TileSize1#),0
         dist#=length vector3(2)+posy#
         SegmentX=Terrain_SegmentX(Terrain_LODLimb,4)
         SegmentZ=Terrain_SegmentZ(Terrain_LODLimb,4)
         if dist#<TileSize2#*1.3
            UseLOD=1
            if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>3
               LODTerrain_RemoveLOD(SegmentX,SegmentZ)
               Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=3
               LODTerrain_AddLOD(SegmentX,SegmentZ)
               LODTerrain_EdgeFixLOD()
            endif
         endif
         if dist#<TileSize2#*2.3 and dist#>TileSize2#*1.3
            UseLOD=1
            if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>2
               LODTerrain_RemoveLOD(SegmentX,SegmentZ)
               Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=2
               LODTerrain_AddLOD(SegmentX,SegmentZ)
               LODTerrain_EdgeFixLOD()
            endif
         endif
         if UseLOD=0
            SegmentX=Terrain_SegmentX(Terrain_LODLimb,1)
            SegmentZ=Terrain_SegmentZ(Terrain_LODLimb,1)
            if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>0
               LODTerrain_RemoveLOD(SegmentX,SegmentZ)
               Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=0
               LODTerrain_EdgeFixLOD()
            endif
            SegmentX=Terrain_SegmentX(Terrain_LODLimb,2)
            SegmentZ=Terrain_SegmentZ(Terrain_LODLimb,2)
            if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>0
               LODTerrain_RemoveLOD(SegmentX,SegmentZ)
               Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=0
               LODTerrain_EdgeFixLOD()
            endif
            SegmentX=Terrain_SegmentX(Terrain_LODLimb,3)
            SegmentZ=Terrain_SegmentZ(Terrain_LODLimb,3)
            if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>0
               LODTerrain_RemoveLOD(SegmentX,SegmentZ)
               Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=0
               LODTerrain_EdgeFixLOD()
            endif
            SegmentX=Terrain_SegmentX(Terrain_LODLimb,4)
            SegmentZ=Terrain_SegmentZ(Terrain_LODLimb,4)
            if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>0
               LODTerrain_RemoveLOD(SegmentX,SegmentZ)
               Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=0
               LODTerrain_EdgeFixLOD()
            endif
         else
            set vector3 2,CameraPos#(1)-(ObjPosx#-TileSize1#),CameraPos#(3)-(ObjPosz#-TileSize1#),0
            dist#=length vector3(2)+posy#
            SegmentX=Terrain_SegmentX(Terrain_LODLimb,1)
            SegmentZ=Terrain_SegmentZ(Terrain_LODLimb,1)
            if dist#>TileSize2#*2.3
               if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>1
                  LODTerrain_RemoveLOD(SegmentX,SegmentZ)
                  Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=1
                  LODTerrain_AddLOD(SegmentX,SegmentZ)
                  LODTerrain_EdgeFixLOD()
               endif
            endif
            set vector3 2,CameraPos#(1)-(ObjPosx#+TileSize1#),CameraPos#(3)-(ObjPosz#-TileSize1#),0
            dist#=length vector3(2)+posy#
            SegmentX=Terrain_SegmentX(Terrain_LODLimb,2)
            SegmentZ=Terrain_SegmentZ(Terrain_LODLimb,2)
            if dist#>TileSize2#*2.3
               if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>1
                  LODTerrain_RemoveLOD(SegmentX,SegmentZ)
                  Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=1
                  LODTerrain_AddLOD(SegmentX,SegmentZ)
                  LODTerrain_EdgeFixLOD()
               endif
            endif
            set vector3 2,CameraPos#(1)-(ObjPosx#-TileSize1#),CameraPos#(3)-(ObjPosz#+TileSize1#),0
            dist#=length vector3(2)+posy#
            SegmentX=Terrain_SegmentX(Terrain_LODLimb,3)
            SegmentZ=Terrain_SegmentZ(Terrain_LODLimb,3)
            if dist#>TileSize2#*2.3
               if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>1
                  LODTerrain_RemoveLOD(SegmentX,SegmentZ)
                  Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=1
                  LODTerrain_AddLOD(SegmentX,SegmentZ)
                  LODTerrain_EdgeFixLOD()
               endif
            endif
            set vector3 2,CameraPos#(1)-(ObjPosx#+TileSize1#),CameraPos#(3)-(ObjPosz#+TileSize1#),0
            dist#=length vector3(2)+posy#
            SegmentX=Terrain_SegmentX(Terrain_LODLimb,4)
            SegmentZ=Terrain_SegmentZ(Terrain_LODLimb,4)
            if dist#>TileSize2#*2.3
               if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>1
                  LODTerrain_RemoveLOD(SegmentX,SegmentZ)
                  Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=1
                  LODTerrain_AddLOD(SegmentX,SegmentZ)
                  LODTerrain_EdgeFixLOD()
               endif
            endif
            exclude limb on Terrain_Object,Terrain_LODLimb
            hide limb Terrain_Object,Terrain_LODLimb
            exclude limb on Terrain_ObjectN,Terrain_LODLimb
            hide limb Terrain_ObjectN,Terrain_LODLimb
         endif
   next x
   limb=0
   for x=0 to Terrain_SectorsX#-1
      for z=0 to Terrain_SectorsZ#-1
         UseingLOD=0
         ObjPosx#=limb position x(Terrain_Object,limb)
         ObjPosz#=limb position z(Terrain_Object,limb)
         SegmentX=Terrain_SegmentX(limb,1)
         SegmentZ=Terrain_SegmentZ(limb,1)
         if Terrain_Segment(SegmentX,SegmentZ).Segment_Limb>0
            if FrustumCull_Sphere(ObjPosx#-TileSize1#,ObjPosy#+(Terrain_Height#/2),ObjPosz#-TileSize1#,TileSize1#*1.6)=1
               exclude limb off Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               show limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               exclude limb off Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               show limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
            else
               exclude limb on Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               hide limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               exclude limb on Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               hide limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
            endif
            UseingLOD=1
         endif
         SegmentX=Terrain_SegmentX(limb,2)
         SegmentZ=Terrain_SegmentZ(limb,2)
         if Terrain_Segment(SegmentX,SegmentZ).Segment_Limb>0
            if FrustumCull_Sphere(ObjPosx#+TileSize1#,ObjPosy#+(TileSize1#/2),ObjPosz#-TileSize1#,TileSize1#*1.6)=1
               exclude limb off Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               show limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               exclude limb off Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               show limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
            else
               exclude limb on Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               hide limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               exclude limb on Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               hide limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
            endif
            UseingLOD=1
         endif
         SegmentX=Terrain_SegmentX(limb,3)
         SegmentZ=Terrain_SegmentZ(limb,3)
         if Terrain_Segment(SegmentX,SegmentZ).Segment_Limb>0
            if FrustumCull_Sphere(ObjPosx#-TileSize1#,ObjPosy#+(TileSize1#/2),ObjPosz#+TileSize1#,TileSize1#*1.6)=1
               exclude limb off Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               show limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               exclude limb off Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               show limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
            else
               exclude limb on Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               hide limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               exclude limb on Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               hide limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
            endif
            UseingLOD=1
         endif
         SegmentX=Terrain_SegmentX(limb,4)
         SegmentZ=Terrain_SegmentZ(limb,4)
         if Terrain_Segment(SegmentX,SegmentZ).Segment_Limb>0
            if FrustumCull_Sphere(ObjPosx#+TileSize1#,ObjPosy#+(TileSize1#/2),ObjPosz#+TileSize1#,TileSize1#*1.6)=1
               exclude limb off Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               show limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               exclude limb off Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               show limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
            else
               exclude limb on Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               hide limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               exclude limb on Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
               hide limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
            endif
            UseingLOD=1
         endif
         if UseingLOD=0
            if FrustumCull_Sphere(ObjPosx#,ObjPosy#+(TileSize1#/2),ObjPosz#,TileSize2#*1.6)=1
               exclude limb off Terrain_Object,limb
               show limb Terrain_Object,limb
               exclude limb off Terrain_ObjectN,limb
               show limb Terrain_ObjectN,limb
            else
               exclude limb on Terrain_Object,limb
               hide limb Terrain_Object,limb
               exclude limb on Terrain_ObjectN,limb
               hide limb Terrain_ObjectN,limb
            endif
         endif
         inc limb
      next z
   next x
endif
endfunction

`--------------
` Terrain Delete
`--------------
function LODTerrain_Delete()
   if Terrain_Enabled=1
      Effect_Remove(Terrain_Effect(1))
      delete effect Terrain_Effect(1)
      Effect_Remove(Terrain_Effect(2))
      delete effect Terrain_Effect(2)
      delete image Terrain_Texture(0)
      delete image Terrain_Texture(1)
      delete image Terrain_Texture(2)
      delete image Terrain_Texture(3)
      Object_Remove(Terrain_Object)
      delete object Terrain_Object
      Object_Remove(Terrain_ObjectN)
      delete object Terrain_ObjectN
      Terrain_Enabled=0
      undim Terrain_Effect()
      undim Terrain_Limb()
      undim Terrain_LOD0Limb()
      undim Terrain_LOD1Limb()
      undim Terrain_LOD2Limb()
      undim Terrain_LOD3Limb()
      undim Terrain_Height#()
      undim Terrain_LayerUV#()
      undim Terrain_SegmentXZ()
      undim Terrain_SegmentX()
      undim Terrain_SegmentZ()
      undim Terrain_Segment()
      undim Terrain_LOD1InUse()
      undim Terrain_LOD2InUse()
      undim Terrain_LOD3InUse()
      undim Terrain_RayXYZVector#()
   endif
endfunction

`--------------
` Set Terrain Layer
`--------------
function LODTerrain_Set_Layer(Layer,Base,Normal)
if Terrain_Enabled=1
   texture object Terrain_Object,Layer+1,Base
   texture object Terrain_ObjectN,Layer+1,Normal
endif
endfunction

`--------------
` Set Terrain Layer UV
`--------------
function LODTerrain_Set_LayerUV(Layer,U#,V#)
if Terrain_Enabled=1
   if Layer=1
      Terrain_LayerUV#(1,1)=U#*Terrain_SizeX#
      Terrain_LayerUV#(1,2)=V#*Terrain_SizeZ#
      set vector4 1,Terrain_LayerUV#(1,1),Terrain_LayerUV#(1,2),0,0
      set effect constant vector Terrain_Effect(1),"Terrain1UV",1
      set effect constant vector Terrain_Effect(2),"Terrain1UV",1
   endif
   if Layer=2
      Terrain_LayerUV#(2,1)=U#*Terrain_SizeX#
      Terrain_LayerUV#(2,2)=V#*Terrain_SizeZ#
      set vector4 1,Terrain_LayerUV#(2,1),Terrain_LayerUV#(2,2),0,0
      set effect constant vector Terrain_Effect(1),"Terrain2UV",1
      set effect constant vector Terrain_Effect(2),"Terrain2UV",1
   endif
   if Layer=3
      Terrain_LayerUV#(3,1)=U#*Terrain_SizeX#
      Terrain_LayerUV#(3,2)=V#*Terrain_SizeZ#
      set vector4 1,Terrain_LayerUV#(3,1),Terrain_LayerUV#(3,2),0,0
      set effect constant vector Terrain_Effect(1),"Terrain3UV",1
      set effect constant vector Terrain_Effect(2),"Terrain3UV",1
   endif
   if Layer=4
      Terrain_LayerUV#(4,1)=U#*Terrain_SizeX#
      Terrain_LayerUV#(4,2)=V#*Terrain_SizeZ#
      set vector4 1,Terrain_LayerUV#(4,1),Terrain_LayerUV#(4,2),0,0
      set effect constant vector Terrain_Effect(1),"Terrain4UV",1
      set effect constant vector Terrain_Effect(2),"Terrain4UV",1
   endif
endif
endfunction

`--------------
` Set Layer Vertical Mapping
`--------------
function LODTerrain_Set_LayerVerticalMap(layer,Vertical)
   Effect_Remove(Terrain_Effect(1))
   delete effect Terrain_Effect(1)
   Effect_Remove(Terrain_Effect(2))
   delete effect Terrain_Effect(2)
   if layer=1
      Effect_Identifier("Shaders/Terrain/Terrain Diffuse.fx","VerticalMap1",Vertical)
      Effect_Identifier("Shaders/Terrain/Terrain Normals.fx","VerticalMap1",Vertical)
   endif
   if layer=2
      Effect_Identifier("Shaders/Terrain/Terrain Diffuse.fx","VerticalMap2",Vertical)
      Effect_Identifier("Shaders/Terrain/Terrain Normals.fx","VerticalMap2",Vertical)
   endif
   if layer=3
      Effect_Identifier("Shaders/Terrain/Terrain Diffuse.fx","VerticalMap3",Vertical)
      Effect_Identifier("Shaders/Terrain/Terrain Normals.fx","VerticalMap3",Vertical)
   endif
   if layer=4
      Effect_Identifier("Shaders/Terrain/Terrain Diffuse.fx","VerticalMap4",Vertical)
      Effect_Identifier("Shaders/Terrain/Terrain Normals.fx","VerticalMap4",Vertical)
   endif
   load effect "Shaders/Terrain/terrain diffuse.fx",Terrain_Effect(1),0,1
   load effect "Shaders/Terrain/Terrain Normals.fx",Terrain_Effect(2),0,1
   Effect_Add(Terrain_Effect(1))
   Effect_Add(Terrain_Effect(2))
   set vector4 1,Terrain_PositionX#,Terrain_PositionZ#,Terrain_SizeX#*Terrain_TileSize#,Terrain_SizeZ#*Terrain_TileSize#
   set effect constant vector Terrain_Effect(1),"TerrainVec",1
   set effect constant vector Terrain_Effect(2),"TerrainVec",1
   set vector4 1,Terrain_LayerUV#(1,1),Terrain_LayerUV#(1,2),0,0
   set effect constant vector Terrain_Effect(1),"Terrain1UV",1
   set effect constant vector Terrain_Effect(2),"Terrain1UV",1
   set vector4 1,Terrain_LayerUV#(2,1),Terrain_LayerUV#(2,2),0,0
   set effect constant vector Terrain_Effect(1),"Terrain2UV",1
   set effect constant vector Terrain_Effect(2),"Terrain2UV",1
   set vector4 1,Terrain_LayerUV#(3,1),Terrain_LayerUV#(3,2),0,0
   set effect constant vector Terrain_Effect(1),"Terrain3UV",1
   set effect constant vector Terrain_Effect(2),"Terrain3UV",1
   set vector4 1,Terrain_LayerUV#(4,1),Terrain_LayerUV#(4,2),0,0
   set effect constant vector Terrain_Effect(1),"Terrain4UV",1
   set effect constant vector Terrain_Effect(2),"Terrain4UV",1
   set object effect Terrain_Object,Terrain_Effect(1)
   set object effect Terrain_ObjectN,Terrain_Effect(2)
   for Tx=0 to Terrain_SectorsX#-1
       for Tz=0 to Terrain_SectorsZ#-1
           LODTerrain_UpDateHight(Tx,Tz)
       next TZ
   next Tx
   LODTerrain_EdgeFixLOD()
endfunction

`--------------
` Position Terrain
`--------------
function LODTerrain_Set_Position(PosX#,PosY#,PosZ#)
if Terrain_Enabled=1
   Terrain_PositionX#=PosX#
   Terrain_PositionY#=PosY#
   Terrain_PositionZ#=PosZ#
   set vector4 1,Terrain_PositionX#,Terrain_PositionZ#,Terrain_SizeX#*Terrain_TileSize#,Terrain_SizeZ#*Terrain_TileSize#
   set effect constant vector Terrain_Effect(1),"TerrainVec",1
   set effect constant vector Terrain_Effect(2),"TerrainVec",1
   position object Terrain_Object,Terrain_PositionX#,Terrain_PositionY#,Terrain_PositionZ#
   position object Terrain_ObjectN,Terrain_PositionX#,Terrain_PositionY#,Terrain_PositionZ#
endif
endfunction

`====================================================
` Scale Terrain
`====================================================
function LODTerrain_Set_Scale(TileSize#,Height#)
if Terrain_Enabled=1
   Terrain_TileSize#=TileSize#
   Terrain_Height#=Height#
   set vector4 1,Terrain_PositionX#,Terrain_PositionZ#,Terrain_SizeX#*Terrain_TileSize#,Terrain_SizeZ#*Terrain_TileSize#
   set effect constant vector Terrain_Effect(1),"TerrainVec",1
   set effect constant vector Terrain_Effect(2),"TerrainVec",1
   scale object Terrain_Object,Terrain_TileSize#,Terrain_Height#,Terrain_TileSize#
   scale object Terrain_ObjectN,Terrain_TileSize#,Terrain_Height#,Terrain_TileSize#
endif
endfunction

`--------------
` Set Shadows
`--------------
function LODTerrain_Set_Shadows(Shadow)
   if Terrain_Enabled=1
      Terrain_Shadows=Shadow
      Object_Mask(Terrain_ObjectN,0,1,Terrain_Shadows*2,0,0,0)
   endif
endfunction

`--------------
` Terrain Set Normals
`--------------
function LODTerrain_Set_Normals()
   NorUY#=Terrain_Height#*0.0001
   NorUX#=Terrain_TileSize#*0.015
   NorUZ#=Terrain_TileSize#*0.015
   make memblock from image 200,Terrain_Texture(1)
   for x=1 to Terrain_SizeX#-1
       for z=1 to Terrain_SizeZ#-1
          set vector3 2,2.0*NorUX#,0.0,(Terrain_Height#(x+1,z)-Terrain_Height#(x-1,z))*NorUY#
          set vector3 8,0.0,2.0*NorUZ#,(Terrain_Height#(x,z+1)-Terrain_Height#(x,z-1))*NorUY#
          cross product vector3 2,2,8
          normalize vector3 2,2
          nx#=x vector3(2):nx=(nx#+1)*127
          ny#=z vector3(2):ny=(ny#+1)*127
          nz#=y vector3(2):nz=(nz#+1)*127
          Pos=12+(z*(Terrain_SizeX#*4))+(x*4)
          write memblock byte 200,Pos+2,nx
          write memblock byte 200,Pos+1,ny
          write memblock byte 200,Pos+0,nz
          write memblock byte 200,Pos+3,0
       next z
   next x
   for x=0 to Terrain_SizeX#-1
       for z=0 to Terrain_SizeZ#-1
           Pos=12+(z*(Terrain_SizeX#*4))+(x*4)
           Nx#=memblock byte(200,Pos+2)
           Nz#=memblock byte(200,Pos+0)
           Vertical#=abs((Nx#/255)*2-1)+abs((Nz#/255)*2-1)
           Terrain_VerticalMap#(x,z,0)=abs((Nx#/255)*2-1)/Vertical#
           Terrain_VerticalMap#(x,z,1)=abs((Nz#/255)*2-1)/Vertical#
       next z
   next x
   delete image Terrain_Texture(1)
   make image from memblock Terrain_Texture(1),200
   texture object Terrain_ObjectN,1,Terrain_Texture(1)
   delete memblock 200
   for Tx=0 to Terrain_SectorsX#-1
       for Tz=0 to Terrain_SectorsZ#-1
           LODTerrain_UpDateHight(TX,TZ)
       next TZ
   next Tx
endfunction

`--------------
` Set Terrain Visible
`--------------
function LODTerrain_Visible(Vis)
   if Terrain_Enabled=1
      if Vis=1
         Terrain_Visible=1
         exclude object off Terrain_Object
         show object Terrain_Object
         exclude object off Terrain_ObjectN
         show object Terrain_ObjectN
      else
         Terrain_Visible=0
         exclude object on Terrain_Object
         hide object Terrain_Object
         exclude object on Terrain_ObjectN
         hide object Terrain_ObjectN
         for x=0 to Terrain_SectorsX#-1
            for z=0 to Terrain_SectorsZ#-1
               SegmentX=Terrain_SegmentX(Terrain_SegmentXZ(x,z),1)
               SegmentZ=Terrain_SegmentZ(Terrain_SegmentXZ(x,z),1)
               if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>0
                  LODTerrain_RemoveLOD(SegmentX,SegmentZ)
                  Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=0
               endif
               SegmentX=Terrain_SegmentX(Terrain_SegmentXZ(x,z),2)
               SegmentZ=Terrain_SegmentZ(Terrain_SegmentXZ(x,z),2)
               if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>0
                  LODTerrain_RemoveLOD(SegmentX,SegmentZ)
                  Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=0
               endif
               SegmentX=Terrain_SegmentX(Terrain_SegmentXZ(x,z),3)
               SegmentZ=Terrain_SegmentZ(Terrain_SegmentXZ(x,z),3)
               if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>0
                  LODTerrain_RemoveLOD(SegmentX,SegmentZ)
                  Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=0
               endif
               SegmentX=Terrain_SegmentX(Terrain_SegmentXZ(x,z),4)
               SegmentZ=Terrain_SegmentZ(Terrain_SegmentXZ(x,z),4)
               if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode<>0
                  LODTerrain_RemoveLOD(SegmentX,SegmentZ)
                  Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=0
               endif
            next z
         next x
      endif
   endif
endfunction

`--------------
` Cast ray on terrain
`--------------
function LODTerrain_Ray(PosX#,PosY#,PosZ#,ToPosX#,ToPosY#,ToPosZ#)
   rDis#=0
   dis=0
   Rays=500
   Accuracy=5
   FromPX#=PosX#
   FromPY#=PosY#
   FromPZ#=PosZ#
   ToPX#=ToPosX#
   ToPY#=ToPosY#
   ToPZ#=ToPosZ#
   repeat
      for r=1 to Rays
         TestPX#=FromPX#+(r*((ToPX#-FromPX#)/Rays))
         TestPY#=FromPY#+(r*((ToPY#-FromPY#)/Rays))
         TestPZ#=FromPZ#+(r*((ToPZ#-FromPZ#)/Rays))
         if TestPY#<LODTerrain_Get_Height(TestPX#,TestPZ#)
            FromPX#=FromPX#+((r-1)*((ToPX#-FromPX#)/Rays))
            FromPY#=FromPY#+((r-1)*((ToPY#-FromPY#)/Rays))
            FromPZ#=FromPZ#+((r-1)*((ToPZ#-FromPZ#)/Rays))
            ToPX#=TestPX#
            ToPY#=TestPY#
            ToPZ#=TestPZ#
            exit
         endif
      next r
      if r>Rays-1 then Acc=Accuracy:dis=1
      set vector3 2,FromPX#-ToPX#,FromPY#-ToPY#,FromPZ#-ToPZ#
      if length vector3(2)<5 then Acc=Accuracy
      inc Acc
   until Acc>Accuracy
   Terrain_RayXYZVector#(0)=ToPX#
   Terrain_RayXYZVector#(1)=LODTerrain_Get_Height(TestPX#,TestPZ#)
   Terrain_RayXYZVector#(2)=ToPZ#
   set vector3 2,PosX#-ToPX#,PosY#-ToPY#,PosZ#-ToPZ#
   if dis=0 then rDis#=length vector3(2)
endfunction rDis#

`--------------
` Get Terrain Height
`--------------
function LODTerrain_Get_Height(PosX#,PosZ#)
if Terrain_Enabled=1
   PosX#=PosX#-Terrain_PositionX#
   Posz#=PosZ#-Terrain_PositionZ#
   Ix=int(PosX#/Terrain_TileSize#)
   Iz=int(PosZ#/Terrain_TileSize#)
   Ix2=int(PosX#/(Terrain_TileSize#*2))*2
   Iz2=int(PosZ#/(Terrain_TileSize#*2))*2
   if Ix>-1 and Iz>-1 and Ix<Terrain_SizeX# and Iz<Terrain_SizeZ#
      Fx#=(PosX#-(Ix*Terrain_TileSize#))/Terrain_TileSize#
      Fz#=(PosZ#-(Iz*Terrain_TileSize#))/Terrain_TileSize#
      if (Ix2-Ix)=0 and (Iz2-Iz)=0
         if (((1-Fx#)-Fz#)-(Fz#-(1-Fx#)))>0
            Height#=int(Terrain_Height#(Ix,Iz))+((int(Terrain_Height#(Ix+1,Iz))-int(Terrain_Height#(Ix,Iz)))*Fx#)+((int(Terrain_Height#(Ix,Iz+1))-int(Terrain_Height#(Ix,Iz)))*Fz#)
         else
            Height#=int(Terrain_Height#(Ix+1,Iz+1))+((int(Terrain_Height#(Ix+1,Iz))-int(Terrain_Height#(Ix+1,Iz+1)))*(1-Fz#))+((int(Terrain_Height#(Ix,Iz+1))-int(Terrain_Height#(Ix+1,Iz+1)))*(1-Fx#))
         endif
      endif
      if (Ix2-Ix)=-1 and (Iz2-Iz)=-1
         if (((1-Fx#)-Fz#)-(Fz#-(1-Fx#)))>0
            Height#=int(Terrain_Height#(Ix,Iz))+((int(Terrain_Height#(Ix+1,Iz))-int(Terrain_Height#(Ix,Iz)))*Fx#)+((int(Terrain_Height#(Ix,Iz+1))-int(Terrain_Height#(Ix,Iz)))*Fz#)
         else
            Height#=int(Terrain_Height#(Ix+1,Iz+1))+((int(Terrain_Height#(Ix+1,Iz))-int(Terrain_Height#(Ix+1,Iz+1)))*(1-Fz#))+((int(Terrain_Height#(Ix,Iz+1))-int(Terrain_Height#(Ix+1,Iz+1)))*(1-Fx#))
         endif
      endif
      if (Ix2-Ix)=-1 and (Iz2-Iz)=0
         if (((1-Fz#)+Fx#)-(Fz#+(1-Fx#)))>0
            Height#=int(Terrain_Height#(Ix+1,Iz))+((int(Terrain_Height#(Ix,Iz))-int(Terrain_Height#(Ix+1,Iz)))*(1-Fx#))+((int(Terrain_Height#(Ix+1,Iz+1))-int(Terrain_Height#(Ix+1,Iz)))*Fz#)
         else
            Height#=int(Terrain_Height#(Ix,Iz+1))+((int(Terrain_Height#(Ix+1,Iz+1))-int(Terrain_Height#(Ix,Iz+1)))*Fx#)+((int(Terrain_Height#(Ix,Iz))-int(Terrain_Height#(Ix,Iz+1)))*(1-Fz#))
         endif
      endif
      if (Ix2-Ix)=0 and (Iz2-Iz)=-1
         if (((1-Fz#)+Fx#)-(Fz#+(1-Fx#)))>0
            Height#=int(Terrain_Height#(Ix+1,Iz))+((int(Terrain_Height#(Ix,Iz))-int(Terrain_Height#(Ix+1,Iz)))*(1-Fx#))+((int(Terrain_Height#(Ix+1,Iz+1))-int(Terrain_Height#(Ix+1,Iz)))*Fz#)
         else
            Height#=int(Terrain_Height#(Ix,Iz+1))+((int(Terrain_Height#(Ix+1,Iz+1))-int(Terrain_Height#(Ix,Iz+1)))*Fx#)+((int(Terrain_Height#(Ix,Iz))-int(Terrain_Height#(Ix,Iz+1)))*(1-Fz#))
         endif
      endif
   endif
   Height#=(Height#*(Terrain_Height#/100))+Terrain_PositionY#
endif
endfunction Height#

`--------------
` Remove lod segment
`--------------
function LODTerrain_RemoveLOD(SegmentX,SegmentZ)
   if Terrain_Segment(SegmentX,SegmentZ).Segment_OldLODMode=1
      if Terrain_Segment(SegmentX,SegmentZ).Segment_Limb>0
         exclude limb on Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
         hide limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
         exclude limb on Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
         hide limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
         Terrain_LOD1InUse(Terrain_Segment(SegmentX,SegmentZ).Segment_Index)=0
         Terrain_Segment(SegmentX,SegmentZ).Segment_Limb=0
         Terrain_Segment(SegmentX,SegmentZ).Segment_Index=0
      endif
   endif
   if Terrain_Segment(SegmentX,SegmentZ).Segment_OldLODMode=2
      if Terrain_Segment(SegmentX,SegmentZ).Segment_Limb>0
         exclude limb on Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
         hide limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
         exclude limb on Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
         hide limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
         Terrain_LOD2InUse(Terrain_Segment(SegmentX,SegmentZ).Segment_Index)=0
         Terrain_Segment(SegmentX,SegmentZ).Segment_Limb=0
         Terrain_Segment(SegmentX,SegmentZ).Segment_Index=0
      endif
   endif
   if Terrain_Segment(SegmentX,SegmentZ).Segment_OldLODMode=3
      if Terrain_Segment(SegmentX,SegmentZ).Segment_Limb>0
         exclude limb on Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
         hide limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
         exclude limb on Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
         hide limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb
         Terrain_LOD3InUse(Terrain_Segment(SegmentX,SegmentZ).Segment_Index)=0
         Terrain_Segment(SegmentX,SegmentZ).Segment_Limb=0
         Terrain_Segment(SegmentX,SegmentZ).Segment_Index=0
      endif
   endif
   Terrain_Segment(SegmentX,SegmentZ).Segment_OldLODMode=0
endfunction

`--------------
` Add lod Segment
`--------------
function LODTerrain_AddLOD(SegmentX,SegmentZ)
   if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=1 and Terrain_Segment(SegmentX,SegmentZ).Segment_OldLODMode<>1
      for o=0 to 20
         if Terrain_LOD1InUse(o)=0
            if Terrain_Segment(SegmentX,SegmentZ).Segment_Limb=0
               Terrain_LOD1InUse(o)=1
               Terrain_Segment(SegmentX,SegmentZ).Segment_OldLODMode=1
               Terrain_Segment(SegmentX,SegmentZ).Segment_Limb=Terrain_LOD1Limb(o)
               Terrain_Segment(SegmentX,SegmentZ).Segment_Index=o
               offset limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb,(SegmentX*6400)+3200,0,(SegmentZ*6400)+3200
               offset limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb,(SegmentX*6400)+3200,0,(SegmentZ*6400)+3200
               LODTerrain_SetLODHeight(SegmentX,SegmentZ)
            endif
         endif
      next o
   endif
   if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=2 and Terrain_Segment(SegmentX,SegmentZ).Segment_OldLODMode<>2
      for o=0 to 15
         if Terrain_LOD2InUse(o)=0
            if Terrain_Segment(SegmentX,SegmentZ).Segment_Limb=0
               Terrain_LOD2InUse(o)=1
               Terrain_Segment(SegmentX,SegmentZ).Segment_OldLODMode=2
               Terrain_Segment(SegmentX,SegmentZ).Segment_Limb=Terrain_LOD2Limb(o)
               Terrain_Segment(SegmentX,SegmentZ).Segment_Index=o
               offset limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb,(SegmentX*6400)+3200,0,(SegmentZ*6400)+3200
               offset limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb,(SegmentX*6400)+3200,0,(SegmentZ*6400)+3200
               LODTerrain_SetLODHeight(SegmentX,SegmentZ)
            endif
         endif
      next o
   endif
   if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=3 and Terrain_Segment(SegmentX,SegmentZ).Segment_OldLODMode<>3
      for o=0 to 10
         if Terrain_LOD3InUse(o)=0
            if Terrain_Segment(SegmentX,SegmentZ).Segment_Limb=0
               Terrain_LOD3InUse(o)=1
               Terrain_Segment(SegmentX,SegmentZ).Segment_OldLODMode=3
               Terrain_Segment(SegmentX,SegmentZ).Segment_Limb=Terrain_LOD3Limb(o)
               Terrain_Segment(SegmentX,SegmentZ).Segment_Index=o
               offset limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb,(SegmentX*6400)+3200,0,(SegmentZ*6400)+3200
               offset limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb,(SegmentX*6400)+3200,0,(SegmentZ*6400)+3200
               LODTerrain_SetLODHeight(SegmentX,SegmentZ)
            endif
         endif
      next o
   endif
endfunction

`--------------
` Set lod segment height
`--------------
function LODTerrain_SetLODHeight(SegmentX,SegmentZ)
   if Terrain_Segment(SegmentX,SegmentZ).Segment_Limb>0
      if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=1
         v=0:lock vertexdata for limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb,1
         for x=0 to 16
            for z=0 to 16
               set vertexdata position v,get vertexdata position x(v),int(Terrain_Height#((SegmentX*64)+(x*4),(SegmentZ*64)+(z*4))),get vertexdata position z(v)
               set vertexdata uv v,Terrain_VerticalMap#((SegmentX*64)+(x*4),(SegmentZ*64)+(z*4),0),Terrain_VerticalMap#((SegmentX*64)+(x*4),(SegmentZ*64)+(z*4),1)
               inc v
            next z
         next x
         unlock vertexdata
         v=0:lock vertexdata for limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb,1
         for x=0 to 16
            for z=0 to 16
               set vertexdata position v,get vertexdata position x(v),int(Terrain_Height#((SegmentX*64)+(x*4),(SegmentZ*64)+(z*4))),get vertexdata position z(v)
               set vertexdata uv v,Terrain_VerticalMap#((SegmentX*64)+(x*4),(SegmentZ*64)+(z*4),0),Terrain_VerticalMap#((SegmentX*64)+(x*4),(SegmentZ*64)+(z*4),1)
               inc v
            next z
         next x
         unlock vertexdata
      endif
      if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=2
         v=0:lock vertexdata for limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb,1
         for x=0 to 32
            for z=0 to 32
               set vertexdata position v,get vertexdata position x(v),int(Terrain_Height#((SegmentX*64)+(x*2),(SegmentZ*64)+(z*2))),get vertexdata position z(v)
               set vertexdata uv v,Terrain_VerticalMap#((SegmentX*64)+(x*2),(SegmentZ*64)+(z*2),0),Terrain_VerticalMap#((SegmentX*64)+(x*2),(SegmentZ*64)+(z*2),1)
               inc v
            next z
         next x
         unlock vertexdata
         v=0:lock vertexdata for limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb,1
         for x=0 to 32
            for z=0 to 32
               set vertexdata position v,get vertexdata position x(v),int(Terrain_Height#((SegmentX*64)+(x*2),(SegmentZ*64)+(z*2))),get vertexdata position z(v)
               set vertexdata uv v,Terrain_VerticalMap#((SegmentX*64)+(x*2),(SegmentZ*64)+(z*2),0),Terrain_VerticalMap#((SegmentX*64)+(x*2),(SegmentZ*64)+(z*2),1)
               inc v
            next z
         next x
         unlock vertexdata
      endif
      if Terrain_Segment(SegmentX,SegmentZ).Segment_LODMode=3
         v=0:lock vertexdata for limb Terrain_Object,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb,1
         for x=0 to 64
            for z=0 to 64
               set vertexdata position v,get vertexdata position x(v),int(Terrain_Height#((SegmentX*64)+x,(SegmentZ*64)+z)),get vertexdata position z(v)
               set vertexdata uv v,Terrain_VerticalMap#((SegmentX*64)+(x),(SegmentZ*64)+(z),0),Terrain_VerticalMap#((SegmentX*64)+(x),(SegmentZ*64)+(z),1)
               inc v
            next z
         next x
         unlock vertexdata
         v=0:lock vertexdata for limb Terrain_ObjectN,Terrain_Segment(SegmentX,SegmentZ).Segment_Limb,1
         for x=0 to 64
            for z=0 to 64
               set vertexdata position v,get vertexdata position x(v),int(Terrain_Height#((SegmentX*64)+x,(SegmentZ*64)+z)),get vertexdata position z(v)
               set vertexdata uv v,Terrain_VerticalMap#((SegmentX*64)+(x),(SegmentZ*64)+(z),0),Terrain_VerticalMap#((SegmentX*64)+(x),(SegmentZ*64)+(z),1)
               inc v
            next z
         next x
         unlock vertexdata
      endif
   endif
endfunction

`--------------
` Update terrain segment edges (Fix Leakages)
`--------------
function LODTerrain_EdgeFixLOD()
   for x=0 to (Terrain_SectorsX#*2)-1
      for z=0 to (Terrain_SectorsZ#*2)-1
      if Terrain_Segment(x,z).Segment_Limb>0
         if Terrain_Segment(x,z).Segment_LODMode=2
            LODTerrain_EdgeFixLOD32x32(x,z)
         endif
         if Terrain_Segment(x,z).Segment_LODMode=3
            LODTerrain_EdgeFixLOD64x64(x,z)
         endif
      endif
      next z
   next x
endfunction

`--------------
` Terrain edge fix on Segments 32x32
`--------------
function LODTerrain_EdgeFixLOD32x32(x,z)
   lock vertexdata for limb Terrain_Object,Terrain_Segment(x,z).Segment_Limb,1
   if x>0
      I=0
      if Terrain_Segment(x-1,z).Segment_LODMode<2
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64),(z*64)+(v*2)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            height#=height#+((int(Terrain_Height#((x*64),(z*64)+((v+2)*2)))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            inc v
         next v
      endif
      if Terrain_Segment(x-1,z).Segment_LODMode>1
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64),(z*64)+(v*2)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
         next v
      endif
   endif
   if x<(Terrain_SectorsX#*2)-1
      I=(32*33)
      if Terrain_Segment(x+1,z).Segment_LODMode<2
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64)+64,(z*64)+(v*2)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            height#=height#+((int(Terrain_Height#((x*64)+64,(z*64)+((v+2)*2)))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            inc v
         next v
      endif
      if Terrain_Segment(x+1,z).Segment_LODMode>1
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64)+64,(z*64)+(v*2)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
         next v
      endif
   endif
   if z>0
      I=0
      if Terrain_Segment(x,z-1).Segment_LODMode<2
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64)+(v*2),(z*64)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,33
            height#=height#+((int(Terrain_Height#((x*64)+((v+2)*2),(z*64)))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,33
            inc v
         next v
      endif
      if Terrain_Segment(x,z-1).Segment_LODMode>1
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64)+(v*2),(z*64)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,33
         next v
      endif
   endif
   if z<(Terrain_SectorsZ#*2)-1
      I=32
      if Terrain_Segment(x,z+1).Segment_LODMode<2
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64)+(v*2),(z*64)+64))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,33
            height#=height#+((int(Terrain_Height#((x*64)+((v+2)*2),(z*64)+64))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,33
            inc v
         next v
      endif
      if Terrain_Segment(x,z+1).Segment_LODMode>1
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64)+(v*2),(z*64)+64))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,33
         next v
      endif
   endif
   unlock vertexdata
   lock vertexdata for limb Terrain_ObjectN,Terrain_Segment(x,z).Segment_Limb,1
   if x>0
      I=0
      if Terrain_Segment(x-1,z).Segment_LODMode<2
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64),(z*64)+(v*2)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            height#=height#+((int(Terrain_Height#((x*64),(z*64)+((v+2)*2)))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            inc v
         next v
      endif
      if Terrain_Segment(x-1,z).Segment_LODMode>1
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64),(z*64)+(v*2)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
         next v
      endif
   endif
   if x<(Terrain_SectorsX#*2)-1
      I=(32*33)
      if Terrain_Segment(x+1,z).Segment_LODMode<2
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64)+64,(z*64)+(v*2)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            height#=height#+((int(Terrain_Height#((x*64)+64,(z*64)+((v+2)*2)))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            inc v
         next v
      endif
      if Terrain_Segment(x+1,z).Segment_LODMode>1
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64)+64,(z*64)+(v*2)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
         next v
      endif
   endif
   if z>0
      I=0
      if Terrain_Segment(x,z-1).Segment_LODMode<2
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64)+(v*2),(z*64)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,33
            height#=height#+((int(Terrain_Height#((x*64)+((v+2)*2),(z*64)))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,33
            inc v
         next v
      endif
      if Terrain_Segment(x,z-1).Segment_LODMode>1
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64)+(v*2),(z*64)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,33
         next v
      endif
   endif
   if z<(Terrain_SectorsZ#*2)-1
      I=32
      if Terrain_Segment(x,z+1).Segment_LODMode<2
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64)+(v*2),(z*64)+64))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,33
            height#=height#+((int(Terrain_Height#((x*64)+((v+2)*2),(z*64)+64))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,33
            inc v
         next v
      endif
      if Terrain_Segment(x,z+1).Segment_LODMode>1
         for v=0 to 32-1
            height#=int(Terrain_Height#((x*64)+(v*2),(z*64)+64))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,33
         next v
      endif
   endif
   unlock vertexdata
endfunction

`--------------
` Terrain edge fix on Segments 64x64
`--------------
function LODTerrain_EdgeFixLOD64x64(x,z)
   lock vertexdata for limb Terrain_Object,Terrain_Segment(x,z).Segment_Limb,1
   if x>0
      I=0
      if Terrain_Segment(x-1,z).Segment_LODMode<3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64),(z*64)+v))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            height#=height#+((int(Terrain_Height#((x*64),(z*64)+(v+2)))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            inc v
         next v
      endif
      if Terrain_Segment(x-1,z).Segment_LODMode=3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64),(z*64)+v))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
         next v
      endif
   endif
   if x<(Terrain_SectorsX#*2)-1
      I=(64*65)
      if Terrain_Segment(x+1,z).Segment_LODMode<3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64)+64,(z*64)+v))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            height#=height#+((int(Terrain_Height#((x*64)+64,(z*64)+(v+2)))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            inc v
         next v
      endif
      if Terrain_Segment(x+1,z).Segment_LODMode=3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64)+64,(z*64)+v))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
         next v
      endif
   endif
   if z>0
      I=0
      if Terrain_Segment(x,z-1).Segment_LODMode<3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64)+v,(z*64)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,65
            height#=height#+((int(Terrain_Height#((x*64)+(v+2),(z*64)))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,65
            inc v
         next v
      endif
      if Terrain_Segment(x,z-1).Segment_LODMode=3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64)+v,(z*64)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,65
         next v
      endif
   endif
   if z<(Terrain_SectorsZ#*2)-1
      I=64
      if Terrain_Segment(x,z+1).Segment_LODMode<3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64)+v,(z*64)+64))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,65
            height#=height#+((int(Terrain_Height#((x*64)+(v+2),(z*64)+64))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,65
            inc v
         next v
      endif
      if Terrain_Segment(x,z+1).Segment_LODMode=3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64)+v,(z*64)+64))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,65
         next v
      endif
   endif
   unlock vertexdata
   lock vertexdata for limb Terrain_ObjectN,Terrain_Segment(x,z).Segment_Limb,1
   if x>0
      I=0
      if Terrain_Segment(x-1,z).Segment_LODMode<3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64),(z*64)+v))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            height#=height#+((int(Terrain_Height#((x*64),(z*64)+(v+2)))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            inc v
         next v
      endif
      if Terrain_Segment(x-1,z).Segment_LODMode=3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64),(z*64)+v))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
         next v
      endif
   endif
   if x<(Terrain_SectorsX#*2)-1
      I=(64*65)
      if Terrain_Segment(x+1,z).Segment_LODMode<3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64)+64,(z*64)+v))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            height#=height#+((int(Terrain_Height#((x*64)+64,(z*64)+(v+2)))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
            inc v
         next v
      endif
      if Terrain_Segment(x+1,z).Segment_LODMode=3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64)+64,(z*64)+v))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I
         next v
      endif
   endif
   if z>0
      I=0
      if Terrain_Segment(x,z-1).Segment_LODMode<3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64)+v,(z*64)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,65
            height#=height#+((int(Terrain_Height#((x*64)+(v+2),(z*64)))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,65
            inc v
         next v
      endif
      if Terrain_Segment(x,z-1).Segment_LODMode=3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64)+v,(z*64)))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,65
         next v
      endif
   endif
   if z<(Terrain_SectorsZ#*2)-1
      I=64
      if Terrain_Segment(x,z+1).Segment_LODMode<3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64)+v,(z*64)+64))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,65
            height#=height#+((int(Terrain_Height#((x*64)+(v+2),(z*64)+64))-height#)/2)
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,65
            inc v
         next v
      endif
      if Terrain_Segment(x,z+1).Segment_LODMode=3
         for v=0 to 64-1
            height#=int(Terrain_Height#((x*64)+v,(z*64)+64))
            set vertexdata position I,get vertexdata position x(I),height#,get vertexdata position z(I)
            inc I,65
         next v
      endif
   endif
   unlock vertexdata
endfunction

`--------------
` UpDate Hight
`--------------
function LODTerrain_UpDateHight(TileX,TileZ)
   if Terrain_Enabled=1
   I=0:lock vertexdata for limb Terrain_Object,Terrain_Limb(TileX,TileZ),1
      for x=0 to 32
         for z=0 to 32
            set vertexdata position I,get vertexdata position x(I),int(Terrain_Height#((TileX*128)+(x*4),(TileZ*128)+(z*4))),get vertexdata position z(I)
            set vertexdata uv I,Terrain_VerticalMap#((TileX*128)+(x*4),(TileZ*128)+(z*4),0),Terrain_VerticalMap#((TileX*128)+(x*4),(TileZ*128)+(z*4),1)
            inc i
         next z
      next x
   unlock vertexdata
   I=0:lock vertexdata for limb Terrain_ObjectN,Terrain_Limb(TileX,TileZ),1
      for x=0 to 32
         for z=0 to 32
            set vertexdata position I,get vertexdata position x(I),int(Terrain_Height#((TileX*128)+(x*4),(TileZ*128)+(z*4))),get vertexdata position z(I)
            set vertexdata uv I,Terrain_VerticalMap#((TileX*128)+(x*4),(TileZ*128)+(z*4),0),Terrain_VerticalMap#((TileX*128)+(x*4),(TileZ*128)+(z*4),1)
            inc i
         next z
      next x
   unlock vertexdata
   SegmentX=Terrain_SegmentX(Terrain_Limb(TileX,TileZ),1)
   SegmentZ=Terrain_SegmentZ(Terrain_Limb(TileX,TileZ),1)
   LODTerrain_SetLODHeight(SegmentX,SegmentZ)
   SegmentX=Terrain_SegmentX(Terrain_Limb(TileX,TileZ),2)
   SegmentZ=Terrain_SegmentZ(Terrain_Limb(TileX,TileZ),2)
   LODTerrain_SetLODHeight(SegmentX,SegmentZ)
   SegmentX=Terrain_SegmentX(Terrain_Limb(TileX,TileZ),3)
   SegmentZ=Terrain_SegmentZ(Terrain_Limb(TileX,TileZ),3)
   LODTerrain_SetLODHeight(SegmentX,SegmentZ)
   SegmentX=Terrain_SegmentX(Terrain_Limb(TileX,TileZ),4)
   SegmentZ=Terrain_SegmentZ(Terrain_Limb(TileX,TileZ),4)
   LODTerrain_SetLODHeight(SegmentX,SegmentZ)
   endif
endfunction



