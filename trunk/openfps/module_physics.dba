remstart
/////////////////////////////////////////////////////
//
// OpenFPS PHYSICS Module
//
// Created by thenerd
// Maintained by thenerd
//
/////////////////////////////////////////////////////

----- Changelog:
(9/20/10) - thenerd - Created.

----- To-Do:
*Blank*

----- Purpose:
Handles all physics-related tasks such as:
-Movement
-Shooting
-Vehicles
-Dynamic Bodies
-Ragdolls

----- Dependancies and Conflicts (IMPORTANT STUFF):
This module uses version 1.53 of the NDB Newton wrapper.
the latest version can be found here:
http://forum.thegamecreators.com/?m=forum_view&t=154086&b=5

----- Other Notes:
All the functions and variables in this module
use the prefix "PHY_" in their names for clarity.

----- Object setup options:
MaterialTypes:
* Default (0) - No Settings. (DEFAULT)
PLANNED:
* Wood    (1) - Wood Material. 
* Metal   (2) - Metal Material.

remend

/////////////////////////////////////////////////////
// 	GLOBALS
/////////////////////////////////////////////////////

`MaterialTypes:
global MType_DEFAULT  as integer
`NDB Variables:
global PHY_WorldSize# as float
global PHY_time#      as float
global PHY_Debug      as integer
global PHY_CLICK	  as integer

/////////////////////////////////////////////////////
// 	FUNCTIONS
/////////////////////////////////////////////////////

function PHY_init(world_size#,Debunk):
	`Start Newton
	NDB_NewtonCreate
	
	`Set Debug
	PHY_Debug=Debunk
	
	`Set world limits
	PHY_WorldSize#=world_size#
	NDB_SetVector 1, 0-PHY_WorldSize#,0-PHY_WorldSize#,0-PHY_WorldSize#
	NDB_SetVector 2, PHY_WorldSize#,PHY_WorldSize#,PHY_WorldSize#
	NDB_NewtonSetWorldSize
	
	`Assign Material Types
	MType_DEFAULT=0
	
	`Reset timer
	PHY_time# = NDB_GetElapsedTimeInSec()
endfunction

function PHY_AddTerrain(TerrainID,Collision):
	`Add BlitzTerrain object.
endfunction

function PHY_AddStaticObject(ObjectID,MaterialType):
	`Add static object.
endfunction

function PHY_AddDynamicObject(ObjectID,MaterialType,Link):
	`Add dynamic object.
	Col = NDB_NewtonCreateBox(object size x(ObjectID),object size y(ObjectID),object size z(ObjectID))
	Obj = NDB_NewtonCreateBody(Col)
	NDB_NewtonBodySetMassMatrix Obj,10.0,1.0,1.0,1.0
	NDB_BodySetDBProData Obj,1
	if Link>0 then NDB_NewtonBodySetDestructorCallback Obj
endfunction

function PHY_update():
	`Debug
	if PHY_Debug>0:
		PHY_DebugTest()
	endif
	
	`Update physics using elapsed time (TBM!)
	time# = NDB_GetElapsedTimeInSec()
	NDB_NewtonUpdate time#
endfunction

function PHY_DebugTest():

	`Tests the physics system.
	`NDB_DebugDrawNewtonLines
	
	`Throw spheres
	if mouseclick()=1 and PHY_CLICK=0
		PHY_CLICK=1
		`Make Sphere
		PHY_MakeDebugSphere(camera position x(),camera position y(),camera position z(),50.0,20.0)
	endif
	if mouseclick()=0 then PHY_CLICK=0
	
endfunction

function PHY_MakeDebugSphere(x#,y#,z#,s#,mass#)
	Col = NDB_NewtonCreateSphere( s# )
	Body = NDB_NewtonCreateBody(Col)
	`Set initial position and rotation
	NDB_BuildMatrix 0.0, 0.0, 0.0,x#,y#,z#
	NDB_NewtonBodySetMatrix Body
	NDB_CalculateMISphereSolid mass#, s#
	NDB_NewtonBodySetMassMatrix Body, mass#
	NDB_NewtonReleaseCollision Col

	Object = grabResource(res_Object)
	make object sphere Object,s#
	color object Object,GetColor()
	set object ambience Object,50
	position object Object,x#,y#,z#
	
	NDB_BodySetDBProData Body,Object
	NDB_NewtonBodySetDestructorCallback Body
	NDB_BodySetGravity Body,1
		
	`Calculate Vector
	x1#=camera position x():y1#=camera position y():z1#=camera position z():move camera 1.0
	x2#=camera position x():y2#=camera position y():z2#=camera position z():move camera -1.0
	unit_x#=x2#-x1#:unit_y#=y2#-y1#:unit_z#=z2#-z1#:vel#=1000.0
	vel_x#=unit_x#*vel#:vel_y#=unit_y#*vel#:vel_z#=unit_z#*vel#
	`Set Vector
	NDB_SetVector vel_x#, vel_y#, vel_z#
	NDB_NewtonBodySetVelocity Body
endfunction

function PHY_end(EndAll):
	`Clean up and end...WARNING! THIS DELETES DB OBJECTS AS WELL!
	if EndAll>0:
		NDB_NewtonDestroy
	endif
endfunction

/////////////////////////////////////////////////////
// 	MISC
/////////////////////////////////////////////////////

function GetColor()
	repeat
		r = rnd(1)*255
		g = rnd(1)*255
		b = rnd(1)*255
	until r<>0 or g<>0 or b<> 0
	color =  rgb(r,g,b)
endfunction color