Remstart
/////////////////////////////////////////////////////
//
// OpenFPS USER INTERFACE MODULE            
//
// Created by miso    
//                           
//
/////////////////////////////////////////////////////
***** Included Source File *****

----- Changelog:
(06/23/10) - miso     - Created
                      - Implemented the basic text and bitmap font commands
(06/26/10) - miso     - Implemented the Graphic Cursor commands
(06/26/10) - miso     - Added Globals SyS_MouseMoveX, MouseMoveY
(06/26/10) - miso     - Updated UI_Terminate() to clear the mouse image too
(06/26/10) - miso     - Modified UI_Mousehandle() not to move cursor when faded out
(06/27/10) - miso     - Added some basic debug commands for internal use, its works only 1 function deep yet,
                        no need to bother with it.
(06/27/10) - miso     - Added basic input commands and window commands.
						Added console, can be called pressing TAB key.
						Added 2 test console commands, show mouse, hide mouse.
						(Be patient, I will add the comments soon, and reorganize the whole)
 

----- To-Do:



----- Purpose:
Shows information on screen for players. Handle graphic fonts, mouse, buttons, sliders.
Includes text, centertext, input, console and window functions.


----- Dependancies and Conflicts (IMPORTANT STUFF):
Needs the free plugin Advanced Sprites.
http://forum.thegamecreators.com/?m=forum_view&t=113378&b=5

With the mouse commands, it needs Ians matrix utils too.

----- Conflicts
Conflicts with the movement module, because mouse commands and movement module both use
the mousemovex() and mousemovey() commands, and calling it clears the mousemove puffers.
Need a Global variable, that knows who may control these commands first.

----- Other Notes:
Usage (IMPORTANT***):

This module loads graphic fonts, can be used in any of the other modules. It does not load the usual media type
like Db images, it handles its own resources. Variables here are hidden, no need to modify or watch them.

----- Function List:

----------MAIN  COMMANDS
UI_Init()     - no parameters, start all gui functions
UI_Handle()   - no parameters, handle all gui functions, must be before sync
UI_Terminate()- no parameters, unload all gui media, free used arrays
TerminateUI() - no params, just the same as before, made this one just to be similar to the other terminate functions

----------TEXT  COMMANDS
UI_LoadStringMap(ID,name$,spacing) - loads a font file to ID(integer 1-8),name$ will be the route and name.
                                     Font will be a monospace font with space value spacing (integer) 
UI_Text(ID,x,y,sstring$)           - draws a text(sstring$) with the choosen font ID to screen x,y.
UI_Centertext(ID,x,y,sstring$)     - same as before, just centered

----------MOUSE COMMANDS
UI_InitMouse(string$)        - loads a mousecursor image from HDD (route and filename=string$). Sets the basic mouse variables.
UI_HandleMouse()             - no parameters, handle the mouse. 
UI_HideMouse()               - no params, hides the graphic mouse.
UI_ShowMouse()               - no params, shows the graphic mouse.
UI_SetSmoothMouseOn(value)   - its a test, doesnot work well yet, dont use
UI_SetSmoothMouseOff()       - no params, its a test, doesnot work well yet, dont use
UI_FadeOutMouse()            - fades out the mouse
UI_FadeInMouse()             - fades in the mouse
UI_SetMousePosition(x,y)     - set the graphic mouse cursor position to screen x,y in pixels
UI_MouseX()                  - returns the graphic mouse position X in pixels
UI_MouseY()                  - returns the graphic mouse position Y in pixels
UI_AskMouseHidden()          - returns 1 if graphic mouse is hidden           

----------TIMER COMMANDS
UI_CreateMouseFaderTicker()  - Timer command for internal use, dont bother with it
UI_AskMouseFaderTicker()     - Timer command for internal use, dont bother with it
UI_DestroyMouseFaderTicker() - Timer command for internal use, dont bother with it

----------DEBUG COMMANDS     :for internal use, we wont call them in the final build
UI_StartDebugMode()                    - No parameters
UI_StopDebugMode()                     - No parameters
UI_SetDebugPosition(function$,source$) - Tells the debugger wich function we use at the moment
UI_RestoreDebugPosition()              - Tells the debugger, that we finished our function
UI_CheckDXSprites()                    - No parameters, checks if advanced sprites initialized, stops running of does not
UI_CheckFile(filename$)                - Checks if file is on HDD in given route and with given name, halt if does not exists

----------WINDOW COMMANDS    :will fit as a background for console commands
UI_InitAndLoadWindow(filename$)        - loads a window image for use. only 1 window implemented for the console
UI_PutWindow(X,Y,width,heigth)         - Draws a window to screen with preloaded gui to x y. Can be called multiple times.

----------INPUT COMMANDS     :basic input commands, later it will be enhanced.       
UI_InitInput()                         - as for now, its unused... yet.
UI_CMDInput(fontID,X,Y,fixstring$,maxcharacter) -begins an input event with font ID at x,y
UI_CheckInput()                        - called by UI_handle, no need to bother
UI_Inputready()                        - returns 1 if an input procedure is ongoing
UI_DestroyInput()                      - finishes the ongoing input event. (happens when user hits enter)
remend



`=========Constants=========`
#Constant UI_False     = 0          :` mania
#Constant UI_True      = 1          :` mania
#Constant UI_Maxfonts  = 8          :` maximum fonts, that can be loaded, 8 should be more than enough
`===========================`

`==========Globals==========`
Global UI_Display          as MyScreenType    : `for basic display data
Global UI_Mouse            as MouseType       : `stores the parameters of the graphic mouse
Global UI_Mousefadertimer  as Integer         : `ticker for mousefader commands, no need to handle manually
Global SyS_MouseMoveX      as Integer         : `replacement of mousemovex()
Global SyS_MouseMoveY      as Integer         : `replacement of mousemovey()

Global UI_DebugMode            as Boolean     : `internal debug variables, no need to worry about them
Global UI_FunctionName$        as String      : `internal debug variables, no need to worry about them
Global UI_IncludedFileName$    as String      : `internal debug variables, no need to worry about them
Global UI_OldFunctionName$     as String      : `internal debug variables, no need to worry about them
Global UI_OldIncludedFileName$ as String      : `internal debug variables, no need to worry about them

Global UI_mywindow             as Mywindowtype: `for windows commands, not very useful, gadgets are better     
Global UI_Input                as myinputtype : `basic input data will be stored here

Global UI_EVENT_ConsoleInput    as Boolean     : `true, if the console is shown
Global UI_EVENT_ConsoleChanged  as Boolean     : `true if user just hitted tab
Global UI_EVENT_ConsoleOffset   as Integer     : `Y offset for command line
Global UI_EVENT_ConsoleState    as Integer     : `1 if console is appearing 2 if disappearing, 0 if nothing to do


`===========================`

`===========Types===========`
//will hold basic ascii data for bitmap fonts
Type MyStringmapType
   Ascii  	 as Byte                : `ascii code table refined to the bitmap font image. Saves memory if remains byte.
   BitmapID  as Integer             : `pointer ID for the bitmap image
Endtype

//
Type MyCharType
   Character as Integer             :  `basic string data
Endtype

//will hold basic data for the user interface module
Type MyScreenType
	Width                as Integer : `screen width
	Height               as Integer : `screen height
	Middlewidth          as Integer : `halfwidth, in some cases we save a divide to count that value
	Middleheight         as Integer : `halfheight, in soma cases, we save a divide   
	Dxspriteinitialized  as Boolean : `1=initialized (I prefer to keep it boolean, for the final build we may change it to integer, if you like)
Endtype

//will hold basic data for the graphic mouse
Type MouseType
    Initialized   as  Boolean          : `true if initialized         
	ID            as  Integer          : `mouse cursor image image pointer ID (adv spr)
	Hidden        as  Boolean          : `true if mouse is hidden     
	X             as  Integer          : `mouse x coord    
	Y             as  Integer          : `mouse y coord    
	Smooth        as  Boolean          : `true=smoothmouse on
	Smoothvalue   as  Integer          : `smoothing value 
	XMoveBuffer   as  Integer          : `smooth puffer                                   
	YMoveBuffer   as  Integer          : `smooth puffer                                         
	Fadevalue     as  Integer          : `current alpha value, dont change manually
	Fadingout     as  Boolean          : `1 if mouse cursor is currently fading out                  
	Fadingin      as  Boolean          : `1 if mouse cursor is currently fading in                      
Endtype

//will hold basic data for the input commands
 TYPE myinputtype
   ID           AS INTEGER
   FixString    AS STRING
   MaxCharacter AS INTEGER
   PosX         AS INTEGER
   PosY         AS INTEGER
   Alive        AS INTEGER
   Current      AS STRING
   Result       AS STRING
   Center       AS INTEGER
   Initialized  AS INteger
ENDTYPE


//will hold basic data for a window gui graph
Type mywindowtype
   ID 		as Integer
   Xwidth 	as Integer
   Yrow 	as Integer
Endtype
`===========================`


`=========Functions=========`
/////////////////////////////////////////////////////
//MAIN COMMANDS
/////////////////////////////////////////////////////

Function UI_Init()
//***************************************************************************************
//*   miso                                                                              *
//*     This command will initialize the ui functions, and starts the advanced sprite   *
//*     plugin.                                                                         *
//***************************************************************************************

// Start Debugmode
	UI_StartDebugmode()

// Setup basic data
	UI_Display.Width                = Screen Width()
	UI_Display.Height               = Screen Height()
	UI_Display.MiddleWidth          = UI_Display.Width/2 
	UI_Display.MiddleHeight         = UI_Display.Height/2 
	UI_Display.Dxspriteinitialized  = UI_True
// Init Advanced Sprite
	Dxs Initialize
// creates 8 blank ascii font
    Global Dim UI_Stringmap(8,258)  as Mystringmaptype
    Global Dim UI_chain(512)        as Mychartype
// load our test fonts
	UI_loadStringmap(1,"media\fonts\smallgoldfont.dat",8)
	UI_loadStringmap(2,"media\fonts\lcdred.dat",16)
	UI_loadStringmap(3,"media\fonts\testfont.dat",16)
	UI_loadStringmap(4,"media\fonts\system_w_8x8.dat",8)

// load test window
	UI_InitandloadWindow("media\windows\windowuntitled2.dat")
	
// load and init graphic mouse
	UI_InitMouse("media\cursors\testcursor.dds")	

	

Endfunction


Function UI_Handle()
//***************************************************************************************
//*   miso                                                                              *
//*     This command will handle graphic mouses, windows buttons and bars, etc.         *
//*                                                                                     *
//***************************************************************************************
SyS_MouseMoveX=MouseMoveX():SyS_MouseMoveY=MouseMoveY()
UI_CheckInput()
UI_HandleConsole()
UI_HandleMouse()
Endfunction



Function UI_Terminate()
//***************************************************************************************
//*   miso                                                                              *
//*     This command will unload all ui related media.                                  *
//*                                                                                     *
//***************************************************************************************
Local x as Integer

	If UI_Display.DxSpriteInitialized=UI_True
		For x=1 to UI_MaxFonts
			If UI_stringmap(x,258).bitmapID>0 Then DXS DELETE SPRITE UI_stringmap(x,258).bitmapID	
		Next x
	    UnDim UI_Stringmap()
    	UnDim UI_chain()
		If UI_Mouse.Initialized=UI_True then DXS DELETE SPRITE UI_Mouse.ID
	Endif
Endfunction




Function TerminateUI()
//***************************************************************************************
//*   miso                                                                              *
//*     This command will unload all ui related media. Made only to be similar to the   *
//*     other modules terminate functions.                                              *
//***************************************************************************************
UI_Terminate()
Endfunction


/////////////////////////////////////////////////////
//FONT COMMANDS
/////////////////////////////////////////////////////

Function UI_LoadStringMap(ID,name$,spacing)
//***************************************************************************************
//*   miso                                                                              *
//*     This command will load a bitmap font. ID must be 1-8, name$ must be the route   *
//*     and name of the font.dat file, spacing will be the space between chars in pixel.*
//*                                                                                     *
//***************************************************************************************
Local a$ as String:Local b$ as String:Local c$ as String
	UI_SetDebugPosition("UI_LoadStringMap()","module_ui.dba")
	// check if advanced sprites initialized
	UI_CheckDXSprites()
	// check if fontfile exist
	UI_CheckFile(name$)
		Open To Read 1,name$
				//read the bitmapfontname and load
				Read String 1,a$:b$=First Token$(a$,"="):c$=Next Token$("=")
				//Check if bitmapfont image exist
				 UI_CheckFile(c$)
				 UI_stringmap(ID,258).bitmapID= DXS CREATE SPRITE(c$)
				DXS SET SPRITE CENTER  UI_stringmap(ID,258).bitmapID,0,0
    
			    //read the bitmap font width
			    Read String 1,a$:b$=First Token$(a$,"="):c$=Next Token$("=")
			    UI_stringmap(ID,257).ascii = Val(c$)
		
				//read the bitmap font height
				Read String 1,a$:b$=First Token$(a$,"="):c$=Next Token$("=")
				UI_stringmap(ID,257).bitmapID = val(c$)
				DXS SET SPRITE TILE SIZE  UI_stringmap(ID,258).bitmapID, UI_stringmap(ID,257).ascii, UI_stringmap(ID,257).bitmapID    ` Cut the sprites into 32x32 pixels tiles.
				DXS SET SPRITE SCALE  UI_stringmap(ID,258).bitmapID,100,100
			    UI_stringmap(ID,258).ascii=spacing
		
				//load the ascii codetable
				For x=1 to 256
					 Read String 1,a$
					 b$=First Token$(a$,"=")
					 c$=Next Token$("=")
					 UI_stringmap(ID,x).ascii=Val(b$)
					 UI_stringmap(ID,x).bitmapID=Val(c$)
				Next x
		Close File 1
	UI_RestoreDebugPosition()
Endfunction



Function UI_Text(ID,x,y,sstring$)
//***************************************************************************************
//*   miso                                                                              *
//*     This command put a graphic text to the screen with bitmapfont ID,               *
//*     drawing to screen x,y in pixel, and the text will be sstring$.                  *
//*     Function was created to work similar to the normal DB Text command.             *
//*                                                                                     *
//***************************************************************************************
  Local UI_StringWidth as Integer:Local xx as Integer

  UI_StringWidth=len(sstring$)
	For xx=1 to UI_StringWidth:UI_chain(xx).character=Asc(Mid$(sstring$,xx)):Next xx
	  DXS BEGIN SPRITE RENDER UI_stringmap(ID,258).bitmapID
		  For xx=1 to UI_StringWidth
		        DXS DRAW SPRITE TILE UI_stringmap(ID,258).bitmapID,UI_stringmap(ID,UI_chain(xx).character).bitmapID,x+((xx-1)*UI_stringmap(ID,258).ascii),y
		  Next xx
	  DXS END SPRITE RENDER UI_stringmap(ID,258).bitmapID
Endfunction




Function UI_CenterText(ID,x,y,sstring$)
//***************************************************************************************
//*   miso                                                                              *
//*     Center text command.                                                            *
//*                                                                                     *
//*                                                                                     *
//*                                                                                     *
//***************************************************************************************
  Local UI_StringWidth as Integer:Local xx as Integer
  Local UI_BitmapWidth as Integer:Local UI_BitmapOffset as Integer

   UI_StringWidth=Len(sstring$)
   UI_BitmapOffset=(UI_stringmap(ID,258).ascii*UI_StringWidth)/2
	 For xx=1 to UI_StringWidth:UI_chain(xx).character=Asc(Mid$(sstring$,xx)):Next xx
		DXS BEGIN SPRITE RENDER UI_stringmap(ID,258).bitmapID
			For xx=1 to UI_StringWidth
					DXS DRAW SPRITE TILE UI_stringmap(ID,258).bitmapID,UI_stringmap(ID,UI_chain(xx).character).bitmapID,x+((xx-1)*UI_stringmap(ID,258).ascii)-UI_BitmapOffset,y
			Next xx
		DXS END SPRITE RENDER UI_stringmap(ID,258).bitmapID
Endfunction

/////////////////////////////////////////////////////
//CONSOLE  COMMANDS
/////////////////////////////////////////////////////
Function UI_HandleConsole()
  If inkey$()="	" and UI_EVENT_ConsoleChanged=0
	Clear Entry Buffer
	UI_Input.Current=""
	If UI_EVENT_Consoleinput=0
		    UI_EVENT_ConsoleOffset=-48
			UI_EVENT_Consolestate=1
  			UI_EVENT_Consoleinput=1
			UI_CMDInput(3,0,8+UI_EVENT_ConsoleOffset,"CMD>",30)
			UI_EVENT_ConsoleChanged=1
	Else
	UI_EVENT_Consolestate=2
	UI_EVENT_Consoleinput=0
	UI_EVENT_ConsoleChanged=1
	UI_DestroyInput()
	Clear Entry Buffer
	UI_Input.Current=""
  	Endif
  Endif
  
  If UI_Event_ConsoleState=1
  	UI_EVENT_ConsoleOffset=UI_EVENT_ConsoleOffset+4
  	UI_CMDInput(3,0,8+UI_EVENT_ConsoleOffset,"CMD>",30)
  Endif
  If UI_Event_ConsoleState=2
 	UI_EVENT_ConsoleOffset=UI_EVENT_ConsoleOffset-4
 	UI_CMDInput(3,0,8+UI_EVENT_ConsoleOffset,"CMD>",30)
  Endif
   
  If UI_EVENT_ConsoleOffset=-48 then UI_Event_ConsoleState=0
  If UI_EVENT_ConsoleOffset=0 then UI_Event_ConsoleState=0
   
  
  	If UI_EVENT_Consoleinput=1 or UI_EVENT_Consolestate=2
  		UI_Putwindow(0,0+UI_EVENT_ConsoleOffset,63,2)
  	Endif
	
	If UI_EVENT_ConsoleChanged=1
		If Inkey$()<>"	" then UI_EVENT_ConsoleChanged=0
	Endif
  
 // Checks the possible results and apply the commands
 If UI_Input.alive=3
	UI_EVENT_ConsoleInput=0
	If Upper$(UI_Input.result)="HIDE MOUSE" then UI_FadeOutMouse()
	If Upper$(UI_Input.result)="SHOW MOUSE" then UI_FadeInMouse()
 Endif

Endfunction




/////////////////////////////////////////////////////
//INPUT   COMMANDS
/////////////////////////////////////////////////////
Function UI_InitInput()
   rem its evaluated
Endfunction
`--------------------------------------------------------------------------------------------------------------------


`--------------------------------------------------------------------------------------------------------------------
Function UI_CheckInput()
If UI_Input.alive=1    

      If Returnkey()=1
         Clear Entry Buffer
         UI_Input.result=UI_Input.current
         UI_Input.alive=3
      Endif

      UI_Input.current=UI_Input.current+Entry$() : Clear Entry Buffer
      If Scancode()=14
      	If Scancode()=14 Then UI_Input.current=Left$(UI_Input.current,Len(UI_Input.current)-1)
      	Clear Entry Buffer
      Endif

      rem Entry Line
      If Len(UI_Input.current)>UI_Input.maxcharacter then UI_Input.current=Left$(UI_Input.current,UI_Input.maxcharacter)
      UI_Text(UI_Input.id,UI_Input.posx,UI_Input.posy,UI_Input.fixstring+(UI_Input.current)+"*")

Endif
Endfunction
`--------------------------------------------------------------------------------------------------------------------

`--------------------------------------------------------------------------------------------------------------------
Function UI_CMDInput(stringmapID,x,y,fixstring$,maxcharacter)
	Clear Entry Buffer:Clear Entry Buffer
	rem freestring myinput(1)(1).result
	UI_Input.ID=stringmapid
	UI_Input.fixstring=fixstring$
	UI_Input.posx=x
	UI_Input.posy=y
	UI_Input.alive=1
	UI_Input.center=0
	UI_Input.maxcharacter=maxcharacter
Endfunction
`--------------------------------------------------------------------------------------------------------------------

`--------------------------------------------------------------------------------------------------------------------
Function UI_DestroyInput()
	UI_Input.alive=0
Endfunction
`--------------------------------------------------------------------------------------------------------------------

`--------------------------------------------------------------------------------------------------------------------
Function UI_InputReady()
	Local a as Integer
	a=UI_Input.alive
Endfunction a
`--------------------------------------------------------------------------------------------------------------------


/////////////////////////////////////////////////////
//WINDOWS COMMANDS
/////////////////////////////////////////////////////

`--------------------------------------------------------------------------------------------------------------------
Function UI_InitAndLoadWindow(name$)
Local a$ as String:Local b$ as String:Local c$ as String
	UI_SetDebugPosition("UI_InitAndLoadWindow()","module_ui.dba")
		UI_CheckDXSprites():UI_Checkfile(name$)	
		Open to Read 1,name$
				`read the windowname and load
				Read String 1,a$:b$=First Token$(a$,"="):c$=Next Token$("=")
				UI_mywindow.ID=DXS CREATE SPRITE(c$)
				Read String 1,a$:b$=First Token$(a$,"="):c$=Next Token$("=")
				UI_mywindow.xwidth = Val(c$)
				`read the window height
				Read String 1,a$:b$=First Token$(a$,"="):c$=Next Token$("=")
				UI_mywindow.yrow = Val(c$)
				DXS SET SPRITE TILE SIZE UI_mywindow.ID,UI_mywindow.xwidth,UI_mywindow.yrow    ` Cut the sprites into x * y pixels tiles.
		Close File 1
	UI_RestoreDebugPosition()
Endfunction
`--------------------------------------------------------------------------------------------------------------------

`--------------------------------------------------------------------------------------------------------------------
Function UI_PutWindow(x,y,xwidth,ywidth)
  Local stringhossz as Integer:Local xx as Integer
   stringhossz=Len(sstring$)
	DXS BEGIN SPRITE RENDER UI_MyWindow.id
		For xx=0 to xwidth
		  For yy=0 to ywidth
			If xx=0 And yy=0 Then DXS DRAW SPRITE TILE UI_Mywindow.ID,1,x+xx*UI_mywindow.xwidth,y+yy*UI_mywindow.yrow
			If xx=0 And yy>0 And yy<ywidth Then DXS DRAW SPRITE TILE UI_mywindow.ID,4,x+xx*UI_mywindow.xwidth,y+yy*UI_mywindow.yrow
			If xx=0 And yy=ywidth Then DXS DRAW SPRITE TILE UI_mywindow.ID,7,x+xx*UI_mywindow.xwidth,y+yy*UI_mywindow.yrow
			If xx>0 And xx<xwidth And yy=0 Then DXS DRAW SPRITE TILE UI_mywindow.ID,2,x+xx*UI_mywindow.xwidth,y+yy*UI_mywindow.yrow
			If xx>0 And xx<xwidth And yy>0 And yy<ywidth Then DXS DRAW SPRITE TILE UI_mywindow.ID,5,x+xx*UI_mywindow.xwidth,y+yy*UI_mywindow.yrow
			If xx>0 And xx<xwidth And yy=ywidth Then DXS DRAW SPRITE TILE UI_mywindow.ID,8,x+xx*UI_mywindow.xwidth,y+yy*UI_mywindow.yrow
			If xx=xwidth And yy=0 Then DXS DRAW SPRITE TILE UI_mywindow.ID,3,x+xx*UI_mywindow.xwidth,y+yy*UI_mywindow.yrow
			If xx=xwidth And yy>0 And yy<ywidth Then DXS DRAW SPRITE TILE UI_mywindow.ID,6,x+xx*UI_mywindow.xwidth,y+yy*UI_mywindow.yrow
			If xx=xwidth And yy=ywidth Then DXS DRAW SPRITE TILE UI_mywindow.ID,9,x+xx*UI_mywindow.xwidth,y+yy*UI_mywindow.yrow
		  Next yy
		Next xx
	DXS END SPRITE RENDER UI_mywindow.ID
Endfunction
`--------------------------------------------------------------------------------------------------------------------



/////////////////////////////////////////////////////
//MOUSE   COMMANDS
/////////////////////////////////////////////////////

Function UI_InitMouse(param_cursorimage$ as String)
//***************************************************************************************
//*   Miso                                                                              *
//*     This function initiate the graphic mouse.                                       *
//*                                                                                     *
//***************************************************************************************
    If UI_Mouse.Initialized = UI_True Then ExitFunction

	UI_SetDebugPosition("UI_InitMouse()","module_ui.dba")      :` Tells the debugger where we are               
 		UI_CheckDxSprites()                                    :` Checks adv spr
 		UI_Checkfile(param_cursorimage$)                       :` Checks if mouse image exist in HD                        
		UI_Mouse.ID          = DXS CREATE SPRITE(param_cursorimage$)
		UI_Mouse.Initialized = UI_True
		UI_Mouse.Hidden      = UI_False
		UI_Mouse.x           = MouseX()
		UI_Mouse.Y           = MouseY()
		UI_Mouse.FadeValue   = 255
	UI_RestoreDebugPosition()                                  :` Restore debugger position                              
Endfunction






Function UI_HandleMouse()
//***************************************************************************************
//*   Miso                                                                              *
//*     Handles the mouse movements.                                                    *
//*                                                                                     *
//***************************************************************************************
If UI_Mouse.Initialized = UI_True 
	If UI_Mouse.hidden=UI_False or UI_Mouse.FadingOut=UI_True
	
			If  UI_Mouse.smooth      = UI_False
				UI_Mouse.x           = UI_Mouse.X+SyS_MouseMoveX
				UI_Mouse.Y           = UI_Mouse.Y+SyS_MouseMoveY
			Else
				UI_Mouse.XMoveBuffer = UI_Mouse.XMoveBuffer+SyS_MouseMoveX
				UI_Mouse.YMoveBuffer = UI_Mouse.YMoveBuffer+SyS_MouseMoveY
				
				If UI_Mouse.xmovebuffer>4
					UI_Mouse.X           = UI_Mouse.X+UI_Mouse.Xmovebuffer/UI_Mouse.Smoothvalue
					UI_Mouse.XMoveBuffer =(UI_Mouse.XMoveBuffer/UI_Mouse.SmoothValue)*(UI_Mouse.SmoothValue-1)
				Else
					If UI_Mouse.XMoveBuffer<>0
						UI_Mouse.X           = UI_Mouse.X+UI_Mouse.Xmovebuffer
						UI_Mouse.XMoveBuffer = 0
					Endif
				Endif
				
				If Abs(UI_Mouse.YMoveBuffer)> UI_Mouse.SmoothValue
					UI_Mouse.Y              = UI_Mouse.Y+UI_Mouse.YMoveBuffer/UI_Mouse.SmoothValue
					UI_Mouse.YMoveBuffer    =(UI_Mouse.YMoveBuffer/UI_Mouse.SmoothValue)*(UI_Mouse.SmoothValue-1)
				Else
					If UI_Mouse.YMoveBuffer<>0
						UI_Mouse.Y           = UI_Mouse.Y+UI_Mouse.YMoveBuffer
						UI_Mouse.YMoveBuffer = 0
					Endif
				Endif
			
			Endif
			

			If UI_Mouse.X>UI_Display.Width-1  Then UI_Mouse.X = UI_Display.Width-1
			If UI_Mouse.X<0                    Then UI_Mouse.X = 0
			If UI_Mouse.Y>UI_Display.Height-1 Then UI_Mouse.Y = UI_Display.Height-1
			If UI_Mouse.Y<0                    Then UI_Mouse.Y = 0
			
	
			If UI_Mouse.Hidden=UI_False
				DXS BEGIN SPRITE RENDER UI_Mouse.ID
	    		DXS DRAW SPRITE         UI_Mouse.ID,UI_Mouse.X,UI_Mouse.Y
				DXS END SPRITE RENDER   UI_Mouse.ID
			Endif

	Endif

	
	rem ====Fade handle  ====
	If UI_Mouse.fadingout      = UI_True
		If  UI_Mouse.FadeValue = UI_False
			UI_Mouse.Fadingout = UI_False
			UI_DestroyMouseFaderTicker()
			UI_Mouse.Hidden    = UI_True
		Else
			If UI_AskMouseFaderTicker()=UI_True Then UI_Mouse.FadeValue=UI_Mouse.FadeValue-15
			DXS SET SPRITE ALPHA UI_Mouse.ID,UI_Mouse.FadeValue
		Endif
	
	Endif
	
	If UI_Mouse.fadingin      = UI_True
		If UI_mouse.fadevalue = 255
			UI_Mouse.fadingin = UI_False
			UI_DestroyMousefaderticker()
			UI_Mouse.Hidden   = UI_False
		Else
			If UI_AskMouseFaderTicker()=UI_True then UI_Mouse.FadeValue=UI_Mouse.FadeValue+15
			DXS SET SPRITE ALPHA UI_Mouse.ID,UI_Mouse.FadeValue
		Endif
	
	Endif

Endif
Endfunction





Function UI_HideMouse()
//***************************************************************************************
//*   Miso                                                                              *
//*     Hides graphic mouse.                                                            *
//*                                                                                     *
//***************************************************************************************
	If UI_Mouse.Initialized = UI_True and UI_Mouse.Hidden=UI_False
		UI_Mouse.Hidden     = UI_True
		UI_Mouse.FadeValue  = UI_False
		UI_Mouse.Fadingin   = UI_False
		UI_Mouse.Fadingout  = UI_False
		DXS SET SPRITE ALPHA UI_Mouse.ID,UI_Mouse.fadevalue
	Endif
Endfunction







Function UI_ShowMouse()
//***************************************************************************************
//*   Miso                                                                              *
//*     Shows mouse                                                                     *
//*                                                                                     *
//***************************************************************************************
	If UI_Mouse.Initialized = UI_True and UI_Mouse.Hidden=UI_True
		UI_Mouse.hidden     = UI_False
		UI_mouse.fadevalue  = 255
		UI_MOuse.fadingin   = UI_False
		UI_MOuse.fadingout  = UI_False
		DXS SET SPRITE ALPHA UI_Mouse.ID,UI_Mouse.Fadevalue
	Endif
Endfunction






Function UI_SetSmoothMouseOn(param_smoothvalue as Integer )
//***************************************************************************************
//*   Miso                                                                              *
//*     Turns on mouse smooth, it doesnot work very well.                               *
//*                                                                                     *
//***************************************************************************************
	If UI_Mouse.Initialized  = UI_True
		UI_Mouse.smooth      = UI_True
		UI_Mouse.Smoothvalue = param_smoothvalue
	Endif
Endfunction




Function UI_SetSmoothMouseOff()
//***************************************************************************************
//*   Miso                                                                              *
//*     Turns mouse smooth off.                                                         *
//*                                                                                     *
//***************************************************************************************
	If UI_Mouse.Initialized = UI_True Then UI_Mouse.Smooth=0
Endfunction






Function UI_FadeOutMouse()
//***************************************************************************************
//*   Miso                                                                              *
//*     Fades out the mouse cursor.                                                     *
//*     (uses ians matrix plugin)                                                       *
//*                                                                                     *
//***************************************************************************************
	If  UI_Mouse.Initialized  = UI_True 
		UI_Mouse.fadingout    = UI_True
		UI_Mouse.fadingin     = UI_False
		If UI_Mousefadertimer = UI_False Then UI_CreateMousefaderTicker()
	Endif
Endfunction





Function UI_FadeinMouse()
//***************************************************************************************
//*   Miso                                                                              *
//*     Fade in the mouse cursor.                                                       *
//*                                                                                     *
//***************************************************************************************
	If  UI_Mouse.Initialized  = 1 
		UI_Mouse.Fadingout    = 0
		UI_Mouse.Fadingin     = 1
		UI_Mouse.Hidden       = 0
		If UI_Mousefadertimer = 0 then UI_CreateMousefaderTicker()
	Endif
Endfunction





Function UI_SetMousePosition(param_mx,param_my)
//***************************************************************************************
//*   Miso                                                                              *
//*     Set the position of the mouse cursor.                                           *
//*                                                                                     *
//***************************************************************************************
	If UI_Mouse.Initialized = 1 
		UI_Mouse.X=param_mx
		UI_Mouse.Y=param_my
	Endif
Endfunction





Function UI_MouseX()
//***************************************************************************************
//*   Miso                                                                              *
//*     Returns with the graphic mouse x position in pixels.                            *
//*                                                                                     *
//***************************************************************************************
Local return_mousex as Integer
	If UI_Mouse.Initialized = 1 then return_mousex=UI_Mouse.X
Endfunction return_mousex





Function UI_MouseY()
//***************************************************************************************
//*   Miso                                                                              *
//*     Returns the graphic mouse y position in pixels.                                 *
//*                                                                                     *
//***************************************************************************************
Local return_mousey as Integer
	If UI_Mouse.Initialized = 1 then return_mousey=UI_Mouse.Y
Endfunction return_mousey

Function UI_AskMouseHidden()
//***************************************************************************************
//*   Miso                                                                              *
//*     Returns 1 if mouse is hidden.                                                   *
//*                                                                                     *
//***************************************************************************************
Local return_mousey as Integer
	If UI_Mouse.hidden = UI_True then return_mousey=UI_True
Endfunction return_mousey



/////////////////////////////////////////////////////
//GADGET   COMMANDS
/////////////////////////////////////////////////////








/////////////////////////////////////////////////////
//TIMER   COMMANDS
/////////////////////////////////////////////////////
Function UI_CreateMouseFaderTicker()
//***************************************************************************************
//*   Miso                                                                              *
//*     Dont call manually. Mouse commands may call it intenrally, they destroy it      *
//*     when not needed.                                                                *
//***************************************************************************************
	UI_MouseFaderTimer=FIND FREE TICKER()
	MAKE TICKER UI_MouseFaderTimer,1
Endfunction






Function UI_AskMouseFaderTicker()
//***************************************************************************************
//*   Miso                                                                              *
//*     Dont call manually. Its for internal use.                                       *
//*                                                                                     *
//***************************************************************************************
	Local tickresult as Integer
	tickresult=TICKER(UI_Mousefadertimer,1)
Endfunction tickresult






Function UI_DestroyMouseFaderTicker()
//***************************************************************************************
//*   Miso                                                                              *
//*     Mouse commands will call it when needed. Dont call manually.                    *
//*                                                                                     *
//***************************************************************************************
	DELETE TICKER UI_MouseFaderTimer
	UI_mousefadertimer=0
Endfunction


/////////////////////////////////////////////////////
//DEBUG   COMMANDS
/////////////////////////////////////////////////////
Function UI_StartDebugMode()
//***************************************************************************************
//*   Miso                                                                              *
//*     Starts the debug mode.                                                          *
//*                                                                                     *
//***************************************************************************************
  UI_DebugMode = UI_True
  UI_SetDebugPosition("main program","test_game.dba")
Endfunction




Function UI_StopDebugMode()
//***************************************************************************************
//*   Miso                                                                              *
//*     Stops  the debug mode.                                                          *
//*                                                                                     *
//***************************************************************************************
  UI_DebugMode = UI_False
Endfunction




Function UI_SetDebugPosition(functionname$ as string ,modulename$ as string )
//***************************************************************************************
//*   Miso                                                                              *
//*     Set debug mode position to a named function in a named source file.             *
//*                                                                                     *
//***************************************************************************************
	If UI_DebugMode=UI_True	
			UI_OldFunctionName$     = UI_FunctionName$
			UI_OldIncludedFileName$ = UI_IncludedFileName$
			UI_FunctionName$        = functionname$
			UI_IncludedFileName$    = modulename$
	Endif
Endfunction




Function UI_RestoreDebugPosition()
//***************************************************************************************
//*   Miso                                                                              *
//*     Sets the debug position to the main program.                                    *
//*                                                                                     *
//***************************************************************************************
	If UI_DebugMode=UI_True	
		rem UI_FunctionName$     = UI_OldFunctionName$
		rem UI_IncludedFileName$ = UI_OldIncludedFileName$
		UI_FunctionName$         = "main program"
		UI_IncludedFileName$     = "test_game.dba"
	Endif
Endfunction





Function UI_Checkdxsprites()
//***************************************************************************************
//*  Miso:                                                                              *
//*    Checks if advanced sprites initialized.                                          *
//*                                                                                     *
//*                                                                                     *
//*                                                                                     *
//***************************************************************************************
	If UI_DebugMode=UI_True 
		If UI_display.dxspriteinitialized=1 
				exitfunction
			else
				repeat
					cls:set cursor 1,1
					print " "
					print "********************************"
					Print "*                              *"
					print "*  miso's UI Debugger V 1.0    *"
					Print "*                              *"
					Print "********************************"
					Print " "
					Print "ERROR: Advanced Sprites not Initialized."
					Print " "
					Print " "
					Print " "
					Print "__________________________________________________________________________________________________________________________"
					print "The "+UI_FunctionName$+" in "+UI_IncludedFilename$+" tries to use"
			    	print "Advanced Sprite functions, while DxSpriteInitialized=0."
			    	Print "__________________________________________________________________________________________________________________________"
					Print " "
				    print " "
			    	Print "Press Enter to Halt."
			    	sync
				until returnkey()=1
			End
		Endif
	Endif
Endfunction





Function UI_CheckFile(filename$ as string )
//***************************************************************************************
//*  Miso:                                                                              *
//*    Checks if a file is exist on HDD, if does not, then stops the program.           *
//*                                                                                     *
//*                                                                                     *
//*                                                                                     *
//***************************************************************************************
	If UI_DebugMode=UI_True 
		If file exist(filename$) = 1
				exitfunction
			else
				repeat
					cls:set cursor 1,1
					print " "
					print "********************************"
					Print "*                              *"
					print "*  miso's UI Debugger V 1.0    *"
					Print "*                              *"
					Print "********************************"
					Print " "
					Print "Error: File not found."
					Print " "
					Print " "
					Print " "
					Print "_______________________________________________________________________________________________________________________"
					print "The "+UI_FunctionName$+" in "+UI_IncludedFilename$+" tries to manipulate"
			    	print filename$+", but it does not exist there."
			    	Print "_______________________________________________________________________________________________________________________"
					Print " "
				    print " "
			    	Print "Press Enter to Halt."
			    	sync
				until returnkey()=1
			End
		Endif
	Endif
Endfunction

