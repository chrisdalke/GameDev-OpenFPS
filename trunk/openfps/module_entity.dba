remstart
/////////////////////////////////////////////////////
//
// OpenFPS ENTITY MANAGEMENT Core Module
//
// Created by menderleit
// Maintained by menderleit
//
/////////////////////////////////////////////////////

----- Changelog:
(01/13/11) - menderleit - Created
(01/13/11) - menderleit - Setup basic UDTs and functions.
(01/14/11) - menderleit - Added SetAttribute function.
(01/14/11) - menderleit - Added a section on some proposed changes.
(01/16/11) - menderleit - Implemented the proposed changes to the module.
(01/16/11) - menderleit - Added GetAttribute function. Improved comments a bit. Fixed a few typos.
(01/16/11) - menderleit - Added SaveEntities and LoadEntities functions.
(01/16/11) - menderleit - Added FindEntityName function to find Entities by name. (binary search method)
(01/16/11) - menderleit - Entities are now sorted by name as they are added or the name is changed.
(01/16/11) - menderleit - Added Name versions of each function so you can access Entities by specifying their name.

----- To-Do:
https://www.pivotaltracker.com/projects/202025

----- Purpose:
Handling all objects and entities in the game.

----- Dependencies and Conflicts:
-None-

----- Other Notes:
Only the OBJECT type has been implemented currently until I know what
types of Entities and Attributes we need.

* All functions, constants, and globals in this module are prefixed with ENT_

/////////////////////////////////////////////////////
remend


// Entity Types:
#constant ENT_TYPE_OBJECT   1
#constant ENT_TYPE_TERRAIN  2
#constant ENT_TYPE_PLIGHT   3
#constant ENT_TYPE_DLIGHT   4
#constant ENT_TYPE_SLIGHT   5
#constant ENT_TYPE_ZONE     6

// Attribute Names:
#constant ENT_ATTR_NAME         1
#constant ENT_ATTR_OBJECT       2
#constant ENT_ATTR_POSITION     3
#constant ENT_ATTR_ROTATION     4
#constant ENT_ATTR_DYNAMIC      5
#constant ENT_ATTR_PHYSICS      6
#constant ENT_ATTR_TERRAIN      7
#constant ENT_ATTR_SIZE         8
#constant ENT_ATTR_HEIGHTMAP    9
#constant ENT_ATTR_TEXTURE      10
#constant ENT_ATTR_DETAILMAP    11
#constant ENT_ATTR_RANGE        12
#constant ENT_ATTR_COLOR        13
#constant ENT_ATTR_NORMAL       14
#constant ENT_ATTR_TARGET       15
#constant ENT_ATTR_ACTION       16
#constant ENT_ATTR_FILENAME     17

// DEVNOTE: Please be aware that the Attribute names are JUST names and
//          their expected Value for different Entities can vary.
//          Both Terrain and Zone use the SIZE attribute, but they expect
//          different inputs. Terrain expects a vector2(width, depth), and
//          Zone expects a vector3(width, height, depth).
//          ALWAYS check what the expected input is.


////////////////////////////////////////////////////////////////////////////////////////


// UDTs for the various Entity types.
//
// DEVNOTE: The attributes are just examples at this point...
// You can modify these or add new ENT_TYPE_INFO UDTs to support other types.
// Remember to update the functions in this MODULE to support any new or modifed types.
//

// Main list of objects/entities.
type ENT_MAIN_LIST
    name as string          // Name of this object/entity.
    etype as integer        // Type of object/entity. (object, light, zone, etc...)
    info as integer         // Index number of the INFO entry.
endtype

// Info about the Object type.
type ENT_OBJECT_INFO
    fname as string         // FileName of this Object. (So we can load it.)
    obj as integer          // Object resource number.
    pos as integer          // vector3 position info.
    rot as integer          // vector3 rotation info.
    dynamic as boolean      // YES = Dynamic object, NO = Static object.
    physics as boolean      // YES = Affected by physics, NO = NOT affected by physics.
endtype

// Info about the Terrain type.
type ENT_TERRAIN_INFO
    fname as string         // FileName of this Terrain. (So we can load it.)
    tid as integer          // Terrain resource number.
    size as integer         // vector2 size of Terrain. (width, depth)
    heightmap as integer    // Resource number for the Heightmap.
    texture as integer      // Resource number for the Texture.
    detail as integer       // Resource number for the DetailTexture.
endtype

// Info about the Point light.
type ENT_POINTLIGHT_INFO
    pos as integer          // vector3 position info
    range as float          // Range of light.
    color as dword          // Color of light. ( dword = rgb(255,255,255) )
endtype

// Info about the Directional light.
type ENT_DIRLIGHT_INFO
    normal as integer       // vector3 specifying direction of the light.
    color as dword          // Color of light.
endtype

// Info about the Spot light.
type ENT_SPOTLIGHT_INFO
    pos as integer          // vector3 position of the spotlight.
    target as integer       // vector3 of the spotlight's target.
    color as dword          // Color of the spotlight.
endtype

// Info about the Zone entity.
type ENT_ZONE_INFO
    pos as integer          // vector3 position info.
    rot as integer          // vector3 rotation info.
    size as integer         // vector3 size info.
    action as integer       // Info about what happens when you enter the Zone.
endtype


///////////////////////////////////////////////////////////////////////////////////


// (NO RETURN VALUE) ENT_Init()
// Initialize the ENTITY module.
//
// Creates dynamic arrays, sets up globals, and initializes variables.
//
function ENT_Init()
    // Dynamic arrays to hold info about Entities.
    global dim ENT_Entity() as ENT_MAIN_LIST
    global dim ENT_Object() as ENT_OBJECT_INFO
    global dim ENT_Terrain() as ENT_TERRAIN_INFO
    global dim ENT_PLight() as ENT_POINTLIGHT_INFO
    global dim ENT_DLight() as ENT_DIRLIGHT_INFO
    global dim ENT_SLight() as ENT_SPOTLIGHT_INFO
    global dim ENT_Zone() as ENT_ZONE_INFO
    // Globals to keep track of how many entities of each type we have.
    global ENT_NumEntities as integer
    global ENT_NumObjects as integer
    global ENT_NumTerrains as integer
    global ENT_NumPLights as integer
    global ENT_NumDLights as integer
    global ENT_NumSLights as integer
    global ENT_NumZones as integer
    // Initialize array item counts to 0.
    ENT_NumEntities = 0
    ENT_NumObjects = 0
    ENT_NumTerrains = 0
    ENT_NumPLights = 0
    ENT_NumDLights = 0
    ENT_NumSLights = 0
    ENT_NumZones = 0
endfunction


// (NO RETURN VALUE) ENT_Terminate
// Terminate the ENTITY module.
//
// Deletes all Entities and frees their internally used vectors.
//
// DEVNOTE: Does NOT delete referenced resources like objects and images...
//
function ENT_Terminate()
    ENT_DeleteAllEntities()
    undim ENT_Entity()
    undim ENT_Object()
    undim ENT_Terrain()
    undim ENT_PLight()
    undim ENT_DLight()
    undim ENT_SLight()
    undim ENT_Zone()
    ENT_NumEntities = 0
    ENT_NumObjects = 0
    ENT_NumTerrains = 0
    ENT_NumPLights = 0
    ENT_NumDLights = 0
    ENT_NumSLights = 0
    ENT_NumZones = 0
endfunction


// (INTEGER) = ENT_AddEntity("EntityName", EntityType)
// Adds a new Entity.
//
// Returns the IndexNumber of the new Entity.
//
function ENT_AddEntity(EntityName as string, EntityType as integer)
    NewIndex as integer
    i = ENT_FindEntityName(EntityName, 1)           // <- Insert sorted by name. (1=InsertMode)
    if i = -1
        array insert at bottom ENT_Entity()         // <- Create entry on main list.
        NewIndex = ENT_NumEntities
    else
        array insert at element ENT_Entity(), i
        NewIndex = i
    endif
    inc ENT_NumEntities, 1                          // <- Increase the number of Entities by 1.
    ENT_Entity().name = EntityName                  // <- Set name on main list.
    select EntityType
        case ENT_TYPE_OBJECT
            ENT_Entity().etype = EntityType         // <- Set entity type on main list.
            ENT_Entity().info = ENT_NumObjects      // <- Set index number of INFO entry for this Entity.
            array insert at bottom ENT_Object()     // <- Create entry on the object list.
            ENT_Object().fname = ""
            ENT_Object().obj = 0                    // <- Initialize attributes to default values,
            v3 = RES_grab(res_Vector)               // and create vector3's for our position and
            a = make vector3(v3)                    // rotation info.
            ENT_Object().pos = v3                   // ...
            v3 = RES_grab(res_Vector)               // ..
            a = make vector3(v3)                    // .
            ENT_Object().rot = v3
            ENT_Object().dynamic = 0
            ENT_Object().physics = 0
            inc ENT_NumObjects, 1                   // <- Increase the number of Objects by 1.
        endcase
        // Create CASE statements here for other Entity types.
        // ...
    endselect
endfunction NewIndex


// (NO RETURN VALUE) ENT_DeleteEntity(EntityIndex)
// Delete the Entity specified by EntityIndex.
//
// DEVNOTE: Caller are responsible for deleting resources like objects and images.
//          This function only deletes the entry in the Entity system.
//
function ENT_DeleteEntity(EntityIndex as integer)
    if EntityIndex >= 0 and EntityIndex < ENT_NumEntities
        select ENT_Entity(EntityIndex).etype
            case ENT_TYPE_OBJECT
                // Deletion code for an OBJECT Entity.
                info = ENT_Entity(EntityIndex).info
                RES_free(ENT_Object(info).pos, res_Vector)
                RES_free(ENT_Object(info).rot, res_Vector)
                array delete element ENT_Object(), info
                dec ENT_NumObjects, 1
                array delete element ENT_Entity(), EntityIndex
                dec ENT_NumEntities, 1
                for i=0 to ENT_NumEntities-1    // Correct the Info references in the main list.
                    if ENT_Entity(i).info > info then dec ENT_Entity(i).info, 1
                next i
            endcase
            // Insert CASE statements here for other Entity types.
            // ...
        endselect
    endif
endfunction


// (NO RETURN VALUE) ENT_DeleteEntityName("EntityName")
// Deletes the Entity specified by "EntityName".
//
function ENT_DeleteEntityName(EntityName as string)
    i = ENT_FindEntityName(EntityName, 0)
    if i <> -1
        ENT_DeleteEntity(i)
    endif
endfunction


// (NO RETURN VALUE) ENT_DeleteAllEntities()
// Delete all Entities.
//
function ENT_DeleteAllEntities()
    while ENT_NumEntities > 0
        ENT_DeleteEntity(0)
    endwhile
endfunction


// (NO RETURN VALUE) ENT_SetAttribute(EntityIndex, Attribute, str$(Value))
// Sets the specified Attribute of the Entity specified by EntityIndex.
//
// DEVNOTE: All values should be converted to strings before passed in.
//          String attributes are passed in as they are.
//
// Example of passing in an object resource number:
//      ENT_SetAttribute( MyEntity, ENT_ATTR_OBJECT, str$(ObjNum) )
//
function ENT_SetAttribute(EntityIndex as integer, Attribute as integer, Value as string)
    etype as integer
    info as integer
    if EntityIndex >= 0 and EntityIndex < ENT_NumEntities
        if Attribute = ENT_ATTR_NAME
            // If this is a name change, we delete the entry on the main list and
            // insert it again, sorted by the new name.
            if ENT_Entity(EntityIndex).name = Value then exitfunction
            etype = ENT_Entity(EntityIndex).etype           // Save the Type and Info fields to be
            info = ENT_Entity(EntityIndex).info             // inserted into the new Entity.
            array delete element ENT_Entity(), EntityIndex  // Delete this Entity.
            dec ENT_NumEntities, 1                          // Make sure to decrease the number of entries.
            i = ENT_FindEntityName(Value, 1)                // Find sorted position with new name. (1=InsertMode)
            if i = -1
                array insert at bottom ENT_Entity()
                EntityIndex = ENT_NumEntities
            else
                array insert at element ENT_Entity(), i
                EntityIndex = i
            endif
            inc ENT_NumEntities, 1                          // Increase the number of entries again.
            ENT_Entity(EntityIndex).name = Value            // Set the new name, and restore the
            ENT_Entity(EntityIndex).etype = etype           // TYPE and INFO field.
            ENT_Entity(EntityIndex).info = info             // We don't need to create a new Info object as
            exitfunction                                    // we can just point the new Entity to the old Info.
        endif
        EntityType = ENT_Entity(EntityIndex).etype
        i = ENT_Entity(EntityIndex).info
        if EntityType = ENT_TYPE_OBJECT
            // OBJECT specific attribute assignments.
            if Attribute = ENT_ATTR_FILENAME
                ENT_Object(i).fname = Value
            endif
            if Attribute = ENT_ATTR_OBJECT
                ENT_Object(i).obj = val(Value)
            endif
            if Attribute = ENT_ATTR_POSITION
                set vector3 ENT_Object(i).pos, x vector3(val(Value)), y vector3(val(Value)), z vector3(val(Value))
            endif
            if Attribute = ENT_ATTR_ROTATION
                set vector3 ENT_Object(i).rot, x vector3(val(Value)), y vector3(val(Value)), z vector3(val(Value))
            endif
            if Attribute = ENT_ATTR_DYNAMIC
                ENT_Object(i).dynamic = val(Value)
            endif
            if Attribute = ENT_ATTR_PHYSICS
                ENT_Object(i).physics = val(Value)
            endif
        endif
        // Create IF/ENDIF blocks here to support other Entity types.
        // ...
    endif
endfunction


// (NO RETURN VALUE) ENT_SetAttributeName("EntityName", Attribute, str$(Value))
// Sets the specified Attribute of the Entity specified by "EntityName".
//
// DEVNOTE: All this does is find the Index number of the Entity and then pass along
//          the parameters to the regular SetAttribute function.
//          Returns -1 if the Entity could not be found.
//
function ENT_SetAttributeName(EntityName as string, Attribute as integer, Value as string)
    i = ENT_FindEntityName(EntityName, 0)       // Find the Index of the Entity.
    if i <> -1
        ENT_SetAttribute(i, Attribute, Value)   // Just call the regular SetAttribute with same parameters.
    endif
endfunction


// (STRING) = ENT_GetAttribute(EntityIndex, Attribute)
// Returns the Value of the specified Attribute as a string.
//
// If you are getting a value that are NOT a string call the function like this:
//     value = val( ENT_GetAttribute(MyEntity, ENT_ATTR_OBJECT) )
//
// DEVNOTE: Be aware that when getting a vector value you are getting the actual
//          vector resource number stored in the Entity list, so be very careful about
//          what you do with it. Preferably make a copy of it and don't use the original
//          at all.
//
function ENT_GetAttribute(EntityIndex as integer, Attribute as integer)
    Value as string
    Value = ""
    if EntityIndex >= 0 and EntityIndex < ENT_NumEntities
        if Attribute = ENT_ATTR_NAME
            Value = ENT_Entity(EntityIndex).name
            exitfunction Value
        endif
        EntityType = ENT_Entity(EntityIndex).etype
        i = ENT_Entity(EntityIndex).info
        if EntityType = ENT_TYPE_OBJECT
            if Attribute = ENT_ATTR_FILENAME
                Value = ENT_Object(i).fname
            endif
            if Attribute = ENT_ATTR_OBJECT
                Value = str$( ENT_Object(i).obj )
            endif
            if Attribute = ENT_ATTR_POSITION
                Value = str$( ENT_Object(i).pos )
            endif
            if Attribute = ENT_ATTR_ROTATION
                Value = str$( ENT_Object(i).rot )
            endif
            if Attribute = ENT_ATTR_DYNAMIC
                Value = str$( ENT_Object(i).dynamic )
            endif
            if Attribute = ENT_ATTR_PHYSICS
                Value = str$( ENT_Object(i).physics )
            endif
        endif
        // Create IF/ENDIF blocks here to support other Entity types.
        // ...
    endif
endfunction Value


// (STRING) = ENT_GetAttributeName("EntityName", Attribute)
// Returns the specified Attribute from the Entity specified by "EntityName".
//
// DEVNOTE: All this does is find the Index number of the Entity and then pass along
//          the parameters to the regular GetAttribute function.
//          Returns an empty string if the Entity could not be found.
//
function ENT_GetAttributeName(EntityName as string, Attribute as integer)
    Value as string
    Value = ""
    i = ENT_FindEntityName(EntityName, 0)
    if i <> -1
        Value = ENT_GetAttribute(i, Attribute)
    endif
endfunction Value


// (INTEGER) = ENT_FindEntityName("EntityName", InsertMode)
// Searches the Entity list by name. (uses Binary search method for improved speed)
//
// InsertMode = 0
//     If no matches were found it returns -1.
//
// InsertMode = 1
//     If no matches were found it returns the index of where the "EntityName" should
//     be inserted so that the list remains sorted, or -1 if "EntityName" should be
//     inserted at the end of the list. (greater than any in the list)
//
// DEVNOTE: The InsertMode(1) is only meant for internal use when adding new Entities
//          and should not be used from outside the ENTITY module.
//
function ENT_FindEntityName(EntityName as string, InsertMode as boolean)
    EntityIndex as integer
    EntityIndex = -1
    subStart as integer
    subEnd as integer
    subSize as integer
    cPos as integer
    if ENT_NumEntities = 1
        if InsertMode = 1
            if ENT_Entity(0).name > EntityName then EntityIndex = 0
        endif
        if ENT_Entity(0).name = EntityName then EntityIndex = 0
        exitfunction EntityIndex
    endif
    if ENT_NumEntities > 1
        subStart = 0
        subEnd = ENT_NumEntities - 1
        do
            subSize = subEnd - subStart
            cPos = subSize / 2 + subStart
            if ENT_Entity(cPos).name = EntityName
                EntityIndex = cPos
                exitfunction EntityIndex
            endif
            if subSize < 1
                if InsertMode = 1
                    if ENT_Entity(cPos).name > EntityName then EntityIndex = cPos
                    if ENT_Entity(cPos).name < EntityName and ENT_NumEntities-1 > cPos then EntityIndex = cPos+1
                endif
                exitfunction EntityIndex
            endif
            if ENT_Entity(cPos).name < EntityName and subEnd > cPos then subStart = cPos+1
            if ENT_Entity(cPos).name > EntityName and subStart < cPos then subEnd = cPos-1
        loop
    endif
endfunction EntityIndex


// (NO RETURN VALUE) ENT_SaveEntities("FileName")
// Saves all Entities and their Attributes.
//
// DEVNOTE: Overwrites the .ent file if it already exists. NO WARNINGS!
// DEVNOTE: ENT_Entity().info is not saved as this is dynamic and will
//          be re-allocated when loading the Entities back in.
//
function ENT_SaveEntities(FileName as string)
    if ENT_NumEntities > 0
        FileName = FileName + ".ent"
        if file exist(FileName) then delete file FileName
        f = RES_grab(res_File)
        open to write f, FileName
        for i=0 to ENT_NumEntities-1
            etype = ENT_Entity(i).etype
            info = ENT_Entity(i).info
            write string f, ENT_Entity(i).name
            write word f, etype
            if etype = ENT_TYPE_OBJECT then ENT_SaveObjectInfo(f, info)
            // Add saving of other Entity types here...
            // ...
        next i
        RES_free(f, res_File)       // Close File and free resource number.
    endif
endfunction

// (NO RETURN VALUE) ENT_SaveObjectInfo(FileNumber, IndexNumber)
// Saves Object specific Attributes.
//
// DEVNOTE: Does not save the object number of the Entity as this is
//          a dynamic resource. Instead will allocate a number when
//          we load the Entities back in.
//
function ENT_SaveObjectInfo(f as integer, info as integer)
    write string f, ENT_Object(info).fname
    i = ENT_Object(info).pos
    write float f, x vector3(i)
    write float f, y vector3(i)
    write float f, z vector3(i)
    i = ENT_Object(info).rot
    write float f, x vector3(i)
    write float f, y vector3(i)
    write float f, z vector3(i)
    write byte f, ENT_Object(info).dynamic
    write byte f, ENT_Object(info).physics
endfunction


// (NO RETURN VALUE) ENT_LoadEntities("FileName")
// Loads an Entity file.
//
function ENT_LoadEntities(FileName as string)
    name as string
    FileName = FileName + ".ent"
    if file exist(FileName) = 0 then exitfunction
    f = RES_grab(res_File)
    open to read f, FileName
    while file end(f) <> 1
        read string f, name
        read word f, etype
        i = ENT_AddEntity(name, etype)
        info = ENT_Entity(i).info
        if etype = ENT_TYPE_OBJECT then ENT_LoadObjectInfo(f, info)
        // Add loading of other Entity types here...
        // ...
    endwhile
    RES_free(f, res_File)       // Close File and free resource number.
endfunction

// (NO RETURN VALUE) ENT_LoadObjectInfo(FileNumber, ObjectIndex)
// Loads Object specific attributes.
//
// DEVNOTE: Does not allocate resource numbers for the object at this time.
//
function ENT_LoadObjectInfo(f as integer, info as integer)
    fname as string
    read string f, fname
    ENT_Object(info).fname = fname
    x as float
    y as float
    z as float
    b as boolean
    read float f, x : read float f, y : read float f, z
    set vector3 ENT_Object(info).pos, x, y, z
    read float f, x : read float f, y : read float f, z
    set vector3 ENT_Object(info).rot, x, y, z
    read byte f, b
    ENT_Object(info).dynamic = b
    read byte f, b
    ENT_Object(info).physics = b
endfunction
