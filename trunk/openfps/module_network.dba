remstart
/////////////////////////////////////////////////////
//
// OpenFPS NETWORK FUNCTIONS Core Module
//
// Created by --
// Maintained by --
//
/////////////////////////////////////////////////////

----- Changelog:
(2/8/10) - BMacZero - Created
(07/06/10) - miso     - just placed logger commands
(07/06/10) - thenerd  - added commands
(07/28/10) - thenerd  - added PlayerData.cfg for player name & other info
(08/17/10) - miso     - added a display info when waiting to connect master server, not to see tha black screen
(11/29/10) - thenerd  - Restructured code to use new module layout
----- To-Do:
-None-

----- Purpose:
Communicates with host to retrieve updated information on
player, enemy, and object positions and states.
Passes this information to relevant modules to deal with it.


----- Dependancies and Conflicts (IMPORTANT STUFF):
-None-

----- Other Notes:
Chat Message Tags
&name=name           - Changes your name and displays a message.
&name_silent=name    - Changes your name without displaying a message.
&color="r,g,b"		 - Changes your chat color (WORK IN PROGRESS)
&blarg	             - :D

All functions and resources in the Network module use the prefix NET_

----- Function List:
-Client:
NET_init()			  		  - initializes the networking module
NET_update()     	  		  - updates any network data with the server.
NET_terminate()  	  		  - ends the networking module, and cleans up any used resources.
NET_getChatMessage()		  - gets the latest chat message.
NET_sendChatMessage(string$)  -	sends a chat message.

-Server:
-NONE-

remend

`-------GLOBALS----------
#constant NET_SERVER_HOST "96.233.35.41"
#constant NET_SERVER_PORT 27013
Global NET_channel as DWORD
Global NET_PlayerName$ as string

/////////////////////////////////////////////////////////
// INIT                                                //
/////////////////////////////////////////////////////////


function NET_init()
	// -----------------------
	// Init network function
	// -----------------------
	UI_WriteLog(UI_Yellow,"=== Starting Network module")
	
	`globals
	global net_disable
	net_disable=0
	
	`start winsock
	winsock make
	if (winsock error())
   		`an error has occurred, output the error message to the log and quit.
   		UI_WriteLog(UI_RED,winsock error msg$())
   		winsock clean up
   		end
	else
		`write init success
		UI_WriteLog(UI_Green,"Network init Successful.")
	endif
	
	`update once to avoid crash
	sync

	`attempt connect to master server
	`NET_channel = winsock connect(NET_SERVER_HOST,NET_SERVER_PORT)
	`check_for_error(NET_channel)
	
	net_disable=1
	
	`if success/not success
	if net_disable<1:
		`write log
		UI_WriteLog(UI_Green,"Connected to the master server "+NET_SERVER_HOST+":"+STR$(NET_SERVER_PORT))
		UI_WriteLog(UI_Yellow,"=== Loading Player Data")
		
		`load player data
		temp_plr_data=RES_grab(res_File)
		OPEN TO READ temp_plr_data,"PlayerData.cfg"
		READ STRING temp_plr_data,NET_PlayerName$
		NET_PlayerName$=right$(NET_PlayerName$,(len(NET_PlayerName$)-11))
		close file temp_plr_data
		RES_free(temp_plr_data,res_File)
		UI_WriteLog(UI_Green,"=== Player Data Loaded")
	
		`add text to chat box
		UI_Addtexttochatbox("Welcome to Biostorm: Chemical Warfare!")
		UI_Addtexttochatbox("Master server is online.")
		`send player name packet
		NET_sendPlayerName(NET_PlayerName$,0)
	else:
		`add failure text to chat box
		UI_Addtexttochatbox("Master server is offline!")
		UI_Addtexttochatbox("No chat will be available.")
	endif
	`write log
	UI_WriteLog(UI_Green,"=== Network module started")
	// -----------------------
endfunction


/////////////////////////////////////////////////////////
// CORE                                                //
/////////////////////////////////////////////////////////

function NET_update()
	// -----------------------
	// Net Update function
	// -----------------------
	if net_disable<1:
  		winsock refresh channel NET_channel
   		check_for_error(NET_channel)
   		NET_getChatMessage()
	endif
	// -----------------------
endfunction

function NET_getChatMessage():
	// -----------------------
	// Net communication function
	// -----------------------
	if net_disable<1:
   	if (winsock channel data waiting(NET_channel))
      	check_for_error(NET_channel)
      	message$ = winsock recv string(NET_channel)
      	if (message$ = "")
         	`this client has been disconnected remotely by the server.
         	if (winsock channel error(NET_channel))
            	UI_Addtexttochatbox("You have been forcefully disconnected by the server!")
         	else
            	UI_Addtexttochatbox("You have been gracefully disconnected by the server!")
         	endif
      	else
			UI_Addtexttochatbox(message$)
      	endif
   	endif
	endif
	// -----------------------
endfunction

function NET_sendPlayerName(string$,mode):
	// -----------------------
	// Net communication function
	// -----------------------
	if net_disable<1:
		//0=silent
		//1=normal
		if mode=0 then winsock send string NET_channel, "&name_silent="+string$
		if mode=1 then winsock send string NET_channel, "&name="+string$
		check_for_error(NET_channel)
	endif
	// -----------------------
endfunction

function NET_sendChatMessage(string$):
	// -----------------------
	// Net communication function
	// -----------------------
	if net_disable<1:
		winsock send string NET_channel, string$
		check_for_error(NET_channel)
	endif
	// -----------------------
endfunction


/////////////////////////////////////////////////////////
// TERMINATE                                           //
/////////////////////////////////////////////////////////


function NET_terminate()
	// -----------------------
	// Terminate function
	// -----------------------
	UI_WriteLog(UI_Yellow,"=== Terminating module")
	winsock clean up
	UI_WriteLog(UI_Green,"=== Network module terminated")
	// -----------------------
endfunction

/////////////////////////////////////////////////////////
// DEBUG                                               //
/////////////////////////////////////////////////////////

function check_for_error(a_channel as DWORD)
	// -----------------------
	// Winsock debug function
	// -----------------------
	`check for an error on a channel.
   if (winsock channel error(a_channel))
      `an error has occurred, enable the net_disable variable.
	  net_disable=1
   endif
   // -----------------------
endfunction