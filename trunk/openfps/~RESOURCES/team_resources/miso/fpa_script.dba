Rem ***** Included Source File *****
//////////////////////////////
// ***** Included Source File *****
//
// B2D OBJECT CREATOR MODULE
// 
// Author: miso
//
//////////////////////////////////////////////////////

`----- Changelog:
`(2010/07/11) - miso     - Created
`----- To-Do:

`----- Purpose:

`----- USES: none

`----- Function List:

`=========Constants=========`
#Constant CMD_Nothing=0
#Constant CMD_SDA=1
#Constant CMD_SDB=2
#Constant CMD_SDC=3
#Constant CMD_SDD=4
#Constant CMD_SDE=5
#Constant CMD_SDF=6
#Constant CMD_SDG=7
#Constant CMD_SDH=8
#Constant CMD_SDI=9
#Constant CMD_SDJ=10
#Constant CMD_TMP=11
#Constant CMD_RND=12
`===========================`

`==========Globals==========`
//--result registers
Global script_resultregister as integer
Global script_randomregister as integer
//--data registers
Global script_Aregister      as integer
Global script_Bregister      as integer
Global script_Cregister      as integer
Global script_Dregister      as integer
Global script_Eregister      as integer
Global script_Fregister      as integer
Global script_Gregister      as integer
Global script_Hregister      as integer
Global script_Iregister      as integer
Global script_Jregister      as integer

//--CONDIION registers
Global script_CNDAregister      as integer
Global script_CNDBregister      as integer
Global script_CNDCregister      as integer
Global script_CNDDregister      as integer
Global script_CNDEregister      as integer
Global script_CNDFregister      as integer
Global script_CNDGregister      as integer
Global script_CNDHregister      as integer
Global script_CNDIregister      as integer
Global script_CNDJregister      as integer

//script variables
Global script_error          as boolean
Global script_error_message  as string
Global loadedscripts         as integer
`===========================`

`===========Types===========`
`===========================`

`=========Functions=========`

Function Create_Memory_Registers()
//--create a dummy for 100 scipts. Their size may be 100 commands/script
	Dim script(100,100,3) as integer
	Dim registers(1000) as integer
Endfunction


Function Flush_Memory_Registers()
//--flush result registers
	script_resultregister=0:script_randomregister=0
//--flush data registers
	script_Aregister=0:script_Bregister=0:script_Cregister=0:script_Dregister=0
	script_Eregister=0:script_Fregister=0:script_Gregister=0:script_Hregister=0
	script_Iregister=0:script_Jregister=0
//--flush CONDIION registers
	script_CNDAregister=0:script_CNDBregister=0:script_CNDCregister=0
	script_CNDDregister=0:script_CNDEregister=0:script_CNDFregister=0
	script_CNDGregister=0:script_CNDHregister=0:script_CNDIregister=0
	script_CNDJregister=0
//flush script variables
	script_error=0:script_error_message=""
Endfunction

Function setreg(regid,value)

Endfunction

Function setask(regid,value)

Endfunction

Function Load_script(scriptfile$)
	fileid=grabresource(res_file)
	open to read fileid,scriptfile$
	loadedscripts=loadedscripts+1
		read string fileid,lines$
		lines=Val(lines$)
			For i=1 to 100
				
				read string fileid,a$
				//--understand rem commands and nullsize lines
					if len(a$)=0 
						goto _endoftheline
					Else
						If left$(a$,2)="//" then goto _endoftheline
					Endif
					
				//--Parse the strings
				b$=first token$(a$,"[")
				c$=next token$(",")
				d$=next token$("]")
				
				
				//---compile script commands
				
				//---TMP command: add value to tempregister
				if upper$(b$)="TMP" 
					script(loadedscripts,i,1)=CMD_TMP
					script(loadedscripts,i,2)=val(c$)
				Endif
				
				//---RND command: add value to randregister
				if upper$(b$)="RND" 
					script(loadedscripts,i,1)=CMD_RND
					script(loadedscripts,i,2)=val(c$)
					script(loadedscripts,i,3)=val(d$)
					
				Endif
				
				//--add value to A register from temp
				if upper$(b$)="SDA" 
					script(loadedscripts,i,1)=CMD_SDA
					script(loadedscripts,i,2)=CMD_TMP
				Endif
				
				//---end of compiling script commands
			_endoftheline:
			if file end(fileid) : i=100 : else : i=0 : endif
			Next i	
	Close File fileid
	freeresource(fileid,res_file)
Endfunction

Function Run_Scripts()
if loadedscripts>0
	for i=1 to loadedscripts
		for scriptline=1 to 100
			If script(i,scriptline,1)=CMD_RND then script_randomregister=rnd(script(i,scriptline,3)-script(i,scriptline,2))+script(i,scriptline,2)
		
		next scriptline
	next i
Endif
Endfunction

