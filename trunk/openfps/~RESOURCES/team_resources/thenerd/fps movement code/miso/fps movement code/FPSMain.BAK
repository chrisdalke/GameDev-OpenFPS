/////////////////////////////////////
// FPS MOVEMENT TEST ENVIRONMENT
// Coded by thenerd 
// July 14th, 2011
/////////////////////////////////////

`main init code
set display mode 800,600,32
setupcrosshair800()
disable escapekey
sync on
sync rate 60
backdrop on
color backdrop rgb(128,128,200)
autocam off
hide mouse

`make font
font_default=a2CreateFont("Tahoma",12,a2Size_Point(),a2Style_Normal())



GLOBAL comet_screen_fps

a2text font_default,10,10,"...Loading Game Engine Media...",White:sync

`load test level
load object "movement_test\testmap.dbo",1,3
load object "movement_test\testmap_Transparency.dbo",2,3
load effect "movement_test\LightMap.fx",1,0
set object effect 1,1
set object effect 2,1
set object transparency 2,2
Add_ObjectCollision(1)
Add_ObjectCollision(2)

global cr#
global cf#
global ncr#
global ncf#
global ncx#
global ncy#
global camera_object
global camera_object2
camera_object=20
camera_object2=21

rem player movement vector
global vx# as double float
global vy# as double float
global vz# as double float

global cvx# as double float
global cvz# as double float

global CAM_x# as float
global CAM_y# as float
global CAM_z# as float
global CAM_AngleX# as float
global CAM_AngleY# as float
global CAM_AngleZ# as float

global gravity# as double float : gravity# = -0.2
global slope# as double float : slope# = 0.5
global ground as integer : ground = 1
global jumptimer as integer : jumptimer = 0
global radius# as double float : radius# = 7.0
global littleRadius# as double float : littleRadius# = 2.0
global Sprint_energy# as float
global Speed_factor# as float
Sprint_energy#=100.0
Speed_factor#=2.0

Create_CameraController()

updatecrosshair()

/////////////////////////////////////

`main loop

do
	y=10
	a2text font_default,10,y,"OpenFPS Game Engine",White:y=y+a2GetLineHeight(font_default)
	a2text font_default,10,y,"[Comet Fps] Loops/Second: "+str$(comet_screen_fps),White:y=y+a2GetLineHeight(font_default)
	a2text font_default,10,y,"[Comet Fps] Screen Fps: "+str$(screen fps()),White:y=y+a2GetLineHeight(font_default)
	a2text font_default,10,y,"[Hold Shift to toggle regular Sync]",White:y=y+a2GetLineHeight(font_default)
	y=y+120
	a2text font_default,10,y,"[Movement Scripting]",White:y=y+a2GetLineHeight(font_default)
	a2text font_default,10,y,"[Cam] Speed Factor: "+str$(Speed_factor#),White:y=y+a2GetLineHeight(font_default)

    position mouse 320,240
    
    Update_CameraController()
    
    `NOTE:
    `put code for other camera controls here
    `(camera shake, all that)
    
    `POSITION CAMERA (MOVEMENT IS FINISHED)
	position camera CAM_x#,CAM_y#,CAM_z#
	rotate camera CAM_AngleX#,CAM_AngleY#,CAM_AngleZ#
     
    if shiftkey()
    	sync
    else
		comet_screen_fps=cometSYNC(60,500)
	endif
	
	`terminate the loop on escapekey
	if escapekey():
		exit
	endif
loop

/////////////////////////////////////

`terminate
end

/////////////////////////////////////

`functions 

function Add_ObjectCollision(obj_num):
    sc_setupComplexObject obj_num,1,2
endfunction

function Create_CameraController():
	make object sphere camera_object,24.0
	sc_setupObject camera_object,0,1	
	make object sphere camera_object2,24.0
	sc_setupObject camera_object2,0,1
	set alpha mapping on camera_object,50
	set object wireframe camera_object,1
endfunction

function Update_CameraController():	
	rem rotate player with mouse
	yrotate object camera_object,object angle y(camera_object)+mousemovex()/3.0
	xrotate object camera_object,object angle x(camera_object)+mousemovey()/3.0
	
	oldx# = object position x(camera_object)
	oldy# = object position y(camera_object)
	oldz# = object position z(camera_object)
	
	angy# = object angle y(camera_object)
	vx# = 0 
	vz# = 0
	
	if vy#=0 and jumptimer=0 then vy# = vy# + 10*gravity# else vy# = vy# + gravity#
	if keystate(32)=1 then vx# = vx# + cos(angy#) : vz# = vz# - sin(angy#)
	if keystate(30)=1 then vx# = vx# - cos(angy#) : vz# = vz# + sin(angy#)
	if keystate(31)=1 then vx# = vx# - sin(angy#) : vz# = vz# - cos(angy#)
	if keystate(17)=1 then vx# = vx# + sin(angy#) : vz# = vz# + cos(angy#)
	if ground=1
		if spacekey()=1 and jumptimer=0:
			vy# = vy# + 4.6 + (Speed_factor#/2)
			jumping = 1
			jumptimer=1
		endif
	endif
	
	if shiftkey():
		if abs(vx#)+abs(vz#)>0.1:
			if Sprint_energy#>4:
			Sprint_energy#=Sprint_energy#-1.0
			Speed_factor#=Speed_factor#+0.1
			else
				Sprint_energy#=-40
				Speed_factor#=Speed_factor#-0.1
			endif
		endif
	else
		Sprint_energy#=Sprint_energy#+1.0
		Speed_factor#=Speed_factor#-0.1
	endif
	Sprint_energy#=clamp(Sprint_energy#,-40.0,100.0)
	Speed_factor#=clamp(Speed_factor#,2.0,4.0)
	
	cvx#=curvevalue((vx#*Speed_factor#),cvx#,4.0)
	cvz#=curvevalue((vz#*Speed_factor#),cvz#,4.0)
	
	x# = oldx#+(cvx#)
	y# = oldy#+(vy#)
	z# = oldz#+(cvz#)
	
	`gravity (sparkies example code)
	collide = sc_SphereCastGroup(1,oldx#,oldy#,oldz#,oldx#,oldy#+vy#,oldz#,radius#,0)
	if collide>0 
		rem how flat is this ground
		ny# = sc_getCollisionNormalY()
		if abs(ny#)>slope#
			rem FLAT, stick
			oldy# = sc_getStaticCollisionY()
		else
			rem STEEP, slide
	      x# = x# - oldx# : z# = z# - oldz#
	      oldx# = sc_getCollisionSlideX()
	      oldy# = sc_getCollisionSlideY()
	      oldz# = sc_getCollisionSlideZ()
	      x# = x# + oldx# : z# = z# + oldz#
		endif
		
		rem ny#<0 means the player has hit a ceiling rather than a floor
		
		if ny#>slope#
			rem only on ground if standing on flat ground
			ground = 1 
			vy# = 0
		else 
			ground = 0
			rem if player has hit a flat ceiling then stop vy# movement
			if ny#<-slope# then vy# = gravity#
		endif
	else
		rem nothing below player, not on ground, add vertical speed to player
		oldy# = oldy# + vy#
		ground = 0
	endif
	
	rem jumptimer will decrease only when player is back on ground
	rem creates a pause between two successive jumps
	if spacekey()=0 then jumptimer=0
	if ground=1 then jumping=0
	
	rem handle horizontal movement as sliding
	rem player only collides with group 1 (level) objs and moves freely through others
	collide = sc_SphereSlideGroup(1,oldx#,oldy#,oldz#,x#,oldy#,z#,radius#,0)
	
	if collide>0
		rem if hit, reposition player, halt movement vector
		x# = sc_getCollisionSlideX()
		oldy# = sc_getCollisionSlideY()
		z# = sc_getCollisionSlideZ()
		vx# = 0
		vz# = 0
		
		rem possible code for giving the player a jumping help up stairs...
		rem might be useful if slope# is set very high but stairs are still required
		`dy# = oldy#-sc_getStaticCollisionY()
		`if dy#<slope# and dy#>0 and ground=1 then vy# = 0.5
	endif
	
	`position player objects
	position object camera_object,x#,oldy#,z#
	position object camera_object2,x#,oldy#+36,z#
	
	sc_updateObject camera_object
	
	CAM_x#=object position x(camera_object2)
	CAM_y#=object position y(camera_object2)
	CAM_z#=object position z(camera_object2)
	CAM_AngleX#=object angle x(camera_object)
	CAM_AngleY#=object angle y(camera_object)
	CAM_AngleZ#=object angle z(camera_object)

endfunction


rem comet sync function
function cometSYNC(syncrate,update)

   rem get time elapsed
   syncrate=syncrate/(1000/update)
   ssync=syncrate
   inc syncrate,offset
   time=timer()
   time_elapsed=time-oldtimer

   rem count loops
   inc cloop

   rem check if 1 second passed
   if time_elapsed>=update

      rem calculate loops missed
      lastloopsmissed=loopsmissed
      loopsmissed=((syncrate-cloop)+lastloopsmissed)/2

      rem reset values
      result=cloop
      cloop=1
      oldtimer=time

      rem calculate when to skip next loops
      if loopsmissed<1
         skip#=0
         incskip#=0
      else
         x#=syncrate
         y#=loopsmissed
         skip#=x#/y#
         incskip#=skip#
      endif
      inc offset,(ssync-result)
      result=result*(1000/update)
   endif

   rem sync
   if int(skip#)=cloop then inc skip#,incskip# else sync

endfunction result



/////////////////////////////////////