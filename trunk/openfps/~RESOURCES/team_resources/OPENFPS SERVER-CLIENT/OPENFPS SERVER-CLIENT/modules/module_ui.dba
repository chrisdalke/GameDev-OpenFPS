Rem ***** Included Source File *****
/////////////////////////
//
// OpenFPS USER INTERFACE MODULE            
//
// Created by miso    
//                           
//
/////////////////////////////////////////////////////
remstart
***** Included Source File *****

----- Changelog:
(06/23/10) - miso     - Created
                      - Implemented the basic text and bitmap font commands
(06/26/10) - miso     - Implemented the Graphic Cursor commands
(06/26/10) - miso     - Added Globals SyS_MouseMoveX, SyS_MouseMoveY
(06/26/10) - miso     - Updated UI_Terminate() to clear the mouse image too
(06/26/10) - miso     - Modified UI_Mousehandle() not to move cursor when faded out
(06/27/10) - miso     - Added some basic debug commands for internal use, its works only 1 function deep yet,
                        no need to bother with it.
(06/27/10) - miso     - Added basic input commands and window commands.
						Added console, can be called pressing TAB key.
						Added 2 test console commands, show mouse, hide mouse.
						(Be patient, I will add the comments soon, and reorganize the whole)
(06/27/10) - miso     - Added new internal timer commands. (uses Ian's matrix1)
                        Implementing the hard part, panel, button, checkbox, bar and slider gadgets. 
                        UI_Init loads 2 sound for mouseover and mouseclick, setup the gadget commands
                        UI_Handle now handles gadgets too.
(06/30/10) - miso     - Removed a testbutton.                                    
(07/01/10) - miso     - Adding 2 new function UI_EnableNonGuiMouse() and UI_DisableNonGuiMouse()
                        Adding stamina bar update to UI_handle()
(07/02/10) - miso     - Modified Code looks, hoping to be a bit more readable.
                        If there are spelling mistakes in my comments, please feel free to correct them.
                      - Added new command to delete a single gadget if exists. Nothing happens if theres no 
                        such gadget.
                      - Added new command to delete a single image. Will crash game if image is in use.
(07/03/10) - miso     - Linked the the information window to the console bar.
                      - Updated the function list
                      - fixed a serious possible bug source. (correctly using grabbing resource for res_file now)
(7/6/10)   - miso     - changed log commands to write .html format log
(7/10/10)  - miso     - added 3 new mouse commands to solve gadget dragging artifacts.
                        Dragging now works well using Chris's code.
(7/20/10)  - thenerd  - Added sprites for lobby window, changed debug HTMl file layout

Remend
Remstart
----- To-Do:
Comment the rest, create a tutorial how to build a menu system using these commands.


----- Purpose:
Shows information on screen for players. Handle graphic fonts, mouse, buttons, sliders.
Includes text, centertext, input, console and window functions.


----- Dependancies and Conflicts (IMPORTANT STUFF):
Needs the free plugin Advanced Sprites.
http://forum.thegamecreators.com/?m=forum_view&t=113378&b=5

With the mouse commands, it also needs Ian's matrix utils too.
http://forum.thegamecreators.com/?m=forum_view&t=85209&b=18


----- Conflicts

SOLVED-
Conflicts with the movement module, because mouse commands and movement module both use
the mousemovex() and mousemovey() commands, and calling it clears the mousemove puffers.
Need a Global variable, that knows who may control these commands first.
-------

----- Other Notes:
Usage (IMPORTANT***):

This module loads graphic fonts, can be used in any of the other modules. It does not load the usual media type
like Db images, it handles its own resources. Variables here are hidden, no need to modify or watch them.


----- Function List:
Remend
Remstart
----------MAIN  COMMANDS
UI_Init()     - no parameters, start all gui functions
UI_Handle()   - no parameters, handle all gui functions, must be before sync
UI_Terminate()- no parameters, unload all gui media, free used arrays
TerminateUI() - no params, just the same as before, made this one just to be similar to the other terminate functions
Remend
Remstart
----------TEXT  COMMANDS
UI_LoadStringMap(ID,name$,spacing) - loads a font file to ID(integer 1-8),name$ will be the route and name.
                                     Font will be a monospace font with space value spacing (integer) 
UI_Text(ID,x,y,sstring$)           - draws a text(sstring$) with the choosen font ID to screen x,y.
UI_Centertext(ID,x,y,sstring$)     - same as before, just centered
Remend
Remstart
----------MOUSE COMMANDS
UI_InitMouse(string$)        - loads a mousecursor image from HDD (route and filename=string$). Sets the basic mouse variables.
UI_HandleMouse()             - no parameters, handle the mouse. 
UI_HideMouse()               - no params, hides the graphic mouse.
UI_ShowMouse()               - no params, shows the graphic mouse.
UI_SetSmoothMouseOn(value)   - its a test, doesnot work well yet, dont use
UI_SetSmoothMouseOff()       - no params, its a test, doesnot work well yet, dont use
UI_FadeOutMouse()            - fades out the mouse
UI_FadeInMouse()             - fades in the mouse
UI_SetMousePosition(x,y)     - set the graphic mouse cursor position to screen x,y in pixels
UI_MouseX()                  - returns the graphic mouse position X in pixels
UI_MouseY()                  - returns the graphic mouse position Y in pixels
UI_AskMouseHidden()          - returns 1 if graphic mouse is hidden           
UI_DisableNonGuiMouse()      - mouse movements that are non gui related wont be affected
UI_EnableNonGuiMouse()       - mouse movements that are non gui related will be affected
Remend
Remstart
----------TIMER COMMANDS
UI_CreateMouseFaderTicker()  - Timer command for internal use, dont bother with it
UI_AskMouseFaderTicker()     - Timer command for internal use, dont bother with it
UI_DestroyMouseFaderTicker() - Timer command for internal use, dont bother with it
UI_CreateTextScrollTicker()  - Timer command for internal use, dont bother with it
UI_AskTextScrollTicker()     - Timer command for internal use, dont bother with it
UI_DestroyTextScrollTicker() - Timer command for internal use, dont bother with it
Remend
Remstart
----------DEBUG COMMANDS     :for internal use, we wont call them in the final build
UI_StartDebugMode(logmode)             - if logmode=1 then logfile will be made
UI_StopDebugMode()                     - No parameters
UI_SetDebugPosition(function$,source$) - Tells the debugger wich function we use at the moment
UI_RestoreDebugPosition()              - Tells the debugger, that we finished our function
UI_CheckDXSprites()                    - No parameters, checks if advanced sprites initialized, stops running of does not
UI_CheckFile(filename$)                - Checks if file is on HDD in given route and with given name, halt if does not exists
Remend
Remstart
----------WINDOW COMMANDS    :will fit as a background for console commands
UI_InitAndLoadWindow(filename$)        - loads a window image for use. only 1 window implemented for the console
UI_PutWindow(X,Y,width,heigth)         - Draws a window to screen with preloaded gui to x y. Can be called multiple times.
Remend
Remstart
----------INPUT COMMANDS     :basic input commands, later it will be enhanced.       
UI_InitInput()                         - as for now, its unused... yet.
UI_CMDInput(fontID,X,Y,fixstring$,maxcharacter) -begins an input event with font ID at x,y
UI_CheckInput()                        - called by UI_handle, no need to bother
UI_Inputready()                        - returns 1 if an input procedure is ongoing
UI_DestroyInput()                      - finishes the ongoing input event. (happens when user hits enter)

Remend
Remstart
----------GUI AND GADGET COMMANDS     :basic Gadget commands, it can be expanded.       
UI_InitGuiGraphics()                     - Initiate the gadget system by creating the needed arrays.
UI_HandleGadgets()                       - Autohandles all the gadgets mouseover and display drawings
UI_LoadGuiGraphics(ImageFile$,ImageID$)  - Loads an image for gadgetcreation from file$, with IDname$
UI_AddGadgetToScreen(id$,x,y,img$)       - Creates a gadget with ID$ to x,y with img$ image noncentered
UI_AddCenterGadgetToScreen(id$,x,y,img$) - Creates a gadget with ID$ to x,y, with img$ pixelcentered
UI_AddBarGadgetToScreen(id$,x,y,img$,max)- Creates a bar gadget with id$ to x,y using image img$.
                                           You must set the maximum value of the gadget, it determines the
                                           longitude of the bar too. (auto counted)
UI_SetGadgetValue(gadgetID$,value)       - Sets the value of the gadget, will have an effect on bars.
UI_GetGadgetValue(gadgetID$)             - returns with the value of the specified gadget
UI_GetGadgetSelection(gadgetID$)         - returns 1 if specified gadget is set to be selected
UI_CountNewValue(gadgetID$)              - sets the gadget value using mouse positions and gagdet positions (vertical sliders)
UI_AddMOuseOverImageToGadget(ID$,img$)   - adds a mouseover image to gadget
UI_AddMouseoverTitleToGadget(iD$,FontID,X,Y,text$) - adds a title to gadget for mouseover
UI_AddSelectedImageToGadget(ID$,img$)    - adds an image to gadget, will be displayed if gadget is selected
UI_AddTitleToGadget(ID$,FontID,X,Y,text$)- adds a title to the gadget with the choosed font
UI_DeleteGadget(GadgetID$)               - Deletes a specified gadget if exists, nothing happens if not
UI_DeleteGuiImage(gadgetimagenameID$)    - Deletes a loaded image if exists. Crashes the game if image is in use
UI_ChangeGadgetTitle(ID$,text$)          - Changes the Gadget title
UI_ChangeGadgetMouseoverTitle(ID$,text$) - Changes the Gadget title set for mouseover event
UI_SelectGadget(gadgetname$)             - Sets the gadget selected status to 1
UI_DeSelectGadget(gadgetname$)           - sets the gadget selected status to 0
UI_ToggleGadget(gadgetname$)             - revert the gadget selected status
UI_AddInfoToGadget(ID$,FontID,text$,orientation) - adds an info text to the gadget displayed near the mouse if overed
UI_GadgetExist(gadgetidname$)            - Returns 1 if specified gadgetID exists
UI_GadgetImageExist(gadgetimagename$)    - Returns 1 if specified gadgetimage exists
UI_CenterPercentPositionGadget(id$,x,y)  - position gadget centered to screen percentage x,y (0%-100%)
UI_CenterPositionGadget(id$,posx,posy)   - position a gadget centered to x,y pixelposition
UI_PositionGadget(id$,posx,posy)         - positions a gadget, x,y will be the top left point of the gadget
UI_AddTextLine(FontID,Xx,Yy,stringtext$) - adds a text to the queque to be shown (for credits text scrolls)
UI_ScrollTextLine(Xoffset,Yoffset)       - scrolls the quequed textline gadgets with value Xoffset and Yoffset
UI_ResetTextLineOffset()                 - Set the current text gadget offset values to zero
UI_SetTextLineOffset(x,y)                - Set the current text gadget offset positions to x y
UI_Fadeoutallguis()                      - Fades out all gadgets, not so handy, just didnt removed yet
UI_Fadeinallguis()                       - Fades in all gadgets
UI_ClearAllGuis()                        - Clears all created gadgets
UI_LoadAndSetMouseOverSND(snd$)          - Loads a sound for gadget mouseover event.
UI_LoadAndSetMouseClickSND(snd$)         - Loads a sound for gadget mouseclick event.
UI_PlayMouseClickSND()                   - Plays mouseclick sound, and set some variables to disable 
                                           multiple clicks if we change gadgets on the background.
remend
`=========Constants=========`

`===========================`

`==========Globals==========`

//-----Display Globals


//-----Mouse Globals

//-----Debug Globals

//-----Window Globals


//-----Console Globals
Global UI_EVENT_ConsoleInput        as Boolean  : `true, if the console is shown
Global UI_EVENT_ConsoleChanged      as Boolean  : `true if user just hitted tab
Global UI_EVENT_ConsoleOffset       as Integer  : `Y offset for command line
Global UI_EVENT_ConsoleState        as Integer  : `1 if console is appearing 2 if disappearing, 0 if nothing to do




//-----Gadget Globals

`===========================`

`===========Types===========`
//will hold basic ascii data for bitmap fonts


//--will hold basic data for the user interface module

//--will hold basic data for the graphic mouse









----------------------------------------------------------------------------------------------------------
`===========================`



`=========Functions=========`
/////////////////////////////////////////////////////
//MAIN COMMANDS
/////////////////////////////////////////////////////






Function UI_Terminate()
//***************************************************************************************
//*   miso                                                                              *
//*     This command will unload all ui related media.                                  *
//*                                                                                     *
//***************************************************************************************
Local x as Integer
UI_WriteLog(UI_Green,"=== Starting to terminate User Interface module")
	If UI_Display.DxSpriteInitialized = UI_True
		//--Destroy font images if loaded
			For x=1 to UI_MaxFonts
				If UI_stringmap(x,258).bitmapID>0 Then DXS DELETE SPRITE UI_stringmap(x,258).bitmapID	
			Next x
	
		//--Destroy allocated arrays of the text commands	
		    UnDim UI_Stringmap()
	    	UnDim UI_chain()
	
	    //--Destroy Mouse Image if loaded	
			If UI_Mouse.Initialized = UI_True then DXS DELETE SPRITE UI_Mouse.ID
	
		//--Destroy Window image if loaded
			If UI_Mywindow.ID>0 then DXS DELETE SPRITE UI_Mywindow.ID
	
		//--Destroy mouse sounds if loaded
			If UI_MouseclickSND>0 then delete sound UI_MouseClickSND
			If UI_MouseOverSND>0 then delete sound UI_MouseOverSND
		
		//--Unload Gadget images if loaded any
			If GadgetimageNumbers>0
				For x=1 to GadgetImageNumbers
					DXS Delete Sprite UI_Gadgetimages(x).gadgetimagepointer
				Next X
			Endif
			UI_WriteLog(UI_Green,"=== User Interface module succesfully terminated")
			
	Else
			UI_WriteLog(UI_RED,"=== User Interface module was not initialized")	
	Endif
			
Endfunction




Function TerminateUI()
//***************************************************************************************
//*   miso                                                                              *
//*     This command will unload all ui related media. Made only to be similar to the   *
//*     other modules terminate functions.                                              *
//***************************************************************************************
UI_Terminate()
Endfunction


/////////////////////////////////////////////////////
//FONT COMMANDS
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//CONSOLE  COMMANDS
/////////////////////////////////////////////////////
Function UI_HandleConsole()
//***************************************************************************************
//*   Miso                                                                              *
//*     This function handles the console using the window and input commands.          *
//*     For console command check (last five rows) should be in a different module,     *
//*     so others may put their console commands there, separetly.                      *
//*                                                                                     *
//*                                                                                     *
//***************************************************************************************
  If inkey$()="	" and UI_EVENT_ConsoleChanged=0
	Clear Entry Buffer
	UI_Input.Current=""
	If UI_EVENT_Consoleinput=0
		    UI_EVENT_ConsoleOffset  = -48
			UI_EVENT_Consolestate   = 1
  			UI_EVENT_Consoleinput   = 1
			UI_EVENT_ConsoleChanged = 1
			UI_CMDInput(3,0,8+UI_EVENT_ConsoleOffset,"CMD>",30)
	Else
			UI_EVENT_Consolestate   = 2
			UI_EVENT_Consoleinput   = 0
			UI_EVENT_ConsoleChanged = 1
			UI_Input.Current        = ""
			UI_DestroyInput()
			Clear Entry Buffer
  	Endif
  Endif
  
  If UI_Event_ConsoleState = 1
  	UI_EVENT_ConsoleOffset = UI_EVENT_ConsoleOffset+4
  	UI_CMDInput(3,0,8+UI_EVENT_ConsoleOffset,"CMD>",30)
  	//Reposition The Bars
  	UI_CenterPositionGadget("UI_staminabarholder",140,145+UI_EVENT_ConsoleOffset)
  	UI_CenterPositionGadget("UI_stamina",140,145+UI_EVENT_ConsoleOffset)
  	UI_CenterPositionGadget("UI_fatiguebarholder",140,185+UI_EVENT_ConsoleOffset)
  	UI_CenterPositionGadget("UI_fatigue",140,185+UI_EVENT_ConsoleOffset)
 
 
  Endif
 
  If UI_Event_ConsoleState = 2
 	UI_EVENT_ConsoleOffset = UI_EVENT_ConsoleOffset-4
 	UI_CMDInput(3,0,8+UI_EVENT_ConsoleOffset,"CMD>",30)
	//Reposition the bars
	UI_CenterPositionGadget("UI_staminabarholder",140,145+UI_EVENT_ConsoleOffset)
  	UI_CenterPositionGadget("UI_stamina",140,145+UI_EVENT_ConsoleOffset)
  	UI_CenterPositionGadget("UI_fatiguebarholder",140,185+UI_EVENT_ConsoleOffset)
  	UI_CenterPositionGadget("UI_fatigue",140,185+UI_EVENT_ConsoleOffset)
 
  Endif
   
  If UI_EVENT_ConsoleOffset = -48 then UI_Event_ConsoleState = 0
  If UI_EVENT_ConsoleOffset = 0 then UI_Event_ConsoleState   = 0
   
  
  If UI_EVENT_Consoleinput = 1 or UI_EVENT_Consolestate = 2
  	UI_Putwindow(0,0+UI_EVENT_ConsoleOffset,63,2)
  Endif
	
  If UI_EVENT_ConsoleChanged = 1
	If Inkey$()<>"	" then UI_EVENT_ConsoleChanged = 0
  Endif
  
 // Checks the possible results and apply the commands
 If UI_Input.alive        = 3
 	UI_EVENT_ConsoleOffset = -48
	UI_EVENT_ConsoleInput = 0
	UI_CenterPositionGadget("UI_staminabarholder",140,145+UI_EVENT_ConsoleOffset)
  	UI_CenterPositionGadget("UI_stamina",140,145+UI_EVENT_ConsoleOffset)
  	UI_CenterPositionGadget("UI_fatiguebarholder",140,185+UI_EVENT_ConsoleOffset)
 	UI_CenterPositionGadget("UI_fatigue",140,185+UI_EVENT_ConsoleOffset)
  Endif

Endfunction




/////////////////////////////////////////////////////
//INPUT   COMMANDS
/////////////////////////////////////////////////////



/////////////////////////////////////////////////////
//WINDOWS COMMANDS
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//MOUSE   COMMANDS
/////////////////////////////////////////////////////




/////////////////////////////////////////////////////
//GADGET and GUI  COMMANDS
/////////////////////////////////////////////////////




/////////////////////////////////////////////////////
//DEBUG   COMMANDS
/////////////////////////////////////////////////////
