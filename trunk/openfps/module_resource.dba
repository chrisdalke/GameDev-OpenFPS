remstart
/////////////////////////////////////////////////////
//
// OpenFPS RESOURCE MANAGEMENT Core Module
//
// Created by BMacZero
// Maintained by BMacZero
//
/////////////////////////////////////////////////////

----- Changelog:
(11/18/09) - BMacZero - Created
(12/16/09) - BMacZero - Fixed potentially serious bug concerning grabResource
(2/7/10)   - BMacZero - Fixed more general bugs.
(2/11/10)  - Kaedroho - Made all math resource types the same type to avoid conflicts
(2/12/10)  - BMacZero - Combined Vector values into one.
(2/12/10)  - miso     - Added log commands.
(11/28/10) - thenerd  - restructured module to fit the new module layout
(1/3/11)   - thenerd  - added shader types

----- To-Do:
-None-

----- Purpose:
Assigns and frees resource numbers (anything that needs identification in DBpro)

----- Dependancies and Conflicts:
-None-

----- Other Notes:
Usage (IMPORTANT***):
Whenever ANY module needs ANY type of resource for ANY reason,
	it MUST go through this module(excepting only BlitzTerrains)
How do you do that?  Call the RES_grab() function.  The parameter
    represents the type of resource you want (see the constant
    declarations after these statements).
When you are through with a resource, free it with the RES_free()
    function so it can be reused.

All functions in this module are prefixed with RES_
    
/////////////////////////////////////////////////////
remend

`Resource types
#Constant res_Object   0
#Constant res_Image    1
#Constant res_Sprite   2
#Constant res_File     3
#Constant res_Sound    4
#Constant res_Music    5
#Constant res_Memblock 6
#Constant res_Bitmap   7
#Constant res_Anim     8
#Constant res_Light    9
#Constant res_Camera   10
#Constant res_Mesh     11
#Constant res_Matrix   12
#Constant res_Matrix4  13
#Constant res_Vector   13
#Constant res_Particle 14
#Constant res_DLL      15
#Constant res_Shader   16

`number of resource types
#Constant res_Count    16

`resource management type
Type res_Type
    start as integer
    qty as integer
endtype

/////////////////////////////////////////////////////////
// INIT                                                //
/////////////////////////////////////////////////////////


function RES_init()
	// -----------------------
	// Init function
	// -----------------------
	
	`global init
	global DIM ResourceCounters(res_Count)   as integer
	global DIM FreeResourcesIndex(res_Count) as res_Type
	global DIM FreeResources(0)              as integer
	// -----------------------
endfunction


/////////////////////////////////////////////////////////
// CORE                                                //
/////////////////////////////////////////////////////////


function RES_grab(restype)
	// -----------------------
	// Grab a resource
	// -----------------------
	local result as integer
	if FreeResourcesIndex(restype).qty=0
    	inc ResourceCounters(restype)
    	result=ResourceCounters(restype)
    else
    	result=FreeResources(FreeResourcesIndex(restype).start)
    	array delete element FreeResources(0),FreeResourcesIndex(restype).start
    	dec FreeResourcesIndex(restype).qty
    	
    	for d=restype+1 to res_Count
        	dec FreeResourcesIndex(d).start
    	next d
	endif    
	// -----------------------
endfunction result



function RES_free(number,restype)
	// -----------------------
	// Free a resource
	// -----------------------
	local temp as integer
	`Delete it if it hasn't been
	select restype
    	case res_Object
        	if object exist(number) then delete object number
    	endcase
    	case res_Image
        	if image exist(number) then delete image number
    	endcase
    	case res_Sprite
        	if sprite exist(number) then delete sprite number
    	endcase
    	case res_File
        	if file open(number) then close file number
    	endcase
    	case res_Sound
        	if sound exist(number) then delete sound number
    	endcase
    	case res_Music
        	if music exist(number) then delete music number
    	endcase
    	case res_Memblock
        	if memblock exist(number) then delete memblock number
    	endcase
    	case res_Bitmap
        	if bitmap exist(number) then delete bitmap number
    	endcase
    	case res_Anim
        	if animation exist(number) then delete animation number
    	endcase
    	case res_Light
        	if light exist(number) then delete light number
    	endcase
    	case res_Camera
        	if camera exist(number) then delete camera number
    	endcase
    	case res_Mesh
        	if mesh exist(number) then delete mesh number
    	endcase
    	case res_Matrix
        	if matrix exist(number) then delete matrix number
    	endcase
    	case res_Particle
        	if particles exist(number) then delete particles number
    	endcase
    	case res_Matrix4
    		`WARNING: WILL CRASH IF MATRIX DOES NOT EXIST (no exists command)
        	delete matrix4 number
    	endcase
    	case res_Vector
        	if vector exist(number):
        		`check for type of vector
        		if VECTOR TYPE(number)=1 then DELETE VECTOR2 number
        		if VECTOR TYPE(number)=2 then DELETE VECTOR3 number
        		if VECTOR TYPE(number)=3 then DELETE VECTOR4 number
        	endif
    	endcase
    	case res_DLL
        	if dll exist(number) then delete dll number
    	endcase
        case res_Shader
        	if effect exist(number) then delete effect number
    	endcase
    	case default
        	exitfunction
    	endcase
	endselect
	
	if number=ResourceCounters(restype)
    	dec ResourceCounters(restype)
    	else
    	temp=FreeResourcesIndex(restype).start+FreeResourcesIndex(restype).qty
    	array insert at element FreeResources(0),temp
    	FreeResources(temp)=number
    	inc FreeResourcesIndex(restype).qty
    	
    	for d=restype+1 to res_Count
        	inc FreeResourcesIndex(d).start
    	next d
	endif
	// -----------------------
endfunction

`old function names for compatibility

function grabResource(restype)
	result=RES_grab(restype)
endfunction result

function freeResource(number,restype)
	RES_free(number,restype)
endfunction

/////////////////////////////////////////////////////////
// TERMINATE                                           //
/////////////////////////////////////////////////////////


function RES_terminate()
	// -----------------------
	// Terminate resource module
	// -----------------------
	UI_WriteLog(UI_Green,"=== Terminating Resource module")
	UNDIM ResourceCounters(0)
	UNDIM FreeResourcesIndex(0)
	UNDIM FreeResources(0)
	UI_WriteLog(UI_Green,"=== Resource module terminated")
	// -----------------------
endfunction