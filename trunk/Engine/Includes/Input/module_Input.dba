//////////////////////////////////////////////////////////////
//  Game Engine Standard Modules - INPUT MODULE
//  Concept and code by thenerd, Summer 2012!
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//  UDTS
//////////////////////////////////////////////////////////////

//type t_Input - stores input variables
Type t_Input
	Mouse_down As Integer
	Mouse_click As Integer
	KEY_FORWARD as integer
	KEY_BACKWARD as integer
	KEY_LEFT as integer
	KEY_RIGHT as integer
	KEY_JUMP as integer
	KEY_CROUCH as integer
	KEY_SPRINT as integer
	KEY_PRIMARYFIRE as integer
	KEY_SECONDARYFIRE as integer
	KEY_WEAPON1 as integer
	KEY_WEAPON2 as integer
	KEY_WEAPON3 as integer
	KEY_GRENADE as integer
	KEY_RELOAD as integer
	KEY_ZOOM as integer
	KEY_VIEWOBJECTIVES as integer
	KEY_VIEWPLAYERS as integer
	KEY_USE as integer
	KEY_CHAT as integer
	KEY_VOICECHAT as integer
	KEY_PAUSE as integer
	KEY_CONSOLE As Integer
endtype

//////////////////////////////////////////////////////////////
//  FUNCTIONS
//////////////////////////////////////////////////////////////

//Input_Init() - starts up the input system.
Function Input_Init():
	//Make input UDT
	global Game_Input as t_Input
	
	//MOVEMENT CONSTANTS
	Game_Input.KEY_FORWARD = 17
	Game_Input.KEY_BACKWARD = 31
	Game_Input.KEY_LEFT = 30
	Game_Input.KEY_RIGHT = 32
	Game_Input.KEY_JUMP = 57
	Game_Input.KEY_CROUCH = 29
	Game_Input.KEY_SPRINT = 42

	//WEAPON CONSTANTS
	Game_Input.KEY_PRIMARYFIRE = 1
	Game_Input.KEY_SECONDARYFIRE  = 2
	Game_Input.KEY_WEAPON1  = 2
	Game_Input.KEY_WEAPON2  = 3
	Game_Input.KEY_WEAPON3  = 4
	Game_Input.KEY_GRENADE  = 5
	Game_Input.KEY_RELOAD  = 19

	//ACTIVE CONSTANTS
	Game_Input.KEY_ZOOM = 44
Game_Input.KEY_VIEWOBJECTIVES  = 6
Game_Input.KEY_VIEWPLAYERS  = 15
Game_Input.KEY_USE  = 18
Game_Input.KEY_CHAT  = 21
Game_Input.KEY_VOICECHAT = 47
Game_Input.KEY_PAUSE = 1
Game_Input.KEY_CONSOLE  = 41
UI_WriteLog(UI_Green,"Input: Initialized.")
Endfunction

//Input_Grab() - returns a string containing the current user input.
Function Input_Grab():
	//returns a value for the engine. each boolean corresponds to a key being pressed.
	local keys$ as string
	if keystate(Game_Input.KEY_FORWARD):keys$=keys$+"1":else:keys$=keys$+"0":endif
	if keystate(Game_Input.KEY_BACKWARD):keys$=keys$+"1":else:keys$=keys$+"0":endif
	if keystate(Game_Input.KEY_LEFT):keys$=keys$+"1":else:keys$=keys$+"0":endif
	if keystate(Game_Input.KEY_RIGHT):keys$=keys$+"1":else:keys$=keys$+"0":endif
	if keystate(Game_Input.KEY_JUMP):keys$=keys$+"1":else:keys$=keys$+"0":endif
	if keystate(Game_Input.KEY_CROUCH):keys$=keys$+"1":else:keys$=keys$+"0":endif
	if keystate(Game_Input.KEY_SPRINT):keys$=keys$+"1":else:keys$=keys$+"0":endif
	If mouseclick()=Game_Input.KEY_PRIMARYFIRE:keys$=keys$+"1":else:keys$=keys$+"0":endif
	If mouseclick()=Game_Input.KEY_SECONDARYFIRE:keys$=keys$+"1":else:keys$=keys$+"0":endif
	if keystate(Game_Input.KEY_WEAPON1):keys$=keys$+"1":else:keys$=keys$+"0":endif
	if keystate(Game_Input.KEY_WEAPON2):keys$=keys$+"1":else:keys$=keys$+"0":endif
	if keystate(Game_Input.KEY_WEAPON3):keys$=keys$+"1":else:keys$=keys$+"0":endif
	if keystate(Game_Input.KEY_GRENADE):keys$=keys$+"1":else:keys$=keys$+"0":endif
	if keystate(Game_Input.KEY_RELOAD):keys$=keys$+"1":else:keys$=keys$+"0":endif
	if keystate(Game_Input.KEY_ZOOM):keys$=keys$+"1":else:keys$=keys$+"0":endif
	if keystate(Game_Input.KEY_USE):keys$=keys$+"1":else:keys$=keys$+"0":endif
	
	encode = Bin To Decimal(keys$)
Endfunction encode

//Input_Update() - updates the input system.
Function Input_Update():
	//handle mouse
	Game_input.Mouse_click = 0
	If Mouseclick()=1:
		If Game_input.Mouse_down = 0
			Game_input.Mouse_click = 1
			Game_input.Mouse_down = 1
		endif
	else
		Game_input.Mouse_down = 0
	endif
Endfunction

// Input_Text_Grab() - Grabs text input from the windows buffer.
Function Input_Text_Grab():
	//Grab input - needs code to remove ! (enter key)
	Local tinput_grab As String
	tinput_grab = Entry$(1)
	//remove extra characters from carriage return and new line
	tinput_grab=remove$(tinput_grab,chr$(13))
	tinput_grab=remove$(tinput_grab,chr$(10))
Endfunction tinput_grab

//Input_Text_Clear() - Clears the windows text input.
Function Input_Text_Clear():
	clear entry buffer
Endfunction

//Input_Terminate() - Terminates the input module.
Function Input_Terminate():
	//terminate the input module.
	UI_WriteLog(UI_Green,"Input: Terminated.")
endfunction

//////////////////////////////////////////////////////////////
//  End of module
//////////////////////////////////////////////////////////////