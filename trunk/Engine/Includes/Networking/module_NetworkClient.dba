//////////////////////////////////////////////////////////////
//  Game Engine Standard Modules - NETWORK MODULE
//  Concept and code by thenerd, Summer 2012!
//////////////////////////////////////////////////////////////
// 
// Module for CLIENT system
//
//////////////////////////////////////////////////////////////
//  CONSTANTS
//////////////////////////////////////////////////////////////

#constant WAITING_TO_JOIN 1
#constant JOINING 2
#constant IDLE 3

//////////////////////////////////////////////////////////////
//  UDTS
//////////////////////////////////////////////////////////////

type t_NetworkClient
    name as string
    ip as string
    state as integer
    mapfile as string
    serverip as string
    serverport as integer
endtype

//////////////////////////////////////////////////////////////
//  MAIN FUNCTIONS
//////////////////////////////////////////////////////////////

function Client_Start(serverip as string,serverport as integer):
    UI_FadeManager.state=UI_FADEIN
    UI_FadeManager.target=M_ENGINE_LOADING
    global Client as t_NetworkClient
    Client.name = "player"
    Client.ip = Game.ip
    Client.state = WAITING_TO_JOIN
    Client.serverip = serverip
    Client.serverport = serverport
    Network.GameClient = 1
    ui_Writelog(UI_Blue,"Client: joining "+serverip)
ENDFUNCTION

function Client_Update():
    select Client.state
        case WAITING_TO_JOIN
            if MenuUI.mode=M_ENGINE_LOADING and UI_FadeManager.state=UI_NORMAL:
                Client.state = JOINING
                ui_Writelog(UI_Blue,"Client: triggered join")
            endif
        endcase
        case JOINING
            //recieve initial data
            Client.mapfile = ""
            if Game_Running = 1:
                //check to see if game is also a server
                if Network.GameServer = 1:
                    //don't load a new level
                    ui_Writelog(UI_Blue,"Client: running server in localhost.")
                    ui_Writelog(UI_Blue,"didn't start a new level.")
                else
                    //delete the old level and load the new one
                    Game_End()
                    Game_Load(Client.mapfile)
                    ui_Writelog(UI_Blue,"Client: reloaded level "+Client.mapfile)
                endif
            else:
                Game_Load(Client.mapfile)
                ui_Writelog(UI_Blue,"Client: loaded" + Client.mapfile)
            endif
            Client.state = IDLE
        endcase
        case IDLE
        endcase
    endselect
ENDFUNCTION

function Client_Terminate():
    ui_Writelog(UI_Blue,"Client: terminated")
    Game_End()
ENDFUNCTION
        
//////////////////////////////////////////////////////////////
//  End of code
//////////////////////////////////////////////////////////////

//old code:
remstart
type t_Client
    client_name as string
    server_channel as integer
    init as integer
    auth as integer
    autofailtime as integer
    server_ip as string
    server_port as integer
    server_name as string
    server_description as string
    level_name as string
endtype


function Network_Connect(target_ip as string,target_port as integer):
    if Client.init = 0:
        global Client as t_client
        //connect via tcp! udp will come later!
        Client.client_name = "DefaultPlayer"
        Client.server_ip = target_ip
        Client.server_port = target_port
        //this will crash if it doesnt work
        Client.server_channel = Winsock Connect(Client.server_ip,Client.server_port)
        if WINSOCK CHANNEL ERROR(Client.server_channel):
            UI_FadeManager.state=UI_FADEIN
            UI_FadeManager.target=M_MENU_GENERICPROMPT
            prompttextone$="Err code:"+ winsock channel error msg$(Client.server_channel)
            prompttitle$="failed to connect."
            ui_writelog(UI_Blue,"failed to connect.")
            winsock delete channel Client.server_channel
        else:
            Client.init = 1
            Client.auth = 0
            Client.autofailtime = 0
            UI_FadeManager.state=UI_FADEIN
            UI_FadeManager.target=M_MENU_JOINGAME
            ui_writelog(UI_Blue,"Connected to server.")
            Winsock Make Packet
            Winsock Add String "cl_getdata"
            Winsock Send Tcp Packet Client.server_channel
        endif
    else
        ui_writelog(UI_Blue,"Already connected to a server!")
    endif
endfunction

function Network_Client_Update():
    if Client.init = 1:
    if Winsock Channel Data Waiting(Client.server_channel):
        //check incoming data from server (TCP)
        Winsock recv message Client.server_channel
        Winsock Split Data Client.server_channel
        While Winsock Packet Count(Client.server_channel)>0:
        Winsock Fetch Packet Client.server_channel
        Local packet_header As String
        packet_header = Winsock Read String$()
        Select packet_header
            case "sv_pushdata"
                //add new chat line
                if winsock read string$() = "OpenFPS"
                    Client.server_name = Winsock Read String$()
                    Client.server_description = Winsock Read String$()
                    Client.level_name = Winsock Read String$()
                    Client.auth = 1
                endif
            endcase
        Endselect
        endwhile
    Endif
    endif
endfunction

function Network_Client_Disconnect():
    Client.init = 0
    winsock disconnect Client.server_channel
endfunction
remend