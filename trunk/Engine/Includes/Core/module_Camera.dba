//////////////////////////////////////////////////////////////
//  Game Engine Standard Modules - CAMERA MODULE
//  Concept and code by thenerd, Summer 2012!
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//  CONSTANTS
//////////////////////////////////////////////////////////////

#Constant CAM_FREE 1
#Constant CAM_SPECTATOR 2
#Constant CAM_SPECTATOR_FREE 3
#Constant CAM_PLAYER 4
#Constant CAM_VEHICLE 5

//////////////////////////////////////////////////////////////
//  UDTS
//////////////////////////////////////////////////////////////

Type t_CameraVector
	x As Float
	y As Float
	z As Float
endtype

Type t_Camera
	id As Integer
	Width As Integer
	Height As Integer
	Imageid As Integer
	FOV As Float
	CurvedFOV as float
	position As t_CameraVector
	smoothing as boolean
	smoothpos As t_CameraVector
	smoothrot as t_CameraVector
	rotation As t_CameraVector
Endtype

Type t_PointCameraList
	position As t_CameraVector
	rotation As t_CameraVector
	FOV As Float
	name as string
endtype

//////////////////////////////////////////////////////////////
//  FUNCTIONS
//////////////////////////////////////////////////////////////

Function CameraSystem_Init():
	UI_WriteLog(UI_GREEN,"Starting up camera system.")
	dim CameraArray() As t_Camera
	Global NumCameras As Integer
	Global RootCamera As Integer : RootCamera = 0
	Array Insert At Bottom CameraArray()
	CameraArray(0).id = 0
	CameraArray(0).width = Screen.Width
	CameraArray(0).height = Screen.Height
	CameraArray(0).FOV = 80 //test this later
	CameraArray(0).imageid = reserve free image()
	Set Camera To Image CameraArray(0).id,CameraArray(0).imageid,CameraArray(0).width,CameraArray(0).height
	color backdrop CameraArray(0).id,rgb(255,255,0)
	NumCameras = NumCameras + 1
	
	remstart
	Global Skyboxcamera As Integer : Skyboxcamera = Camera_Make(Screen.Width,Screen.Height)
	Camera_SetBackdrop(RootCamera,Camera_GetRenderImage(Skyboxcamera))
	Camera_SetPosMatrix(SkyboxCamera,0,-10000,0)
	remend
	
	//spectator freecamera variables
	Global cr#
	Global cf#
	Global ncr#
	Global ncf#
	Global cx#
	Global cy#
	Global ncx#
	Global ncy#
	global pcy#
	
	Global CameraMode As Integer
	CameraMode = CAM_SPECTATOR_FREE
	Global NumSpectatorCameras As Integer
	global CurSpectatorCamera as integer
	dim SpectatorCameras() as t_PointCameraList
	Global Paused As Boolean
	Global CameraZoom As integer
	
	Global SkyboxObject As Integer : SkyboxObject = reserve free object()
	Global SkyboxImage As Integer : SkyboxImage = reserve free image()
	Global SkyboxShader As Integer : SkyboxShader = Reserve Free Effect()
	
	make object sphere SkyBoxObject,-2000,5,5
	Load Image "Media\Materials\Cubemaps\Cube0.dds",SkyboxImage,2
   load effect "Media\Shaders\SkyBox.fx",SkyboxShader,0
	texture object SkyBoxObject,0,SkyboxImage
	Set Object Effect SkyboxObject,SkyboxShader
	
	Fog On
	Fog Distance 256*2
	Fog Color Rgb(220,220,220)
	
Endfunction

Function ClearSpectatorArray():
	Clear Array SpectatorCameras()
	NumSpectatorCameras = 0
	CurSpectatorCamera = 0
endfunction

Function CameraSystem_Update():
	CameraArray(RootCamera).smoothing = 0
	`Camera_SetRotMatrix(SkyboxCamera,CameraArray(RootCamera).rotation.x,CameraArray(RootCamera).rotation.y,CameraArray(RootCamera).rotation.z)
	If World.enabled = 1:
	If NumSpectatorCameras>0 And CameraMode = CAM_SPECTATOR:
	//spectator cameras
	CurSpectatorCamera = CurSpectatorCamera + __mouse.leftButton.clicked - __mouse.rightButton.clicked
	If CurSpectatorCamera < 0 Then CurSpectatorCamera = NumSpectatorCameras - 1
	If CurSpectatorCamera > NumSpectatorCameras - 1 Then CurSpectatorCamera = 0
	Camera_SetPosMatrix(RootCamera,SpectatorCameras(CurSpectatorCamera).position.x,SpectatorCameras(CurSpectatorCamera).position.y,SpectatorCameras(CurSpectatorCamera).position.z)
	Camera_SetRotMatrix(RootCamera,SpectatorCameras(CurSpectatorCamera).rotation.x,SpectatorCameras(CurSpectatorCamera).rotation.y,SpectatorCameras(CurSpectatorCamera).rotation.z)
	Endif
	
	If CameraMode = CAM_SPECTATOR_FREE and Paused = 0 and chatenabled = 0
		//based off of evolved's camera movement system
		ui_hidemouse()
		cr#=0:cf#=0
      If Keystate(KEY_RIGHT)=1 Then cr#=-0.2*TBM
      If Keystate(KEY_LEFT)=1 Then cr#=0.2*TBM
      If Keystate(KEY_FORWARD)=1 Then cf#=0.2*TBM
      if KEYSTATE(KEY_BACKWARD)=1 then cf#=-0.2*TBM
		ncr#=tbm_curvevalue(cr#,ncr#,10)
      ncf#=tbm_curvevalue(cf#,ncf#,10)
      cx#=cx#+sys_mousemovey*0.2
      cy#=cy#+sys_mousemovex*0.2
      if cx#>80 then cx#=80
      if cx#<-80  then cx#=-80
      ncx#=tbm_curveangle(cx#,ncx#,4)
      ncy#=tbm_curveangle(cy#,ncy#,4)
      move camera CameraArray(RootCamera).id,ncf#
      rotate camera CameraArray(RootCamera).id,0,wrapvalue(ncy#-90),0
      move camera CameraArray(RootCamera).id,ncr#
		rotate camera CameraArray(RootCamera).id,0,wrapvalue(ncy#+90),0
      Rotate Camera CameraArray(RootCamera).id,ncx#,ncy#,0
		x#=Camera Position X(CameraArray(RootCamera).id)
		y#=Camera Position Y(CameraArray(RootCamera).id)
		z#=Camera Position Z(CameraArray(RootCamera).id)
		
		collide=SC_rayCast(0,x#,256,z#,x#,0,z#,0)
		If collide>0:
			yy#=SC_getStaticCollisionY()+3.5
		endif
		if y#<yy# then y#=yy#
		CameraArray(RootCamera).position.x = x#
		CameraArray(RootCamera).position.y = y#
		CameraArray(RootCamera).position.z = z#
		CameraArray(RootCamera).rotation.x = Camera Angle X(CameraArray(RootCamera).id)
		CameraArray(RootCamera).rotation.y = Camera Angle Y(CameraArray(RootCamera).id)
		CameraArray(RootCamera).rotation.z = Camera Angle Z(CameraArray(RootCamera).id)
	Endif
	
	If CameraMode = CAM_PLAYER:
		CameraArray(RootCamera).smoothing = 1
	Endif
	
	Position Object SkyboxObject,CameraArray(RootCamera).position.x,CameraArray(RootCamera).position.y,CameraArray(RootCamera).position.z
	
	For cam = 0 To NumCameras - 1:
		//handle data
		Local locpos As t_CameraVector
		Local locrot As t_CameraVector
		if CameraArray(cam).smoothing = 0:
		locpos.x = CameraArray(cam).position.x
		locpos.y = CameraArray(cam).position.y
		locpos.z = CameraArray(cam).position.z
		locrot.x = CameraArray(cam).rotation.x
		locrot.y = CameraArray(cam).rotation.y
		locrot.z = CameraArray(cam).rotation.z
		else:
		CameraArray(cam).smoothpos.x=tbm_curvevalue(CameraArray(cam).position.x,CameraArray(cam).smoothpos.x,2)
		CameraArray(cam).smoothpos.y=tbm_curvevalue(CameraArray(cam).position.y,CameraArray(cam).smoothpos.y,2)
		CameraArray(cam).smoothpos.z=tbm_curvevalue(CameraArray(cam).position.z,CameraArray(cam).smoothpos.z,2)
		CameraArray(cam).smoothrot.x=tbm_curveangle(CameraArray(cam).rotation.x,CameraArray(cam).smoothrot.x,2)
		CameraArray(cam).smoothrot.y=tbm_curveangle(CameraArray(cam).rotation.y,CameraArray(cam).smoothrot.y,2)
		CameraArray(cam).smoothrot.z=tbm_curveangle(CameraArray(cam).rotation.z,CameraArray(cam).smoothrot.z,2)
		locpos.x = CameraArray(cam).smoothpos.x
		locpos.y = CameraArray(cam).smoothpos.y
		locpos.z = CameraArray(cam).smoothpos.z
		locrot.x = CameraArray(cam).smoothrot.x
		locrot.y = CameraArray(cam).smoothrot.y
		locrot.z = CameraArray(cam).smoothrot.z
		endif
		CameraArray(cam).CurvedFOV = tbm_curvevalue(CameraArray(cam).FOV,CameraArray(cam).CurvedFOV,20)
		Position Camera CameraArray(cam).id,locpos.x,locpos.y,locpos.z
		Rotate Camera CameraArray(cam).id,locrot.x,locrot.y,locrot.z
		set camera fov CameraArray(caM).id,CameraArray(cam).CurvedFOV
	Next cam
	Endif
Endfunction

Function Camera_Make(width As integer, height as integer):
	Local CurrentCamera As Integer
	CurrentCamera = NumCameras
	Array Insert At Bottom CameraArray()
	CameraArray(NumCameras).id = Find Free Camera() : Make Camera CameraArray(NumCameras).id
	CameraArray(NumCameras).width = width
	CameraArray(NumCameras).height = height
	CameraArray(NumCameras).FOV = 80 //test this later
	CameraArray(NumCameras).imageid = reserve free image()
	set camera to image CameraArray(NumCameras).id,CameraArray(NumCameras).imageid,width,height
	NumCameras = NumCameras + 1
Endfunction CurrentCamera

Function Camera_SetPosMatrix(id as integer,x as float,y as float,z as float):
	CameraArray(id).position.x = x
	CameraArray(id).position.y = y
	CameraArray(id).position.z = z
Endfunction

Function Camera_SetRotMatrix(id as integer,x as float,y as float,z as float):
	CameraArray(id).rotation.x = x
	CameraArray(id).rotation.y = y
	CameraArray(id).rotation.z = z
Endfunction

Function Camera_GetRenderImage(id as integer):
	Local renderimage As Integer
	renderimage = CameraArray(id).imageid
Endfunction renderimage

Function Camera_SetBackdrop(id,image As integer):
	texture backdrop CameraArray(id).id, image
endfunction

//////////////////////////////////////////////////////////////
//  End of code
//////////////////////////////////////////////////////////////