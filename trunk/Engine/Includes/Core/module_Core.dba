//////////////////////////////////////////////////////////////
//
//     ____                   __________  _____
//    / __ \____  ___  ____  / ____/ __ \/ ___/
//   / / / / __ \/ _ \/ __ \/ /_  / /_/ /\__ \ 
//  / /_/ / /_/ /  __/ / / / __/ / ____/___/ / 
//  \____/ .___/\___/_/ /_/_/   /_/    /____/  
//      /_/      
//
//   MAIN SOURCE
//////////////////////////////////////////////////////////////
//
// ----- Changelog:
// (11/19/09) - BMacZero - Created.
// (01/17/13) - thenerd  - Big project revival. 
//
// ----- To-Do / Notes:
// This is the main source file for the OpenFPS Project.
//
//////////////////////////////////////////////////////////////
//  PROJECT SOURCE CODE LIST (11/19/13)
//  *Internal modules not included on this list
//  *IMPORTANT EDITABLE SOURCE FILES:*
//
//////////////////////////////////////////////////////////////
// Setup program chunks
// This serves as organization. Each chunk is a list of functions.
// The function CORE_Run_Chunk() will run the list of functions
// within the specified chunk. In the future, options will be
// created allowing a function chunk to be run in multithreaded
// or debug mode.
// this will also provide opportunity to time the particular
// parts of the engine to see which is slowest (for optimization)
// August 2013 - Revamped to record performance stats
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
// UDTS
//////////////////////////////////////////////////////////////

type t_ChunkFunc
    function_name as string
    function_ptr as dword
    function_latency as float
endtype

//////////////////////////////////////////////////////////////
// SETUP
//////////////////////////////////////////////////////////////

//set up arrays to store chunks
Dim Chunk_Init() As t_ChunkFunc
Dim Chunk_Update() As t_ChunkFunc
Dim Chunk_Terminate() As t_ChunkFunc

//store arrays in memory
Global Chunk_Init_PTR As dword
Global Chunk_Update_PTR As dword
Global Chunk_Terminate_PTR As dword
Chunk_Init_PTR = Get Arrayptr(Chunk_Init()) : Unlink Array Chunk_Init()
Chunk_Update_PTR = Get Arrayptr(Chunk_Update()) : Unlink Array Chunk_Update()
Chunk_Terminate_PTR = Get Arrayptr(Chunk_Terminate()) : Unlink Array Chunk_Terminate()

//Init chunk
//core modules:
Chunk_Init_PTR=CORE_Chunk_Add(Chunk_Init_PTR,"SYS_Init")
Chunk_Init_PTR=CORE_Chunk_Add(Chunk_Init_PTR,"TBM_Init")
Chunk_Init_PTR=CORE_Chunk_Add(Chunk_Init_PTR,"Input_Init")
Chunk_Init_PTR=CORE_Chunk_Add(Chunk_Init_PTR,"Ent_Init")
Chunk_Init_PTR=CORE_Chunk_Add(Chunk_Init_PTR,"Audio_Init")
Chunk_Init_PTR=CORE_Chunk_Add(Chunk_Init_PTR,"UI_Init")
Chunk_Init_PTR=CORE_Chunk_Add(Chunk_Init_PTR,"Net_Init")
Chunk_Init_PTR=CORE_Chunk_Add(Chunk_Init_PTR,"Camera_Init")
Chunk_Init_PTR=CORE_Chunk_Add(Chunk_Init_PTR,"Game_Init")
Chunk_Init_PTR=CORE_Chunk_Add(Chunk_Init_PTR,"Terrain_Init")

//Update chunk
Chunk_Update_PTR=CORE_Chunk_Add(Chunk_Update_PTR,"TBM_Update")
Chunk_Update_PTR=CORE_Chunk_Add(Chunk_Update_PTR,"Input_Update")
Chunk_Update_PTR=CORE_Chunk_Add(Chunk_Update_PTR,"Net_Update")
Chunk_Update_PTR=CORE_Chunk_Add(Chunk_Update_PTR,"Game_Update")
Chunk_Update_PTR=CORE_Chunk_Add(Chunk_Update_PTR,"Camera_Update")
Chunk_Update_PTR=CORE_Chunk_Add(Chunk_Update_PTR,"Terrain_Update")
Chunk_Update_PTR=CORE_Chunk_Add(Chunk_Update_PTR,"Audio_Update")
Chunk_Update_PTR=CORE_Chunk_Add(Chunk_Update_PTR,"UI_Update")
Chunk_Update_PTR=CORE_Chunk_Add(Chunk_Update_PTR,"Ent_Update")
Chunk_Update_PTR=CORE_Chunk_Add(Chunk_Update_PTR,"SYS_Sync")

//Terminate chunk
Chunk_Terminate_PTR=CORE_Chunk_Add(Chunk_Terminate_PTR,"TBM_Terminate")
Chunk_Terminate_PTR=CORE_Chunk_Add(Chunk_Terminate_PTR,"Input_Terminate")
Chunk_Terminate_PTR=CORE_Chunk_Add(Chunk_Terminate_PTR,"Audio_Terminate")
Chunk_Terminate_PTR=CORE_Chunk_Add(Chunk_Terminate_PTR,"Terrain_Terminate")
Chunk_Terminate_PTR=CORE_Chunk_Add(Chunk_Terminate_PTR,"Game_Terminate")
Chunk_Terminate_PTR=CORE_Chunk_Add(Chunk_Terminate_PTR,"Camera_Terminate")
Chunk_Terminate_PTR=CORE_Chunk_Add(Chunk_Terminate_PTR,"Net_Terminate")
Chunk_Terminate_PTR=CORE_Chunk_Add(Chunk_Terminate_PTR,"UI_Terminate")
Chunk_Terminate_PTR=CORE_Chunk_Add(Chunk_Terminate_PTR,"SYS_Terminate")

//////////////////////////////////////////////////////////////
// Init
//////////////////////////////////////////////////////////////

//runs the init set of functions
CORE_Chunk_Run(Chunk_Init_PTR)

Engine_Check_EditorFlag()

//////////////////////////////////////////////////////////////
// Main loop
//////////////////////////////////////////////////////////////

While Game.Terminate = 0
    //runs the update set of functions
    CORE_Chunk_Run(Chunk_Update_PTR)
Endwhile

//////////////////////////////////////////////////////////////
// Terminate
//////////////////////////////////////////////////////////////

//runs the terminate set of functions and then exits
CORE_Chunk_Run(Chunk_Terminate_PTR)

//dump some debug stats
CORE_Dump_Performance("Performance_INIT",Chunk_Init_PTR)
CORE_Dump_Performance("Performance_UPDATE",Chunk_Update_PTR)
CORE_Dump_Performance("Performance_TERMINATE",Chunk_Terminate_PTR)

End

//////////////////////////////////////////////////////////////
// CHUNK Functions
//////////////////////////////////////////////////////////////

//CORE_Chunk_Add - Adds a function to the PTR chunk specified.
Function CORE_Chunk_Add(chunkptr As dword,functionname as string):
    local newchunkptr as dword
    local dim temp_chunk() as t_ChunkFunc
    Link Array temp_chunk(),chunkptr
    Array Insert At Bottom temp_chunk()
    newchunkptr = get arrayptr(temp_chunk())
    temp_chunk().function_name=functionname
    temp_chunk().function_ptr=Get Ptr To Function(functionname)
    unlink array temp_chunk()
Endfunction newchunkptr
        
//CORE_Chunk_Run - Executes the specified chunk of functions.
Function CORE_Chunk_Run(chunkptr As dword):
    Local Dim temp_chunk() As t_ChunkFunc
    Link Array temp_chunk(),chunkptr
    For func = 0 To Array Count(temp_chunk()):
        //execute function string for Chunk(func)
        oldtime = hitimer(100000)
        Call Function Ptr (temp_chunk(func).function_ptr)
        newtime = hitimer(100000)
        newavg# = ((newtime-oldtime)/100.0)
        temp_chunk(func).function_latency = newavg#
    Next func
    unlink array temp_chunk()
    Undim temp_chunk()
endfunction

//////////////////////////////////////////////////////////////
// Chunk system debug
//////////////////////////////////////////////////////////////

//debug performance dump to html:
function CORE_Dump_Performance(chartname$,chunkptr as dword):
    Write String UI_LogfileID,"<script type="+chr$(34)+"text/javascript"+chr$(34)+" src="+chr$(34)+"https://www.google.com/jsapi"+chr$(34)+"></script>"
    Write String UI_LogfileID,"<script type="+chr$(34)+"text/javascript"+chr$(34)+">"
    Write String UI_LogfileID,"google.load("+chr$(34)+"visualization"+chr$(34)+", "+chr$(34)+"1"+chr$(34)+", {packages:["+chr$(34)+"corechart"+chr$(34)+"]});"
    Write String UI_LogfileID,"google.setOnLoadCallback(drawChart);"
    Write String UI_LogfileID,"function drawChart() {"
    Write String UI_LogfileID,"var data = google.visualization.arrayToDataTable(["
    
    //this is where we generate data
    Local Dim temp_chunk() As t_ChunkFunc
    Link Array temp_chunk(),chunkptr
    For func = 0 To Array Count(temp_chunk()):
        insertname$ = temp_chunk(func).function_name
        inserttime$ = str$(temp_chunk(func).function_latency)
        insertstring$ = "['"+insertname$+" ("+inserttime$+" ms)', "+inserttime$+"],"
        Write String UI_LogfileID,insertstring$
    Next func
    unlink array temp_chunk()
    Undim temp_chunk()
    Write String UI_LogfileID,"]);"
    Write String UI_LogfileID,"var options = {"
    Write String UI_LogfileID,"title: '"+chartname$+"',"
    Write String UI_LogfileID,"backgroundColor: '#CDCDB4'"
    Write String UI_LogfileID,"};"
    Write String UI_LogfileID,"var chart = new google.visualization.PieChart(document.getElementById('"+chartname$+"'));"
    Write String UI_LogfileID,"chart.draw(data, options);"
    Write String UI_LogfileID,"}"
    Write String UI_LogfileID,"</script>"
    Write String UI_LogfileID,"<div id="+chr$(34)+chartname$+chr$(34)+" style="+chr$(34)+"width: 600px; height: 400px;"+chr$(34)+"></div>"
    Write String UI_LogfileID,"</br>"
ENDFUNCTION

//////////////////////////////////////////////////////////////
// End of code
//////////////////////////////////////////////////////////////