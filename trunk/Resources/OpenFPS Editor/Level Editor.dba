//////////////////////////////////////////////////////////////
//   OpenFPS
//   LEVEL EDITOR SOURCE
//////////////////////////////////////////////////////////////
// Changelog:
// version Alpha 0.1: First upload to SVN. Simple framework.

type t_SpectatorCamera
    name as string
    x as float
    y as float
    z as float
    rx as float
    ry as float
    rz as float
endtype

//////////////////////////////////////////////////////////////
// Standard Setup
//////////////////////////////////////////////////////////////

Set Message Callback "WndProc"

`Skin Start "Media\Black.msstyles"

Sync on
Sync Rate 0
Backdrop Off
Disable Escapekey
autocam off
set camera range 0.1,1024
lua make

change mouse 2

set dir "..\..\Engine"

Sky_Create()

//Init systems
TBM_Init()
Ent_Init()
Spectator_Init()
UI_Editor_Init()
Camera_Init()
DSky_Init()
WaterInitVariables()
Terrain_Init()
World_Editor_Init()

SET AMBIENT LIGHT 90
make light 1
SET POINT LIGHT 1,0,0,0
COLOR LIGHT 1,255,100,100
SET LIGHT RANGE 1,128

//////////////////////////////////////////////////////////////
// Editor Init
//////////////////////////////////////////////////////////////

Global ScreenWidth : ScreenWidth = Screen Width()
Global ScreenHeight : ScreenHeight = Screen Height()
Global BackgroundColor : BackgroundColor = Rgb(128,128,128)

global WaterPlain : WaterPlain = reserve free object()
global WaterPlainTex : WaterPlainTex = reserve free image()
load image "Media\Materials\Engine\Water.png",WaterPlainTex
make object plain WaterPlain,512,512,4,4
texture object WaterPlain,WaterPlainTex
scale object Texture WaterPlain,32,32
set alpha mapping on WaterPlain,80
exclude object on WaterPlain

Editor_initGizmo()
Water_Init()

global InEditor as integer
InEditor = 1

//////////////////////////////////////////////////////////////
// Main Loop
//////////////////////////////////////////////////////////////

Do
    POSITION LIGHT 1,camera position x(),camera position y(),camera position z()
    //update timer system
    TBM_Update()
    Ent_Update()
    
    //update camera movement
    Camera_Update()
    Sky_Update()
    DSky_Update()
    Water_Update()
    
    //update ui system
    Editor_UpdateGizmo()
    UI_Editor_Update()
    World_Editor_Update()
    Terrain_Update()
    Camera_PostUIRenderEditor()
    
    //sync
    sync
    if EditorUI.QuitFlag = 1 then exit
Loop
UI_Editor_Terminate()
`skin end
end

//////////////////////////////////////////////////////////////
// Misc functions
//////////////////////////////////////////////////////////////

function Sky_Create():
    //unmanaged skybox setup
    Global SkyboxImage : SkyboxImage = Reserve Free Image()
    Global SkyboxImage2 : SkyboxImage2 = Reserve Free Image()
    Global Skyboxfx : Skyboxfx = Reserve Free Effect()
    Global SkyboxObj : SkyboxObj = 8001
    make object sphere SkyboxObj,-1024,5,5
    Load Image "Media\Materials\Cubemaps\Cube0.dds",SkyboxImage,2
    Load Image "Media\Materials\Cubemaps\Cube1.dds",SkyboxImage2,2
    Load Effect "media\Shaders\SkyBox.fx",SkyboxFx,0
    Set Object Effect SkyboxObj,SkyboxFx
    Texture Object SkyboxObj,0,SkyboxImage
    `set object transparency SkyboxObj,2
    Global SkyboxSunObject As Integer : SkyboxSunObject = Reserve Free Object()
    Global SkyboxSunFlare As Integer : SkyboxSunFlare = reserve free image()
    Make Object Sphere SkyboxSunObject,2
    Set Object Light SkyboxSunObject,0
    Load Image "Media\Materials\Engine\Sunflare1.png",skyboxsunflare
    Global SkyboxSunEffect As Integer : SkyboxSuneffect = 22
    Ik Load Effect "Media\Shaders\BlendAdditive.fx",22
    global skyboxsunalpha as float
    hide light 0
ENDFUNCTION

function Sky_Update():
    //update skybox
    position object SkyboxSunObject,camera position x(),camera position y(),camera position z()
    Position Object SkyboxObj,camera position x(),camera position y(),camera position z()
    rotate Object SkyboxSunObject,Ent_GetFloat(EntGetReference("root"),"Sun_VectorX"),Ent_GetFloat(EntGetReference("root"),"Sun_VectorY"),0
    Move Object SkyboxSunObject,1000
ENDFUNCTION


Function Camera_PostUIRenderEditor():

adx#=AngleDiff(object angle x(SkyboxSunObject),camera angle x())
ady#=AngleDiff(object angle y(SkyboxSunObject),camera angle y())
ad#=(abs(adx#)+abs(ady#))
If ad#>30:
ad#=30
Endif
add#=30 - ad#
skyboxsunalpha = tbm_Curvevalue(add#,skyboxsunalpha,10)
minalpha#=0.2
ray = sc_raycast(0,camera position x(),camera position y(),camera position z(),object position x(SkyboxSunObject),object position y(SkyboxSunObject),object position z(SkyboxSunObject),0)
If Object In Screen(skyboxsunobject) and ray = 0:
Ik Set Blend Mode 15
ik set effect float 22,"Alpha",clamp(add#/(50.0+rnd(10)),minalpha#,1.0)
Ik Paste Image SkyboxSunFlare,object Screen x(SkyboxSunObject)-(Screen Width()/6),object screen y(SkyboxSunObject)-(Screen Width()/6),object Screen x(SkyboxSunObject)+(Screen Width()/6),object screen y(SkyboxSunObject)+(Screen Width()/6),22
ik set effect float 22,"Alpha",clamp(add#/(120.0+rnd(10)),minalpha#,1.0)
Ik Paste Image SkyboxSunFlare,object Screen x(SkyboxSunObject)-(Screen Width()/2),object screen y(SkyboxSunObject)-(Screen Width()/2),object Screen x(SkyboxSunObject)+(Screen Width()/2),object screen y(SkyboxSunObject)+(Screen Width()/2),22
`ik set effect float 22,"Alpha",0.5
`Ik Paste Image SkyboxSunFlare,object Screen x(SkyboxSunObject)-256,object screen y(SkyboxSunObject)-256,object Screen x(SkyboxSunObject)+256,object screen y(SkyboxSunObject)+256,22
Ik Set Blend Mode 2
Endif
Endfunction

function AngleDiff(a,b)
dif = abs(a-b)
if dif>180
adiff = 360-dif
else
adiff = dif
endif
endfunction adiff
function Camera_Init():
    global cr#
    global cf#
    global m_c
    global ncr#
    global ncf#
    global cx#
    global cy#
    global ncx#
    global ncy#
    position camera 128,64,-64
    point camera 128,32,128
    cx#=camera angle x()
    cy#=camera angle y()
ENDFUNCTION

function Camera_Update():
    if EditorUI.CameraMode = 0:
    cr#=0:cf#=0
    m_c = 0
    If mouseclick()=2 and Gizmo_Down=0 : m_c = 1 : hide mouse : position mouse desktop width()/2,desktop height()/2: else : show mouse : endif
    If Rightkey()=1 Or Keystate(32)=1 Then cr#=-EditorUI.CameraMoveSpeed*TBM*m_c
    If Leftkey()=1 Or Keystate(30)=1 Then cr#=EditorUI.CameraMoveSpeed*TBM*m_c
    If Upkey()=1 Or Keystate(17)=1 Then cf#=EditorUI.CameraMoveSpeed*TBM*m_c
    If Downkey()=1 Or Keystate(31)=1 Then cf#=-EditorUI.CameraMoveSpeed*TBM*m_c
    ncr#=tbm_curvevalue(cr#,ncr#,5)
    ncf#=tbm_curvevalue(cf#,ncf#,5)
    cx#=cx#+(EditorUI.mmy*0.2*m_c)
    cy#=cy#+(EditorUI.mmx*0.2*m_c)
    if cx#>80 then cx#=80
    if cx#<-80  then cx#=-80
    ncx#=tbm_curveangle(cx#,ncx#,2)
    ncy#=tbm_curveangle(cy#,ncy#,2)
    move camera ncf#
    rotate camera 0,wrapvalue(ncy#-90),0
    move camera ncr#
    rotate camera 0,wrapvalue(ncy#+90),0
    Rotate Camera ncx#,ncy#,0
    EditorUI.CameraX = camera position x()
    EditorUI.CameraY = camera position y()
    EditorUI.CameraZ = camera position z()
    EditorUI.CameraRX = camera angle x()
    EditorUI.CameraRY = camera angle y()
    EditorUI.CameraRZ = camera angle z()
    endif
    if EditorUI.CameraMode = 1:
        hide mouse
        position mouse desktop width()/2,desktop height()/2
        cr#=0:cf#=0
        If Rightkey()=1 Or Keystate(32)=1 Then cr#=-0.05*TBM
        If Leftkey()=1 Or Keystate(30)=1 Then cr#=0.05*TBM
        If Upkey()=1 Or Keystate(17)=1 Then cf#=0.05*TBM
        If Downkey()=1 Or Keystate(31)=1 Then cf#=-0.05*TBM
        ncr#=tbm_curvevalue(cr#,ncr#,1)
        ncf#=tbm_curvevalue(cf#,ncf#,1)
        cx#=cx#+(EditorUI.mmy*0.2)
        cy#=cy#+(EditorUI.mmx*0.2)
        if cx#>80 then cx#=80
        if cx#<-80  then cx#=-80
        ncx#=tbm_curveangle(cx#,ncx#,1)
        ncy#=tbm_curveangle(cy#,ncy#,1)
        move camera ncf#
        rotate camera 0,wrapvalue(ncy#-90),0
        move camera ncr#
        rotate camera 0,wrapvalue(ncy#+90),0
        Rotate Camera ncx#,ncy#,0
        EditorUI.CameraX = camera position x()
        EditorUI.CameraZ = camera position z()
        EditorUI.CameraRX = camera angle x()
        EditorUI.CameraRY = camera angle y()
        EditorUI.CameraRZ = camera angle z()
        ray = sc_raycast(0,EditorUI.CameraX,1000,EditorUI.CameraZ,EditorUI.CameraX,-1000,EditorUI.CameraZ,0)
        EditorUI.CameraY = SC_getStaticCollisionY ()+0.75
        position camera EditorUI.CameraX,EditorUI.CameraY,EditorUI.CameraZ
        rotate camera EditorUI.CameraRX,EditorUI.CameraRY,EditorUI.CameraRZ
        if keystate(34):
            show mouse
            setchecked EditorUI.CameraModeLock,0
            EditorUI.CameraMode = 0
        endif
    endif
    if EditorUI.CameraMode = 2:
        Spectator_SetCamera()
        position camera EditorUI.CameraX,EditorUI.CameraY,EditorUI.CameraZ
        rotate camera EditorUI.CameraRX,EditorUI.CameraRY,EditorUI.CameraRZ
    endif
ENDFUNCTION

function Spectator_Init():
    dim SpectatorCameras() as t_SpectatorCamera
    global NumSpectatorCameras
    global SpectatorCameraUniqueId as integer
    SpectatorCameraUniqueId = 0
    global FirstSelectedItem as integer
ENDFUNCTION

function Spectator_Apply_Ents():
    numitems = itemCount(EditorUI.SpectatorList)
    for i = 0 to numitems - 1:
        removeitem EditorUI.SpectatorList,0
    next i
    
    NumSpectatorCameras = 0
    for i = 0 to NumEntities-1:
        if EntGetAttribute(i,"spectator_camera")="1":
            additem EditorUI.SpectatorList,EntGetAttribute(i,"name")
            NumSpectatorCameras = NumSpectatorCameras + 1
        endif
    next i
    
endfunction

remstart
function Spectator_Refresh_Ents():
    for i = 0 to NumEntities-1:
        if EntGetAttribute(i,"spectator_camera")="1":
            EntDelete(EntGetName(i))
        endif
    next i
    if NumSpectatorCameras > 0:
    for n = 0 to NumSpectatorCameras - 1:
        entAdd("SpectatorCamera_"+str$(SpectatorCameraUniqueId))
        ref = entgetreference("SpectatorCamera_"+str$(SpectatorCameraUniqueId))
        entAddAttribute(ref,"spectator_camera","1")
        entAddAttribute(ref,"name",SpectatorCameras(n).name)
        entAddAttribute(ref,"x",str$(SpectatorCameras(n).x))
        entAddAttribute(ref,"y",str$(SpectatorCameras(n).y))
        entAddAttribute(ref,"z",str$(SpectatorCameras(n).z))
        entAddAttribute(ref,"rx",str$(SpectatorCameras(n).rx))
        entAddAttribute(ref,"ry",str$(SpectatorCameras(n).ry))
        entAddAttribute(ref,"rz",str$(SpectatorCameras(n).rz))
        SpectatorCameraUniqueId = SpectatorCameraUniqueId + 1
    next n
    endif
ENDFUNCTION
remend
`Spectator_Apply_Ents()

function Spectator_Add():
    
    entAdd("SpectatorCamera_"+str$(SpectatorCameraUniqueId))
    ref = entgetreference("SpectatorCamera_"+str$(SpectatorCameraUniqueId))
    entAddAttribute(ref,"spectator_camera","1")
    entAddAttribute(ref,"name","<new camera>")
    entAddAttribute(ref,"type","ent_spectatorcamera")
    entAddAttribute(ref,"x",str$(EditorUI.CameraX))
    entAddAttribute(ref,"y",str$(EditorUI.CameraY))
    entAddAttribute(ref,"z",str$(EditorUI.CameraZ))
    entAddAttribute(ref,"rx",str$(EditorUI.CameraRX))
    entAddAttribute(ref,"ry",str$(EditorUI.CameraRY))
    entAddAttribute(ref,"rz",str$(EditorUI.CameraRZ))
    UI_Editor_AddToConsole("Added <new camera>")
    SpectatorCameraUniqueId = SpectatorCameraUniqueId + 1
    Spectator_Apply_Ents()
    selectitem EditorUI.SpectatorList,itemCount(EditorUI.SpectatorList)-1
    
ENDFUNCTION

function Spectator_Rename(newname$):
    if selecteditem(EditorUI.SpectatorList) > -1:
        for i = 0 to NumEntities-1:
            if EntGetAttribute(i,"name")=itemText(EditorUI.SpectatorList,selecteditem(EditorUI.SpectatorList)):
                EntSetAttribute(i,"name",newname$)
            endif
        next i
        UI_Editor_AddToConsole("Renamed camera to "+newname$)
        Spectator_Apply_Ents()
    endif
ENDFUNCTION

function Spectator_Set():
    if selecteditem(EditorUI.SpectatorList) > -1:
        id = selecteditem(EditorUI.SpectatorList)
        for i = 0 to NumEntities-1:
            if EntGetAttribute(i,"name")=itemText(EditorUI.SpectatorList,selecteditem(EditorUI.SpectatorList)):
                entSetAttribute(i,"x",str$(EditorUI.CameraX))
                entSetAttribute(i,"y",str$(EditorUI.CameraY))
                entSetAttribute(i,"z",str$(EditorUI.CameraZ))
                entSetAttribute(i,"rx",str$(EditorUI.CameraRX))
                entSetAttribute(i,"ry",str$(EditorUI.CameraRY))
                entSetAttribute(i,"rz",str$(EditorUI.CameraRZ))
            endif
        next i
        UI_Editor_AddToConsole("Set camera pos/rot.")
        Spectator_Apply_Ents()
    endif
endfunction

function Spectator_SetCamera():
    if selecteditem(EditorUI.SpectatorList) > -1:
        id = selecteditem(EditorUI.SpectatorList)
        for i = 0 to NumEntities-1:
            if EntGetAttribute(i,"name")=itemText(EditorUI.SpectatorList,selecteditem(EditorUI.SpectatorList)):
                EditorUI.CameraX = ent_GetFloat(i,"x")
                EditorUI.CameraY = ent_GetFloat(i,"y")
                EditorUI.CameraZ = ent_GetFloat(i,"z")
                EditorUI.CameraRX = ent_GetFloat(i,"rx")
                EditorUI.CameraRY = ent_GetFloat(i,"ry")
                EditorUI.CameraRZ = ent_GetFloat(i,"rz")
                cx# = EditorUI.CameraRX
                cy# = EditorUI.CameraRY
                ncx# = cx#
                ncy# = cy#
            endif
        next i
    endif
endfunction

function Spectator_Delete():
    selectitem EditorUI.SpectatorList,FirstSelectedItem
    if selecteditem(EditorUI.SpectatorList) > -1:
        for i = 0 to NumEntities-1:
            if EntGetAttribute(i,"name")=itemText(EditorUI.SpectatorList,selecteditem(EditorUI.SpectatorList)):
                EntDelete(EntGetName(i))
            endif
        next i
        UI_Editor_AddToConsole("Deleted camera.")
        Spectator_Apply_Ents()
    endif
endfunction

function Editor_InitGizmo():
    global Editor_Gizmo_X as integer
    global Editor_Gizmo_Y as integer
    global Editor_Gizmo_Z as integer
    global Editor_Gizmo_shader as integer
    Editor_Gizmo_shader_x = reserve free effect()
    Editor_Gizmo_shader_y = reserve free effect()
    Editor_Gizmo_shader_z = reserve free effect()
    Load effect "Media\Shaders\color.fx",Editor_Gizmo_shader_x,0
    Load effect "Media\Shaders\color.fx",Editor_Gizmo_shader_y,0
    Load effect "Media\Shaders\color.fx",Editor_Gizmo_shader_z,0
    vec = find free vector()
    null = make vector4(vec)
    set vector4 vec,1.0,0.0,0.0,0.6
    set effect constant vector editor_gizmo_shader_x,"lightColour",vec
    set vector4 vec,0.0,1.0,0.0,0.6
    set effect constant vector editor_gizmo_shader_y,"lightColour",vec
    set vector4 vec,0.0,0.0,1.0,0.6
    set effect constant vector editor_gizmo_shader_z,"lightColour",vec
    null = delete vector4(vec)
    Editor_Gizmo_X = reserve free object()
    Editor_Gizmo_Y = reserve free object()
    Editor_Gizmo_Z = reserve free object()
    make object box Editor_Gizmo_X,0.2,0.2,4 : set object effect Editor_Gizmo_X,Editor_Gizmo_shader_x
    make object box Editor_Gizmo_Y,0.2,0.2,4 : set object effect Editor_Gizmo_Y,Editor_Gizmo_shader_y
    make object box Editor_Gizmo_Z,0.2,0.2,4 : set object effect Editor_Gizmo_Z,Editor_Gizmo_shader_z
    set object transparency Editor_Gizmo_X,2
    set object transparency Editor_Gizmo_Y,2
    set object transparency Editor_Gizmo_Z,2
    yrotate object Editor_Gizmo_X,90
    xrotate object Editor_Gizmo_Y,90
    disable object zdepth Editor_Gizmo_X
    disable object zdepth Editor_Gizmo_Y
    disable object zdepth Editor_Gizmo_Z
    global Gizmo_Down as integer
    global Gizmo_mode as integer
    Gizmo_Down = 0
        exclude object on Editor_Gizmo_X
        exclude object on Editor_Gizmo_Y
        exclude object on Editor_Gizmo_Z
ENDFUNCTION

function Editor_UpdateGizmo():
    if EditorUI.EntityCurrentSelected > -1:
        exclude object off Editor_Gizmo_X
        exclude object off Editor_Gizmo_Y
        exclude object off Editor_Gizmo_Z
        x# = Ent_GetFloat(EditorUI.EntityCurrentSelected,"x")
        y# = Ent_GetFloat(EditorUI.EntityCurrentSelected,"y")
        z# = Ent_GetFloat(EditorUI.EntityCurrentSelected,"z")
        position object Editor_Gizmo_X,x#,y#,z#
        position object Editor_Gizmo_Y,x#,y#,z#
        position object Editor_Gizmo_Z,x#,y#,z#
        pick = pick object(mousex(),mousey(),editor_Gizmo_X,Editor_Gizmo_Z)
        if pick > 0 and Gizmo_Down = 0:
            if pick = Editor_Gizmo_X and mouseclick()=1 then Gizmo_Down = 1 : Gizmo_mode = 0
            if pick = Editor_Gizmo_Y and mouseclick()=1 then Gizmo_Down = 1 : Gizmo_mode = 1
            if pick = Editor_Gizmo_Z and mouseclick()=1 then Gizmo_Down = 1 : Gizmo_mode = 2
        endif
        if mouseclick()=0 then Gizmo_Down = 0
        if Gizmo_Down =1:
            x# = x#
            y# = y#
            z# = z#
            if Gizmo_mode = 0 then x# = x# + (EditorUI.mmx*0.1)
            if Gizmo_mode = 1 then y# = y# + (EditorUI.mmy*-0.1)
            if Gizmo_mode = 2 then z# = z# + (EditorUI.mmx*-0.1)
            EntSetAttribute(EditorUI.EntityCurrentSelected,"x",str$(x#))
            EntSetAttribute(EditorUI.EntityCurrentSelected,"y",str$(y#))
            EntSetAttribute(EditorUI.EntityCurrentSelected,"z",str$(z#))
        endif
    else:
        exclude object on Editor_Gizmo_X
        exclude object on Editor_Gizmo_Y
        exclude object on Editor_Gizmo_Z
    endif
    
endfunction
    


function WndProc(hwnd, msg, wparam, lparam)
    select msg
        case 0x5
            //resize!
            `set display mode lparam && 0xFFFF, lparam >> 16, 32
            `print "Resizing..."
        endcase
        case 0x10
            UI_Editor_DoQuitPrompt()
            if EditorUI.Quitflag > -1:
                stop current message
            else:
                set message callback ""
            Endif
        endcase
    endselect
Endfunction 0

//////////////////////////////////////////////////////////////
// End of code
//////////////////////////////////////////////////////////////