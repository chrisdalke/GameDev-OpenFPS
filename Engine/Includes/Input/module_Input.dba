//////////////////////////////////////////////////////////////
//  Game Engine Standard Modules - INPUT MODULE
//  Concept and code by thenerd, Summer 2012!
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//  CONSTANTS
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//  UDTS
//////////////////////////////////////////////////////////////

Type Vector2D
	x as integer
	y as integer
Endtype

Type MouseButtons
	down as boolean
	clicked as boolean
	doubleClicked as boolean
	tripleClicked as boolean
	clickCount as integer
	scrollUp as boolean
	scrollDown as boolean
	isDragging as boolean
	hasDragged as boolean
Endtype

Type PrivateVars
	movingTimestamp as dword
	doubleClickDelay as integer
	lastClickTimestamp as dword
	mouseZValue as integer
	startDrag as boolean
Endtype

Type MouseData
	pos as Vector2D
	leftButton as MouseButtons
	rightButton as MouseButtons
	scrollButton as MouseButtons
	isMoving as boolean
	private as PrivateVars
	dragStartPos As Vector2D
	dragEndPos as Vector2D
Endtype

//////////////////////////////////////////////////////////////
//  FUNCTIONS
//////////////////////////////////////////////////////////////

Function IO_Input_Init():
	IO_Input_InitMouse()
	Global currentinput$ as string
Endfunction

Function IO_Input():
Endfunction

Function IO_Input_Update():
	currentinput$ = Entry$(1)
	IO_Input_UpdateMouse()
Endfunction

//////////////////////////////////////////////////////////////
//  Phaelax's mouse management code
//////////////////////////////////////////////////////////////

remstart
Command list
__mouse.leftButton.down
__mouse.leftButton.clicked
__mouse.leftButton.doubleClicked
__mouse.leftButton.tripleClicked
__mouse.leftButton.clickCount
__mouse.rightButton.down
__mouse.rightButton.clicked
__mouse.rightButton.doubleClicked
__mouse.rightButton.tripleClicked
__mouse.rightButton.clickCount
__mouse.scrollButton.down
__mouse.scrollButton.clicked
__mouse.scrollButton.doubleClicked
__mouse.scrollButton.tripleClicked
__mouse.scrollButton.clickCount
__mouse.scrollButton.scrollUp
__mouse.scrollButton.scrollDown
__mouse.isMoving
__mouse.pos.x
__mouse.pos.y
__mouse.leftButton.isDragging
__mouse.leftButton.hasDragged
__mouse.dragStartPos.x
__mouse.dragStartPos.y
__mouse.dragEndPos.x
__mouse.dragEndPos.y
remend

//////////////////////////////////////////////////////////////

Function IO_Input_InitMouse():    
   Global __mouse as MouseData

   load dll "user32.dll",1
   __mouse.private.doubleClickDelay = call dll(1,"GetDoubleClickTime")
   delete dll 1
Endfunction

Function IO_Input_UpdateMouse():    
	MC = Mouseclick()
    MZ = mousez()
    TimeStamp = timer()
    __mouse.leftButton.clicked   = 0
    __mouse.rightButton.clicked  = 0
    __mouse.scrollButton.clicked = 0
    __mouse.leftButton.doubleClicked   = 0
    __mouse.rightButton.doubleClicked  = 0
    __mouse.scrollButton.doubleClicked = 0
    __mouse.leftButton.tripleClicked   = 0
    __mouse.rightButton.tripleClicked  = 0
    __mouse.scrollButton.tripleClicked = 0
    __mouse.scrollButton.scrollUp   = 0
    __mouse.scrollButton.scrollDown = 0
    __mouse.leftButton.hasDragged = 0
	 
    rem reset click counters if a button other than the current one was clicked
    if MC > 0 && MC <> 1 then __mouse.leftButton.clickCount   = 0
    if MC > 0 && MC <> 2 then __mouse.rightButton.clickCount  = 0
    If MC > 0 && MC <> 4 Then __mouse.scrollButton.clickCount = 0
	 
    rem LEFT mouse button
    rem If mouse button was already down but now nothing
    rem is down, button was released. Initiate 'click'
    rem action. Store time of last click.
    if __mouse.leftButton.down and MC = 0
        __mouse.leftButton.clicked = 1
        __mouse.private.lastClickTimestamp = TimeStamp
    Endif
	 
    rem RIGHT mouse button
    if __mouse.rightButton.down and MC = 0
        __mouse.rightButton.clicked = 1
        __mouse.private.lastClickTimestamp = TimeStamp
    Endif
	 
    rem SCROLL mouse button
    if __mouse.scrollButton.down and MC = 0
        __mouse.scrollButton.clicked = 1
        __mouse.private.lastClickTimestamp = TimeStamp
    Endif
	 
    rem If mouse button has not been clicked within specified 'double-click'
    rem time value, reset counter.
    if __mouse.private.lastClickTimestamp + __mouse.private.doubleClickDelay < TimeStamp
        __mouse.leftButton.clickCount   = 0
        __mouse.rightButton.clickCount  = 0
        __mouse.scrollButton.clickCount = 0
    endif
    
    rem If LEFT mouse button was clicked, increment counter.
    if __mouse.leftButton.clicked = 1
        inc __mouse.leftButton.clickCount
        if __mouse.leftButton.clickCount = 2 then __mouse.leftButton.doubleClicked = 1
        if __mouse.leftButton.clickCount = 3 then __mouse.leftButton.tripleClicked = 1
    endif
    
    rem If RIGHT mouse button was clicked, increment counter.
    if __mouse.rightButton.clicked = 1
        inc __mouse.rightButton.clickCount
        if __mouse.rightButton.clickCount = 2 then __mouse.rightButton.doubleClicked = 1
        if __mouse.rightButton.clickCount = 3 then __mouse.rightButton.tripleClicked = 1
    endif
    
    
    rem If RIGHT mouse button was clicked, increment counter.
    if __mouse.scrollButton.clicked = 1
        inc __mouse.scrollButton.clickCount
        if __mouse.scrollButton.clickCount = 2 then __mouse.scrollButton.doubleClicked = 1
        if __mouse.scrollButton.clickCount = 3 then __mouse.scrollButton.tripleClicked = 1
    endif
    
    
    if __mouse.private.mouseZValue <> MZ
        if __mouse.private.mouseZValue > MZ then __mouse.scrollButton.scrollDown = 1
        if __mouse.private.mouseZValue < MZ then __mouse.scrollButton.scrollUp = 1
        __mouse.private.mouseZValue = MZ
    endif
    
    
    rem get current state of each button
    __mouse.leftButton.down   = (MC && %00000001) > 0
    __mouse.rightButton.down  = (MC && %00000010) > 0
    __mouse.scrollButton.down = (MC && %00000100) > 0
    
    
    rem LEFT mouse dragging
    if __mouse.leftButton.down = 1
        if __mouse.private.startDrag = 0
            __mouse.private.startDrag = 1
            __mouse.dragStartPos.x = mousex()
            __mouse.dragStartPos.y = mousey()
        else
            __mouse.dragEndPos.x = mousex()
            __mouse.dragEndPos.y = mousey()
            if __mouse.leftButton.isDragging = 0
                if abs(__mouse.dragStartPos.x - __mouse.dragEndPos.x) > 5 || abs(__mouse.dragStartPos.y - __mouse.dragEndPos.y) > 5
                    __mouse.leftButton.isDragging = 1
                endif
            endif
        endif
    else
        __mouse.private.startDrag = 0
        if __mouse.leftButton.isDragging = 1
            __mouse.leftButton.isDragging = 0
            __mouse.leftButton.hasDragged = 1
        endif
    endif
    
    
    rem the reason for the delay is because the system
    rem can update way faster than we can move a mouse
    if __mouse.private.movingTimestamp+20 < TimeStamp
        __mouse.isMoving = 0
        x = mousex() : y = mousey()
        if __mouse.pos.x <> x then __mouse.isMoving = 1
        if __mouse.pos.y <> y then __mouse.isMoving = 1
        __mouse.pos.x = x
        __mouse.pos.y = y
        __mouse.private.movingTimestamp = TimeStamp
    endif
    
endfunction

//////////////////////////////////////////////////////////////
//  End of module
//////////////////////////////////////////////////////////////