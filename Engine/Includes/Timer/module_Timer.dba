//////////////////////////////////////////////////////////////
//  Game Engine Standard Modules - TBM MODULE
//  Concept and code by thenerd, Summer 2012!
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//  DOCUMENTATION
//////////////////////////////////////////////////////////////
// Set of standard timer-based code for game engines. 
// Calculates a variable, "TBM", with a multiplier. 
// USAGE:
// -Call TBMInit in your initialization code
// -Call TBMUpdate at the start of your loop
// -Multiply all timer-based operations by "TBM".
//
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//  FUNCTIONS
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//  Function: TBM_Init()
//  Author: thenerd, bmaczero, kaedroho
//  Description: Sets up variables for the TBM system.
//  Input variables: *none*
//  Output variables: *none*
//////////////////////////////////////////////////////////////
function TBM_Init():
    global TBM as float
    global TBM_timer      as float : TBM_timer      = hitimer()
    global TBM_timer_last as float : TBM_timer_last = TBM_timer
    global TBM_timer_scale as float : TBM_timer_scale = 1.0
    global TBM_StandardSin as float : TBM_StandardSin = 0
    global TBM_StandardSinR as float : TBM_StandardSinR = 0
endfunction

//////////////////////////////////////////////////////////////
//  Function: TBM_Update()
//  Author: thenerd, bmaczero, kaedroho
//  Description: Recalculates the TBM variable. Call each loop!
//  Input variables: *none*
//  Output variables: *none*
//////////////////////////////////////////////////////////////
function TBM_Update():
        TBM_timer     = hitimer()
        Diff#          = TBM_timer - TBM_timer_last
        TBM_timer_last= TBM_timer
        TBM        = Diff# / 10.0
		  TBM = TBM * TBM_timer_scale
		  TBM_StandardSinR = TBM_StandardSinR + (3 * TBM)
		  TBM_StandardSin = Sin(TBM_StandardSinR)
		  if TBM>10 then TBM=10
endfunction

//////////////////////////////////////////////////////////////
//  Function: TBM_SetTimerScale()
//  Author: thenerd
//  Description: Sets the scale for the timer. Useful for slow-mo!
//  Input variables: scale
//  Output variables: *none*
//////////////////////////////////////////////////////////////
function TBM_SetTimerScale(scale as float):
	TBM_timer_scale = scale
endfunction

//////////////////////////////////////////////////////////////
//  Function: TBM_CurveValue()
//  Author: Joseph Thomson, 23/7/04
//  Description: Timer-based version of Curvevalue.
//  Input variables: destination value, current value, speed.
//  Output variables: interpolated value
//////////////////////////////////////////////////////////////
function TBM_CurveValue(dest as float, current as float, speed as float)
   local diff as float : local value as float
   diff = dest - current
   value = current + (diff * ((speed^TBM-(speed-1)^TBM)/(speed^TBM)))
endfunction value

//////////////////////////////////////////////////////////////
//  Function: TBM_CurveAngle()
//  Author: Joseph Thomson, 23/7/04
//  Description: Timer-based version of Curveangle.
//  Input variables: destination angle, current angle, speed.
//  Output variables: interpolated angle
//////////////////////////////////////////////////////////////
function TBM_CurveAngle(dest as float, current as float, speed as float)
   local diff as float : local value as float : local tempCurrent as float
	tempCurrent = wrapvalue(current - dest)
   if tempCurrent <= 180.0
		diff = -tempCurrent
   else
		diff = 360-tempCurrent
   endif
   value = wrapvalue(current + (diff * ((speed^TBM-(speed-1)^TBM)/(speed^TBM))))
endfunction value

//////////////////////////////////////////////////////////////
//  Function: TBMTerminate()
//  Author: thenerd, bmaczero, kaedroho
//  Description: Terminates the TBM module. Does nothing!
//  Input variables: *none*
//  Output variables: *none*
//////////////////////////////////////////////////////////////
function TBM_Terminate():
    //Terminate code
	 //This module doesn't need anything terminated!
Endfunction

//End of file