//////////////////////////////////////////////////////////////
//  Game Engine Standard Modules - WORLD MODULE
//  Concept and code by thenerd, Summer 2012!
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//  CONSTANTS
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//  UDTS
//////////////////////////////////////////////////////////////

Type t_WorldVector
	x As Float
	y As Float
	z As Float
Endtype

Type t_WorldInstance
	enabled As Boolean
	file as string
	name As String
	description as string
Endtype

Type t_WorldObject
	name As String
	modelfile As String
	texturefile As String
	mdlid As Integer
	texid as integer
	position As t_WorldVector
	rotation As t_WorldVector
	scale As t_WorldVector
	needsupdate As Boolean
endtype

//////////////////////////////////////////////////////////////
//  FUNCTIONS
//////////////////////////////////////////////////////////////

Function World_Init():
	//loads the world from the loaded level.
	//will crash if a level doesn't exist.
	//but this shouldnt be called outside of the Game system.
	ui_writelog(UI_Green,"Loading world config from ZIP...")
	
	//extract level from zip
	`local xml_filepath as string
	`xml_filepath = Game_LoadFromLevel("testlevel.xml")
	
	//make a 1-element array
	//allows us to delete the data later
	Global World_enabled As Boolean
	World_enabled = 1
	Dim World() As t_WorldInstance
	array insert at bottom World()
	World().name = "null"
	World().description = "null"
	
	Global LM_Compiled : LM_Compiled = 0
	
	//add world arrays for different types of objects
	//Planned:
	// WORLD_OBJECTS
	// WORLD_EMITTERS
	// WORLD_VEHICLES
	// WORLD_ACTORS
	// ...
	Dim WORLD_OBJECTS() As t_WorldObject : Global NUM_WORLD_OBJECTS As Integer
	ui_Writelog(UI_red,GET DIR$())
	//load world data
	If File Exist("Media\Levels\data\level.xml")=0:
		ui_Writelog(UI_red,"level file does not exist!")
	endif
	XMLID=KD LoadXML("Media\Levels\data\level.xml")
	If Kd Getxmlfirstchildnode(XMLID,"world")
		CurrentNode = Kd Getxmlfirstchildnode(XMLID)
		While CurrentNode
			Select Kd Getxmlnodevalue(XMLID)
				Case "info"
					ui_writelog(UI_Blue,"World is valid.")
					ChildNode = Kd Getxmlfirstchildnode(XMLID)
					While ChildNode
						If Kd Getxmlnodevalue(XMLID)="var":
							Select Kd Getxmlnodeattribute(XMLID,"name")
							Case "name"
								World().name = Kd Getxmlnodeattribute(XMLID,"value")
							Endcase
							Case "description"
								World().description = Kd Getxmlnodeattribute(XMLID,"value")
							endcase
							endselect
						Endif
						ChildNode = Kd Getxmlnextsiblingnode(XMLID)
					Endwhile
					KD GETXMLPARENTNODE XMLID
				Endcase
				Case "object"
					//load object data
					Array Insert At Bottom WORLD_OBJECTS()
					WORLD_OBJECTS(NUM_WORLD_OBJECTS).name=Kd Getxmlnodeattribute(XMLID,"name")
					WORLD_OBJECTS(NUM_WORLD_OBJECTS).mdlid = Reserve Free Object()
					WORLD_OBJECTS(NUM_WORLD_OBJECTS).texid = Reserve Free Image()
					WORLD_OBJECTS(NUM_WORLD_OBJECTS).scale.x = 100
					WORLD_OBJECTS(NUM_WORLD_OBJECTS).scale.y = 100
					WORLD_OBJECTS(NUM_WORLD_OBJECTS).scale.z = 100
					`ui_writelog(UI_Blue,"Parsed object "+WORLD_OBJECTS(NUM_WORLD_OBJECTS).name)
					ChildNode = Kd Getxmlfirstchildnode(XMLID)
					While ChildNode
						Select Kd Getxmlnodevalue(XMLID)
							Case "model"
								WORLD_OBJECTS(NUM_WORLD_OBJECTS).modelfile=Kd Getxmlnodeattribute(XMLID,"file")
							Endcase
							case "texture"
								WORLD_OBJECTS(NUM_WORLD_OBJECTS).texturefile=Kd Getxmlnodeattribute(XMLID,"file")
							Endcase
							Case "position"
								WORLD_OBJECTS(NUM_WORLD_OBJECTS).position.x =val(Kd Getxmlnodeattribute(XMLID,"x"))
								WORLD_OBJECTS(NUM_WORLD_OBJECTS).position.y =val(Kd Getxmlnodeattribute(XMLID,"y"))
								WORLD_OBJECTS(NUM_WORLD_OBJECTS).position.z =val(Kd Getxmlnodeattribute(XMLID,"z"))
							Endcase
							Case "rotation"
								WORLD_OBJECTS(NUM_WORLD_OBJECTS).rotation.x =val(Kd Getxmlnodeattribute(XMLID,"x"))
								WORLD_OBJECTS(NUM_WORLD_OBJECTS).rotation.y =val(Kd Getxmlnodeattribute(XMLID,"y"))
								WORLD_OBJECTS(NUM_WORLD_OBJECTS).rotation.z =val(Kd Getxmlnodeattribute(XMLID,"z"))
							Endcase
							Case "scale"
								WORLD_OBJECTS(NUM_WORLD_OBJECTS).scale.x =val(Kd Getxmlnodeattribute(XMLID,"x"))
								WORLD_OBJECTS(NUM_WORLD_OBJECTS).scale.y =val(Kd Getxmlnodeattribute(XMLID,"y"))
								WORLD_OBJECTS(NUM_WORLD_OBJECTS).scale.z =val(Kd Getxmlnodeattribute(XMLID,"z"))
							Endcase
						endselect
						ChildNode = Kd Getxmlnextsiblingnode(XMLID)
					Endwhile
					Kd Getxmlparentnode XMLID
					WORLD_OBJECTS(NUM_WORLD_OBJECTS).needsupdate = 1
					NUM_WORLD_OBJECTS = NUM_WORLD_OBJECTS + 1
				Endcase
			endselect
			CurrentNode=KD GetXMLNextSiblingNode(XMLID)
		Endwhile
		KD CLOSEXML XMLID
	endif
	
	ui_writelog(UI_Green,"Loaded world.")
Endfunction

Function World_Update():
	//updates the loaded world
	If World_enabled = 1
		//do world update

		//handle WORLD_OBJECTS
		if NUM_WORLD_OBJECTS>0:
			For staticobj = 0 To NUM_WORLD_OBJECTS - 1:
				If Object Exist(WORLD_OBJECTS(staticobj).mdlid)=0:
					Load Object WORLD_OBJECTS(staticobj).modelfile,WORLD_OBJECTS(staticobj).mdlid
					`ui_writelog(ui_blue,"Loading object "+WORLD_OBJECTS(staticobj).modelfile)
					If len(WORLD_OBJECTS(staticobj).texturefile)>0:
						If Image Exist(WORLD_OBJECTS(staticobj).texid)=0:
							Load Image WORLD_OBJECTS(staticobj).texturefile,WORLD_OBJECTS(staticobj).texid
						Endif
						Texture Object WORLD_OBJECTS(staticobj).mdlid,WORLD_OBJECTS(staticobj).texid
					endif
				Endif
				x#=WORLD_OBJECTS(staticobj).position.x
				y#=WORLD_OBJECTS(staticobj).position.y
				z#=WORLD_OBJECTS(staticobj).position.Z
				position object WORLD_OBJECTS(staticobj).mdlid,x#,y#,z#
				x#=WORLD_OBJECTS(staticobj).rotation.x
				y#=WORLD_OBJECTS(staticobj).rotation.y
				z#=WORLD_OBJECTS(staticobj).rotation.z
				rotate object WORLD_OBJECTS(staticobj).mdlid,x#,y#,z#
				x#=WORLD_OBJECTS(staticobj).scale.x
				y#=WORLD_OBJECTS(staticobj).scale.y
				z#=WORLD_OBJECTS(staticobj).scale.z
				Scale Object WORLD_OBJECTS(staticobj).mdlid,x#,y#,z#
				If Object In Screen(WORLD_OBJECTS(staticobj).mdlid):
					paste image DebugIcon,object screen x(WORLD_OBJECTS(staticobj).mdlid),object screen y(WORLD_OBJECTS(staticobj).mdlid)
				endif
			Next staticobj
		Endif
		
		//end of world update code
	endif
Endfunction

Function World_Destroy():
	//destroys the world
	Undim World()
	
	//delete world objects
	if NUM_WORLD_OBJECTS>0:
		For Current = 0 To NUM_WORLD_OBJECTS - 1:
			If Image Exist(WORLD_OBJECTS(Current).texid) Then Delete Image WORLD_OBJECTS(Current).texid
			if object exist(WORLD_OBJECTS(Current).mdlid) then delete object WORLD_OBJECTS(Current).mdlid
		Next Current
	Endif
	
	World_enabled = 0
	
Endfunction

function Object_ScaleToReal(obj as integer,size as integer):
	//will scale an object to a real size in units
	dbpunits = Object Size Y(obj,1)
	desired = size
	scale object obj,(desired/dbpunits)*100,(desired/dbpunits)*100,(desired/dbpunits)*100
endfunction

//////////////////////////////////////////////////////////////
//  End of code
//////////////////////////////////////////////////////////////