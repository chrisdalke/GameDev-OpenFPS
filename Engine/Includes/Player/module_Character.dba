//////////////////////////////////////////////////////////////
//  Game Engine Standard Modules - PLAYER MODULE
//  Concept and code by thenerd, Summer 2012!
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//  CONSTANTS
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//  UDTS
//////////////////////////////////////////////////////////////

Type t_Player
	enabled as boolean
	cx As Float
	cy As Float
	ncx As Float
	ncy As Float
	shake As Float
	eyepos As t_WorldVector
	eyerot As t_WorldVector
	sphere As Dword
	Player As Dword
	upvector As Dword
	Playerid As Dword
	speed As Float
	SPACEPRESSED As Boolean
	health As Float
	energy As Float
	energydelta As Float
	sprinting As Integer
	ticker1 As Integer
	possyncage As Integer
	rotsyncage as integer
Endtype

//////////////////////////////////////////////////////////////
//  FUNCTIONS
//////////////////////////////////////////////////////////////

Function Player_Init():
	Dim Players() As t_Player
	Global NumPhysicsPlayers As Integer
	global PlayerGroup as integer
	PlayerGroup = NDB_NewtonMaterialCreateGroupID()
	
	ui_writelog(UI_Green,"Player module init'd")
Endfunction

Function Player_add():
	Array Insert At Bottom Players()
	Players(NumPhysicsPlayers).enabled = 1
	Players(NumPhysicsPlayers).Sphere = NDB_NewtonCreateSphere( 0.5, 5.0,0.5 )
	Players(NumPhysicsPlayers).Player = Ndb_Newtoncreatebody( Players(NumPhysicsPlayers).Sphere )
	Players(NumPhysicsPlayers).speed = 5
	Players(NumPhysicsPlayers).health = 100
	Players(NumPhysicsPlayers).ticker1 = Find Free Ticker()
	make ticker Players(NumPhysicsPlayers).ticker1,33
	`setting the initial starting position.
	NDB_BuildMatrix 0.0, 0.0, 0.0, 128.0, 128.0, 128.0
	NDB_NewtonBodySetMatrix Players(NumPhysicsPlayers).Player
	`setting the mass...
	NDB_SetVector 6.0, 8.0, 6.0
	Ndb_Calculatemiboxsolid 12.0
	NDB_NewtonBodySetMassMatrix Players(NumPhysicsPlayers).player, 12.0
	`turn off auto freeze
	NDB_NewtonBodySetAutoFreeze Players(NumPhysicsPlayers).player, 0
	`turn on gravity
	NDB_BodySetGravity Players(NumPhysicsPlayers).player, 1
	`keep upright
	NDB_SetVector 0.0, 1.0, 0.0
	Players(NumPhysicsPlayers).UpVector = NDB_NewtonConstraintCreateUpVector( Players(NumPhysicsPlayers).player )
	`make player group
	Default = NDB_NewtonMaterialGetDefaultGroupID()
	NDB_NewtonMaterialSetDefaultFriction Default, PlayerGroup, 0.01, 0.01
	NDB_NewtonMaterialSetDefaultElasticity Default, PlayerGroup, 0.01
	`set controller to proper group
	NDB_NewtonBodySetMaterialGroupID Players(NumPhysicsPlayers).player, PlayerGroup
	Ndb_Newtonmaterialsetcontinuouscollisionmode DefaultMaterial, PlayerGroup, 1
	current = NumPhysicsPlayers
	NumPhysicsPlayers = numphysicsplayers + 1
endfunction current

Function Player_Update():
	If Server.enabled = 1:
	For currentplayerid = 0 To NumPhysicsPlayers - 1:
	currentclienti = currentplayerid
	remstart
	For CurrentClient = 0 To Server.Client_array_num-1:
		If ServerClients(CurrentClient).playerid=curplayerid:
			currentclienti=CurrentClient
			currentplayerid=ServerClients(CurrentClient).playerid
		endif
	Next CurrentClient
	remend
	
	//Players(currentplayerid).
	//do mouse rotation
	Players(currentplayerid).cx=ServerClients(currentclienti).rotation.x
   Players(currentplayerid).cy=ServerClients(currentclienti).rotation.y
	
   if Players(currentplayerid).cx>80 then Players(currentplayerid).cx=80
   if Players(currentplayerid).cx<-80  then Players(currentplayerid).cx=-80
	
	//START MOVEMENT CODE
	
	//move vector
	MoveX# = 0.0
	MoveZ# = 0.0
	if ServerClients(currentclienti).inputkeysdecoded.In_KEY_FORWARD or ServerClients(currentclienti).inputkeysdecoded.In_KEY_BACKWARD
		dx# = Sin(Players(currentplayerid).cy)
		dz# = cos(Players(currentplayerid).cy)
		Inc MoveX#, dx# * (ServerClients(currentclienti).inputkeysdecoded.In_KEY_FORWARD + ServerClients(currentclienti).inputkeysdecoded.In_KEY_BACKWARD)
		inc MoveZ#, dz# * (ServerClients(currentclienti).inputkeysdecoded.In_KEY_FORWARD + ServerClients(currentclienti).inputkeysdecoded.In_KEY_BACKWARD)
	endif
	if ServerClients(currentclienti).inputkeysdecoded.In_KEY_LEFT or ServerClients(currentclienti).inputkeysdecoded.In_KEY_RIGHT
		dx# = sin(Players(currentplayerid).cy+90.0)
		dz# = cos(Players(currentplayerid).cy+90.0)
		inc MoveX#, dx# * (ServerClients(currentclienti).inputkeysdecoded.In_KEY_RIGHT + ServerClients(currentclienti).inputkeysdecoded.In_KEY_LEFT)
		inc MoveZ#, dz# * (ServerClients(currentclienti).inputkeysdecoded.In_KEY_RIGHT + ServerClients(currentclienti).inputkeysdecoded.In_KEY_LEFT)
	endif
	length# = sqrt( (MoveX#^2)+(MoveZ#^2) )
	MoveX# = MoveX# / length#
	MoveZ# = MoveZ# / length#
	NDB_NewtonBodyGetVelocity Players(currentplayerid).player
	CurrentVel_X# = NDB_GetVector_X()
	CurrentVel_Y# = NDB_GetVector_Y()
	CurrentVel_Z# = NDB_GetVector_Z()
	`and our goal velocity is simply our move direction multiplied by the player's walking speed. (or 2x if running)
	If ServerClients(currentclienti).inputkeysdecoded.In_KEY_SPRINT=1:
		If Players(currentplayerid).energy >0:
			Players(currentplayerid).sprinting = 2
			Players(currentplayerid).energydelta = -0.4
		else:
			Players(currentplayerid).sprinting = 1
			Players(currentplayerid).energydelta = 0
		Endif
	else:
		Players(currentplayerid).sprinting = 1
		Players(currentplayerid).energydelta = 0.2
	Endif
	Players(currentplayerid).energy = Clamp(Players(currentplayerid).energy + (Players(currentplayerid).energydelta*TBM),0,100)
	
	GoalVel_X# = MoveX# * (Players(currentplayerid).speed * ((Players(currentplayerid).sprinting)*2) )
	GoalVel_Z# = MoveZ# * (Players(currentplayerid).Speed * ((Players(currentplayerid).sprinting)*2) )
	`here we calculate the actual acceleration needed to reach our Goal_Velocity.  note that I multiply by 0.3, which
	`is just a damper to keep the forces from getting too large too quickly.
	AccelX# = 0.3 * ((GoalVel_X# - CurrentVel_X#) / Newtontime)
	AccelZ# = 0.3 * ((GoalVel_Z# - CurrentVel_Z#) / Newtontime)
	`also we want to limit how big the acceleration can be.  this keeps the player from being able to push
	`really heavy objects, etc.
	if AccelX# > 90.0 then AccelX# = 90
	if AccelX# < -90.0 then AccelX# = -90.0
	if AccelZ# > 90.0 then AccelZ# = 90.0
	if AccelZ# < -90.0 then AccelZ# = -90.0
	NDB_BodyGetPosition Players(currentplayerid).player
	`set temp vector 2 to force direction
	NDB_SetVector 2, AccelX#, 0.0, AccelZ#
	NDB_BodyAddForceGlobal Players(currentplayerid).player
	AccelY# = 0.0
	if ServerClients(currentclienti).inputkeysdecoded.In_KEY_JUMP and Players(currentplayerid).SPACEPRESSED = 0
		Players(currentplayerid).SPACEPRESSED = 1
		`user has pressed the space bar, apparently they would like to jump :)
		`cast a ray from the player location straight down, see if we hit something.
		NDB_BodyGetPosition Players(currentplayerid).player
		px# = NDB_GetVector_X() : py# = NDB_GetVector_Y() : pz# = NDB_GetVector_Z()
		NDB_SetVector 1, px#, py#, pz#
		NDB_SetVector 2, px#, py# - 6.05, pz#
		dist# = NDB_NewtonWorldRayCast()
		`if dist# < 1.0
			`something has been found!  in this case, we don't care what, just let the player jump!
			`the jump part is just a simple upward force..
			If CurrentVel_Y#>20 Then CurrentVel_Y# = 20
			if CurrentVel_Y#<20 then CurrentVel_Y# = -20
			AccelY# = ((20 - CurrentVel_Y#) / Newtontime)
			
			`add another force to the player, the jumping force!  this is just like above, using the
			`new AddForceGlobal command!  easy, huh?
			NDB_BodyGetPosition Players(currentplayerid).player
			NDB_SetVector 2, 0.0, AccelY#, 0.0
			NDB_BodyAddForceGlobal Players(currentplayerid).player
		`endif
	endif
	If ServerClients(currentclienti).inputkeysdecoded.In_KEY_JUMP = 0 Then Players(currentplayerid).SPACEPRESSED = 0
	//END MOVEMENT CODE
	
	Ndb_Bodygetposition Players(currentplayerid).player
	If Ticker(Players(currentplayerid).ticker1)=1:
		For CurrentClient = 0 To Server.Client_array_num-1:
		Winsock Make Packet
		Winsock add String "posrot"
		Winsock add String ServerClients(currentclienti).name
		Winsock add int ServerClients(currentclienti).auth
		`Winsock add int timer()
		Winsock add float NDB_GetVector_X()
		Winsock add float NDB_GetVector_Y()
		Winsock add float NDB_GetVector_Z()
		Winsock add float Players(currentplayerid).cx  `NDB_GetVector_X()
		Winsock add float Players(currentplayerid).cy  `NDB_GetVector_Y()
		Winsock add float Players(currentplayerid).shake `NDB_GetVector_Z()
		Winsock Send Udp Packet ServerClients(CurrentClient).udp_channel
		next CurrentClient
	Endif
	
	remstart
	CameraArray(RootCamera).position.x = NDB_GetVector_X()
	CameraArray(RootCamera).position.y = NDB_GetVector_Y()
	CameraArray(RootCamera).position.z = NDB_GetVector_Z()
	CameraArray(RootCamera).rotation.x = Player.ncx
	CameraArray(RootCamera).rotation.y = Player.ncy
	CameraArray(RootCamera).rotation.z = Player.shake
	remend
	Next currentplayerid
	endif
Endfunction

//////////////////////////////////////////////////////////////
//  End of code.
//////////////////////////////////////////////////////////////