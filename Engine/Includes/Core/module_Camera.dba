//////////////////////////////////////////////////////////////
//  OpenFPS Modules - CAMERA MODULE
//  Concept and code by thenerd, Summer 2012!
//////////////////////////////////////////////////////////////
// Documentation:
// Handles calculation of curved camera values.
// Handles camera render targets.
// Handles camera smoothing and culling system.
//////////////////////////////////////////////////////////////
//  UDTS
//////////////////////////////////////////////////////////////

//Camera UDT
Type t_Camera
camera_id As Integer
camera_image As t_Image
camera_fov As t_CurvedVector
camera_nearrange As Integer
camera_farrange as Integer
position As t_3dVector
rotation as t_3dVector
position_curved As t_3dVector
rotation_curved as t_3dVector
smoothing As Boolean
zoom As Integer
shake_curve as float
shake_amplitude As Float
shake_value as float
Endtype

Type t_SpectatorCamera
    name as string
    position As t_3dVector
    rotation As t_3dVector
    rrotation As Float
    randomticker as integer
endtype

//////////////////////////////////////////////////////////////
//  FUNCTIONS
//////////////////////////////////////////////////////////////

//Camera_Init() - Sets up the Camera system.
Function Camera_Init():

//Write debug log.
UI_WriteLog(UI_GREEN,"* Starting up camera system.")
UI_WriteLog(UI_GREEN,"* Screen.Width="+str$(Screen.Width))
UI_WriteLog(UI_GREEN,"* Screen.Height="+str$(Screen.Height))

//Set up the camera array
Dim CameraArray() As t_Camera

Global SpectatorView As t_SpectatorCamera
SpectatorView.position.x = 128
SpectatorView.position.y = 32
SpectatorView.position.z = 128
SpectatorView.rotation.x = 0
SpectatorView.rotation.y = 0
SpectatorView.rotation.z = 0
Global RX#
Global RY#
global RZ#

//add the root camera to the scene
if Screen.AA > 0:
Ik Set Filters 2,2,2
Global RootCamera As Integer : RootCamera = Camera_MakeRoot(Screen.Width*Screen.AA,Screen.Height*Screen.AA)
else
Global RootCamera As Integer : RootCamera = Camera_MakeRoot(Screen.Width,Screen.Height)
endif
//Set up a skybox object for the root camera
Camera_Skybox_Setup()
//Setup lighting and fog for cameras.
Camera_Lighting_Setup()
Endfunction

//Camera_Update() - Handles the camera system, including smoothing and culling.
Function Camera_Update():
//loop through all the cameras
For Camera_Current = 0 To Game.num_cameras - 1:
//setup local variables first
Local local_position As t_3dvector
Local local_rotation As t_3dVector
//check if smoothing is turned on
If CameraArray(Camera_Current).smoothing = 0:
//if not, get the actual camera position values and use them to position camera.
local_position.x = CameraArray(Camera_Current).position.x
local_position.y = CameraArray(Camera_Current).position.y
local_position.z = CameraArray(Camera_Current).position.z
local_rotation.x = CameraArray(Camera_Current).rotation.x
local_rotation.y = CameraArray(Camera_Current).rotation.y
local_rotation.z = CameraArray(Camera_Current).rotation.z
else
//if smoothing is turned on, calculate smooth variables
CameraArray(Camera_Current).position_curved.x=tbm_curvevalue(CameraArray(Camera_Current).position.x,CameraArray(Camera_Current).position_curved.x,2)
CameraArray(Camera_Current).position_curved.y=tbm_curvevalue(CameraArray(Camera_Current).position.y,CameraArray(Camera_Current).position_curved.y,2)
CameraArray(Camera_Current).position_curved.z=tbm_curvevalue(CameraArray(Camera_Current).position.z,CameraArray(Camera_Current).position_curved.z,2)
CameraArray(Camera_Current).rotation_curved.x=tbm_curveangle(CameraArray(Camera_Current).rotation.x,CameraArray(Camera_Current).rotation_curved.x,2)
CameraArray(Camera_Current).rotation_curved.y=tbm_curveangle(CameraArray(Camera_Current).rotation.y,CameraArray(Camera_Current).rotation_curved.y,2)
CameraArray(Camera_Current).rotation_curved.z=tbm_curveangle(CameraArray(Camera_Current).rotation.z,CameraArray(Camera_Current).rotation_curved.z,2)
//grab the new values
local_position.x = CameraArray(Camera_Current).position_curved.x
local_position.y = CameraArray(Camera_Current).position_curved.y
local_position.z = CameraArray(Camera_Current).position_curved.z
local_rotation.x = CameraArray(Camera_Current).rotation_curved.x
local_rotation.y = CameraArray(Camera_Current).rotation_curved.y
local_rotation.z = CameraArray(Camera_Current).rotation_curved.z
Endif
//calculate camera shake motion
If CameraArray(Camera_Current).shake_amplitude > 0:
CameraArray(Camera_Current).shake_amplitude = clamp(CameraArray(Camera_Current).shake_amplitude - (0.2 * TBM),0,20)
CameraArray(Camera_Current).shake_curve = Wrapvalue(CameraArray(Camera_Current).shake_curve + (25 * TBM))
CameraArray(Camera_Current).shake_value = sin(CameraArray(Camera_Current).shake_curve) * CameraArray(Camera_Current).shake_amplitude
local_rotation.x = local_rotation.x + CameraArray(Camera_Current).shake_value
local_rotation.y = local_rotation.y + ( CameraArray(Camera_Current).shake_value * 0.25 )
else
CameraArray(Camera_Current).shake_curve = 0
CameraArray(Camera_Current).shake_value = 0
endif
//calculated curved FOV (always on regardless of smoothing variable)
CameraArray(Camera_Current).camera_fov.current = tbm_curvevalue(CameraArray(Camera_Current).camera_fov.destination,CameraArray(Camera_Current).camera_fov.current,20)
Position Camera CameraArray(Camera_Current).camera_id,local_position.x,local_position.y,local_position.z
Rotate Camera CameraArray(Camera_Current).camera_id,local_rotation.x,local_rotation.y,local_rotation.z
set camera fov CameraArray(Camera_Current).camera_id,CameraArray(Camera_Current).camera_fov.current
Next Camera_Current
Camera_Skybox_Update()
Endfunction

//Camera_Game_Zoom() - Zoom in function for game. Client-side only!
Function Camera_Game_Zoom():

//check if zoom is active (KEY_ZOOM) or mouse scroll
Local scroll_diff As Integer
`scroll_diff = __mouse.scrollButton.scrollUp - __mouse.scrollButton.scrollDown
CameraArray(RootCamera).zoom = Clamp(CameraArray(RootCamera).zoom+scroll_diff, 0, 1)

If Keystate(KEY_ZOOM)+CameraArray(RootCamera).zoom>0:
//paste two vignette overlays (adds to vignette effect)
Ik Paste Image MenuImage1,0,0,Screen.Width,Screen.Height
Ik Paste Image MenuImage1,0,0,Screen.Width,Screen.Height
//set the camera fov to a zoomed value
CameraArray(cam).camera_fov.destination = 30
else
//set the camera fov to a nonzoomed value
CameraArray(cam).camera_fov.destination = 80
Endif
endfunction

//Camera_make() - Creates a new camera
Function Camera_Make(width As integer, height as integer):
Local CurrentCamera As Integer
CurrentCamera = Game.num_cameras
Array Insert At Bottom CameraArray()
CameraArray(Game.num_cameras).camera_id = Find Free Camera()
Make Camera CameraArray(Game.num_cameras).camera_id
CameraArray(Game.num_cameras).camera_image.id = reserve free image()
CameraArray(Game.num_cameras).camera_image.width = width
CameraArray(Game.num_cameras).camera_image.height = height
CameraArray(Game.num_cameras).camera_fov.destination = 80
set camera to image CameraArray(Game.num_cameras).camera_id,CameraArray(Game.num_cameras).camera_image.id,width,height
Game.num_cameras = Game.num_cameras + 1
Endfunction CurrentCamera

//Camera_makeroot() - registers the root camera in the system
Function Camera_MakeRoot(width As integer, height as integer):
Local CurrentCamera As Integer
CurrentCamera = Game.num_cameras
Array Insert At Bottom CameraArray()
CameraArray(Game.num_cameras).camera_id = 0
CameraArray(Game.num_cameras).camera_image.id = reserve free image()
CameraArray(Game.num_cameras).camera_image.width = width
CameraArray(Game.num_cameras).camera_image.height = height
CameraArray(Game.num_cameras).camera_fov.destination = 80
set camera to image CameraArray(Game.num_cameras).camera_id,CameraArray(Game.num_cameras).camera_image.id,width,height
Game.num_cameras = Game.num_cameras + 1
Endfunction CurrentCamera

//Camera_setposmatrix() - sets a camera's position.
Function Camera_SetPosMatrix(id As integer,x as float,y as float,z as float):
CameraArray(id).position.x = x
CameraArray(id).position.y = y
CameraArray(id).position.z = z
Endfunction

//Camera_setrotmatrix() - sets a camera's rotation.
Function Camera_SetRotMatrix(id as integer,x as float,y as float,z as float):
CameraArray(id).rotation.x = x
CameraArray(id).rotation.y = y
CameraArray(id).rotation.z = z
Endfunction

//Camera_shake() - makes the camera shake.
Function Camera_Shake(id As integer,strength as float)
CameraArray(id).shake_amplitude = strength
endfunction

//Camera_GetPositionX() - gets the x position of a camera.
Function Camera_GetPositionX(id As integer)
Local value As Float
value = CameraArray(id).position.x
Endfunction value

//Camera_GetPositionY() - gets the y position of a camera.
Function Camera_GetPositionY(id As integer)
Local value As Float
value = CameraArray(id).position.y
Endfunction value

//Camera_GetPositionZ() - gets the z position of a camera.
Function Camera_GetPositionZ(id As integer)
Local value As Float
value = CameraArray(id).position.z
Endfunction value

//Camera_GetRotationX() - gets the x rotation of a camera.
Function Camera_GetRotationX(id As integer)
Local value As Float
value = CameraArray(id).rotation.x
Endfunction value

//Camera_GetRotationY() - gets the y rotation of a camera.
Function Camera_GetRotationY(id As integer)
Local value As Float
value = CameraArray(id).rotation.y
Endfunction value

//Camera_GetRotationZ() - gets the z rotation of a camera.
Function Camera_GetRotationZ(id As integer)
Local value As Float
value = CameraArray(id).rotation.z
endfunction value

//Camera_GetRenderImage() - gets the render image of a camera.
Function Camera_GetRenderImage(id as integer):
Local renderimage As Integer
renderimage = CameraArray(id).camera_image.id
Endfunction renderimage

//Camera_GetRenderImage() - Sets the camera's 2d backdrop.
Function Camera_SetBackdrop(id,image As integer):
texture backdrop CameraArray(id).camera_id, image
endfunction

//Camera_Lighting_Setup() - Sets up lighting and fog for cameras.
Function Camera_Lighting_Setup():
//set up fog
Fog On
Fog Distance 256*2
Fog Color Rgb(220,220,220)
endfunction

//Camera_Skybox_Setup() - Sets up the camera skybox.
Function Camera_Skybox_Setup():    
//variable setup
Global SkyboxObject As Integer : SkyboxObject = Reserve Free Object()
Global SkyboxImage As Integer  :    SkyboxImage  = Reserve Free Image()
Global SkyboxShader As Integer : SkyboxShader = Reserve Free Effect()
//object setup
make object sphere SkyBoxObject,-2000,5,5
Load Image "Media\Materials\Cubemaps\Cube0.dds",SkyboxImage,2
load effect "Media\Shaders\SkyBox.fx",SkyboxShader,0
texture object SkyBoxObject,0,SkyboxImage
Set Object Effect SkyboxObject,SkyboxShader
Global SkyboxSunObject As Integer : SkyboxSunObject = Reserve Free Object()
Global SkyboxSunFlare As Integer : SkyboxSunFlare = reserve free image()
Make Object Sphere SkyboxSunObject,2
Set Object Light 2,0
Load Image "Media\Materials\Engine\Sunflare1.png",skyboxsunflare
Global SkyboxSunEffect As Integer : SkyboxSuneffect = 22
Ik Load Effect "Media\Shaders\BlendAdditive.fx",22
global skyboxsunalpha as float
DSky_Init()
  exclude object on SkyboxObj
  exclude object on skyMesh
Endfunction

//Camera_Skybox_Load() - Loads a cubemap for the camera skybox.
Function Camera_Skybox_Load(file$ As string):
//check if file exists
If File Exist(file$):
//if file exists, replace old texture
Delete image SkyboxImage
Load Image file$,SkyboxImage,2
//retexture sky
texture object SkyBoxObject,0,SkyboxImage
endif
endfunction

//Camera_Skybox_Update() - Updates the skybox to surround the camera.
Function Camera_Skybox_Update():
//get position
Skybox_X# = Camera_GetPositionX(RootCamera)
Skybox_Y# = Camera_GetPositionY(RootCamera)
Skybox_Z# = Camera_GetPositionZ(RootCamera)
//set skybox to position
Position Object SkyboxObject,Skybox_X#,Skybox_Y#,Skybox_Z#
Position Object SkyboxSunObject,Skybox_X#,Skybox_Y#,Skybox_Z#
Rotate Object SkyboxSunObject,328,346,0
Move Object SkyboxSunObject,1000
DSky_update()
if Game_Running:
    if Ent_GetInt(EntGetReference("root"),"sky_dynamic_enabled")=1
      exclude object on SkyboxObj
      exclude object off skyMesh
        setGWTime( Ent_GetInt(EntGetReference("root"),"sky_dynamic_timeofday") , 0 , 0 )
    else:
      exclude object off SkyboxObj
      exclude object on skyMesh
    endif
ENDIF
Endfunction

function Camera_Terminate():
    DSky_Terminate()
ENDFUNCTION

Function Camera_PostUIRender():

adx#=AngleDiff(object angle x(SkyboxSunObject),Camera_GetRotationX(RootCamera))
ady#=AngleDiff(object angle y(SkyboxSunObject),Camera_GetRotationY(RootCamera))
ad#=(abs(adx#)+abs(ady#))
If ad#>50:
ad#=50
Endif
add#=50 - ad#
skyboxsunalpha = tbm_Curvevalue(add#,skyboxsunalpha,10)
If Object In Screen(skyboxsunobject):
Ik Set Blend Mode 15
ik set effect float 22,"Alpha",add#/50.0
Ik Paste Image SkyboxSunFlare,object Screen x(SkyboxSunObject)-(Screen.Width/6),object screen y(SkyboxSunObject)-(Screen.Width/6),object Screen x(SkyboxSunObject)+(Screen.Width/6),object screen y(SkyboxSunObject)+(Screen.Width/6),22
ik set effect float 22,"Alpha",add#/120.0
Ik Paste Image SkyboxSunFlare,object Screen x(SkyboxSunObject)-(Screen.Width/2),object screen y(SkyboxSunObject)-(Screen.Width/2),object Screen x(SkyboxSunObject)+(Screen.Width/2),object screen y(SkyboxSunObject)+(Screen.Width/2),22
`ik set effect float 22,"Alpha",0.5
`Ik Paste Image SkyboxSunFlare,object Screen x(SkyboxSunObject)-256,object screen y(SkyboxSunObject)-256,object Screen x(SkyboxSunObject)+256,object screen y(SkyboxSunObject)+256,22
Ik Set Blend Mode 2
Endif
Endfunction

function AngleDiff(a,b)
dif = abs(a-b)
if dif>180
adiff = 360-dif
else
adiff = dif
endif
endfunction adiff

function Camera_Spectator_Generate():
    //generates and sets up a spectator camera list
    dim SpectatorCameras() as t_SpectatorCamera
    global NumSpectatorCameras as integer
    global CurrentSpectatorCamera as integer
    global mc_toggle as integer
    //scan entities for spectator cameras
    for i = 0 to NumEntities-1:
        if EntGetAttribute(i,"spectator_camera")="1":
            array insert at bottom SpectatorCameras()
            SpectatorCameras(NumSpectatorCameras).name = EntGetAttribute(i,"name")
            SpectatorCameras(NumSpectatorCameras).position.x = Ent_GetFloat(i,"x")
            SpectatorCameras(NumSpectatorCameras).position.y = Ent_GetFloat(i,"y")
            SpectatorCameras(NumSpectatorCameras).position.z = Ent_GetFloat(i,"z")
            SpectatorCameras(NumSpectatorCameras).rotation.x = Ent_GetFloat(i,"rx")
            SpectatorCameras(NumSpectatorCameras).rotation.y = Ent_GetFloat(i,"ry")
            SpectatorCameras(NumSpectatorCameras).rotation.z = Ent_GetFloat(i,"rz")
            NumSpectatorCameras = NumSpectatorCameras + 1
        endif
    next i
ENDFUNCTION

function Camera_Spectator_Update():
    mc = mouseclick()
    if mc = 1 and mc_toggle = 0:
        mc_toggle = 1
        CurrentSpectatorCamera = CurrentSpectatorCamera + 1
    endif
    if mc = 2 and mc_toggle = 0:
        mc_toggle = 1
        CurrentSpectatorCamera = CurrentSpectatorCamera - 1
    endif
    if mc = 0 then mc_toggle = 0
    if CurrentSpectatorCamera < 0 then CurrentSpectatorCamera = NumSpectatorCameras -1
    if CurrentSpectatorCamera > NumSpectatorCameras - 1 then CurrentSpectatorCamera = 0
    x# = SpectatorCameras(CurrentSpectatorCamera).position.x
    y# = SpectatorCameras(CurrentSpectatorCamera).position.y
    z# = SpectatorCameras(CurrentSpectatorCamera).position.z
    rx# = SpectatorCameras(CurrentSpectatorCamera).rotation.x
    ry# = SpectatorCameras(CurrentSpectatorCamera).rotation.y
    rz# = SpectatorCameras(CurrentSpectatorCamera).rotation.z
    Camera_SetRotMatrix(RootCamera,RX#,RY#,RZ#)
    Camera_SetPosMatrix(RootCamera,X#,Y#,Z#)
ENDFUNCTION

function Camera_Spectator_Clear():
    undim SpectatorCameras()
ENDFUNCTION

remstart
//do temporary spectator movement
X# = Camera_GetPositionX(RootCamera)
Y# = Camera_GetPositionY(RootCamera)
Z# = Camera_GetPositionZ(RootCamera)
RX# = Camera_GetRotationX(RootCamera)
RY# = Camera_GetRotationY(RootCamera)
RZ# = Camera_GetRotationZ(RootCamera)
RX# = wrapvalue(RX# + sys_mousemovey*0.2)
RY# = wrapvalue(RY# + sys_mousemovex*0.2)
RZ# = 0.0

NewX# = newxvalue(X#,RY#,(keystate(Game_Input.KEY_FORWARD)-keystate(Game_Input.KEY_BACKWARD))*TBM)
NewZ# = Newzvalue(Z#,RY#,(keystate(Game_Input.KEY_FORWARD)-keystate(Game_Input.KEY_BACKWARD))*TBM)
NewX# = newxvalue(NewX#,RY#-90,(keystate(Game_Input.KEY_LEFT)-keystate(Game_Input.KEY_RIGHT))*TBM)
NewZ# = Newzvalue(NewZ#,RY#-90,(keystate(Game_Input.KEY_LEFT)-keystate(Game_Input.KEY_RIGHT))*TBM)
newY# = Y# + sin(RX#-180) * (keystate(Game_Input.KEY_FORWARD)-keystate(Game_Input.KEY_BACKWARD))*TBM
Camera_SetRotMatrix(RootCamera,RX#,RY#,RZ#)
Camera_SetPosMatrix(RootCamera,NewX#,NewY#,NewZ#)
remend

//////////////////////////////////////////////////////////////
//  End of code
//////////////////////////////////////////////////////////////